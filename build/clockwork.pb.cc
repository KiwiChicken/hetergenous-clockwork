// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clockwork.proto

#include "clockwork.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientModelInfoProto_clockwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUInfoProto_clockwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInfoProto_clockwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestHeaderProto_clockwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseHeaderProto_clockwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingProto_clockwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkerMemoryInfoProto_clockwork_2eproto;
namespace clockwork {
class RequestHeaderProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeaderProto> _instance;
} _RequestHeaderProto_default_instance_;
class ResponseHeaderProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseHeaderProto> _instance;
} _ResponseHeaderProto_default_instance_;
class ModelUploadReqProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelUploadReqProto> _instance;
} _ModelUploadReqProto_default_instance_;
class ModelUploadRspProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelUploadRspProto> _instance;
} _ModelUploadRspProto_default_instance_;
class ModelInferenceReqProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInferenceReqProto> _instance;
} _ModelInferenceReqProto_default_instance_;
class ModelInferenceRspProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInferenceRspProto> _instance;
} _ModelInferenceRspProto_default_instance_;
class EvictReqProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvictReqProto> _instance;
} _EvictReqProto_default_instance_;
class EvictRspProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvictRspProto> _instance;
} _EvictRspProto_default_instance_;
class LoadModelFromDiskReqProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadModelFromDiskReqProto> _instance;
} _LoadModelFromDiskReqProto_default_instance_;
class LoadModelFromDiskRspProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadModelFromDiskRspProto> _instance;
} _LoadModelFromDiskRspProto_default_instance_;
class LSReqProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LSReqProto> _instance;
} _LSReqProto_default_instance_;
class ClientModelInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientModelInfoProto> _instance;
} _ClientModelInfoProto_default_instance_;
class LSRspProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LSRspProto> _instance;
} _LSRspProto_default_instance_;
class ErrorResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorResultProto> _instance;
} _ErrorResultProto_default_instance_;
class TimingProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimingProto> _instance;
} _TimingProto_default_instance_;
class LoadModelFromDiskActionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadModelFromDiskActionProto> _instance;
} _LoadModelFromDiskActionProto_default_instance_;
class LoadModelFromDiskResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadModelFromDiskResultProto> _instance;
} _LoadModelFromDiskResultProto_default_instance_;
class LoadWeightsActionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadWeightsActionProto> _instance;
} _LoadWeightsActionProto_default_instance_;
class LoadWeightsResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadWeightsResultProto> _instance;
} _LoadWeightsResultProto_default_instance_;
class EvictWeightsActionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvictWeightsActionProto> _instance;
} _EvictWeightsActionProto_default_instance_;
class EvictWeightsResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvictWeightsResultProto> _instance;
} _EvictWeightsResultProto_default_instance_;
class InferActionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InferActionProto> _instance;
} _InferActionProto_default_instance_;
class InferResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InferResultProto> _instance;
} _InferResultProto_default_instance_;
class ClearCacheActionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearCacheActionProto> _instance;
} _ClearCacheActionProto_default_instance_;
class ClearCacheResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearCacheResultProto> _instance;
} _ClearCacheResultProto_default_instance_;
class GetWorkerStateActionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkerStateActionProto> _instance;
} _GetWorkerStateActionProto_default_instance_;
class ModelInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInfoProto> _instance;
} _ModelInfoProto_default_instance_;
class GPUInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPUInfoProto> _instance;
} _GPUInfoProto_default_instance_;
class WorkerMemoryInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerMemoryInfoProto> _instance;
} _WorkerMemoryInfoProto_default_instance_;
class GetWorkerStateResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetWorkerStateResultProto> _instance;
} _GetWorkerStateResultProto_default_instance_;
}  // namespace clockwork
static void InitDefaultsscc_info_ClearCacheActionProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ClearCacheActionProto_default_instance_;
    new (ptr) ::clockwork::ClearCacheActionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ClearCacheActionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearCacheActionProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearCacheActionProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_ClearCacheResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ClearCacheResultProto_default_instance_;
    new (ptr) ::clockwork::ClearCacheResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ClearCacheResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearCacheResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearCacheResultProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_ClientModelInfoProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ClientModelInfoProto_default_instance_;
    new (ptr) ::clockwork::ClientModelInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ClientModelInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientModelInfoProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientModelInfoProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_ErrorResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ErrorResultProto_default_instance_;
    new (ptr) ::clockwork::ErrorResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ErrorResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorResultProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_EvictReqProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_EvictReqProto_default_instance_;
    new (ptr) ::clockwork::EvictReqProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::EvictReqProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EvictReqProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EvictReqProto_clockwork_2eproto}, {
      &scc_info_RequestHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_EvictRspProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_EvictRspProto_default_instance_;
    new (ptr) ::clockwork::EvictRspProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::EvictRspProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EvictRspProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EvictRspProto_clockwork_2eproto}, {
      &scc_info_ResponseHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_EvictWeightsActionProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_EvictWeightsActionProto_default_instance_;
    new (ptr) ::clockwork::EvictWeightsActionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::EvictWeightsActionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvictWeightsActionProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EvictWeightsActionProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_EvictWeightsResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_EvictWeightsResultProto_default_instance_;
    new (ptr) ::clockwork::EvictWeightsResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::EvictWeightsResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EvictWeightsResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EvictWeightsResultProto_clockwork_2eproto}, {
      &scc_info_TimingProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_GPUInfoProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_GPUInfoProto_default_instance_;
    new (ptr) ::clockwork::GPUInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::GPUInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPUInfoProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPUInfoProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_GetWorkerStateActionProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_GetWorkerStateActionProto_default_instance_;
    new (ptr) ::clockwork::GetWorkerStateActionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::GetWorkerStateActionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetWorkerStateActionProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetWorkerStateActionProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_GetWorkerStateResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_GetWorkerStateResultProto_default_instance_;
    new (ptr) ::clockwork::GetWorkerStateResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::GetWorkerStateResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetWorkerStateResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetWorkerStateResultProto_clockwork_2eproto}, {
      &scc_info_WorkerMemoryInfoProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_InferActionProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_InferActionProto_default_instance_;
    new (ptr) ::clockwork::InferActionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::InferActionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InferActionProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InferActionProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_InferResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_InferResultProto_default_instance_;
    new (ptr) ::clockwork::InferResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::InferResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InferResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InferResultProto_clockwork_2eproto}, {
      &scc_info_TimingProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_LSReqProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LSReqProto_default_instance_;
    new (ptr) ::clockwork::LSReqProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LSReqProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LSReqProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LSReqProto_clockwork_2eproto}, {
      &scc_info_RequestHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_LSRspProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LSRspProto_default_instance_;
    new (ptr) ::clockwork::LSRspProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LSRspProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LSRspProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LSRspProto_clockwork_2eproto}, {
      &scc_info_ResponseHeaderProto_clockwork_2eproto.base,
      &scc_info_ClientModelInfoProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_LoadModelFromDiskActionProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LoadModelFromDiskActionProto_default_instance_;
    new (ptr) ::clockwork::LoadModelFromDiskActionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LoadModelFromDiskActionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadModelFromDiskActionProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadModelFromDiskActionProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_LoadModelFromDiskReqProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LoadModelFromDiskReqProto_default_instance_;
    new (ptr) ::clockwork::LoadModelFromDiskReqProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LoadModelFromDiskReqProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadModelFromDiskReqProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadModelFromDiskReqProto_clockwork_2eproto}, {
      &scc_info_RequestHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_LoadModelFromDiskResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LoadModelFromDiskResultProto_default_instance_;
    new (ptr) ::clockwork::LoadModelFromDiskResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LoadModelFromDiskResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadModelFromDiskResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadModelFromDiskResultProto_clockwork_2eproto}, {
      &scc_info_TimingProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_LoadModelFromDiskRspProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LoadModelFromDiskRspProto_default_instance_;
    new (ptr) ::clockwork::LoadModelFromDiskRspProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LoadModelFromDiskRspProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadModelFromDiskRspProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadModelFromDiskRspProto_clockwork_2eproto}, {
      &scc_info_ResponseHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_LoadWeightsActionProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LoadWeightsActionProto_default_instance_;
    new (ptr) ::clockwork::LoadWeightsActionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LoadWeightsActionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadWeightsActionProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadWeightsActionProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_LoadWeightsResultProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_LoadWeightsResultProto_default_instance_;
    new (ptr) ::clockwork::LoadWeightsResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::LoadWeightsResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadWeightsResultProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadWeightsResultProto_clockwork_2eproto}, {
      &scc_info_TimingProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_ModelInferenceReqProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ModelInferenceReqProto_default_instance_;
    new (ptr) ::clockwork::ModelInferenceReqProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ModelInferenceReqProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelInferenceReqProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelInferenceReqProto_clockwork_2eproto}, {
      &scc_info_RequestHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_ModelInferenceRspProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ModelInferenceRspProto_default_instance_;
    new (ptr) ::clockwork::ModelInferenceRspProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ModelInferenceRspProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelInferenceRspProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelInferenceRspProto_clockwork_2eproto}, {
      &scc_info_ResponseHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_ModelInfoProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ModelInfoProto_default_instance_;
    new (ptr) ::clockwork::ModelInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ModelInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInfoProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelInfoProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_ModelUploadReqProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ModelUploadReqProto_default_instance_;
    new (ptr) ::clockwork::ModelUploadReqProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ModelUploadReqProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelUploadReqProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelUploadReqProto_clockwork_2eproto}, {
      &scc_info_RequestHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_ModelUploadRspProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ModelUploadRspProto_default_instance_;
    new (ptr) ::clockwork::ModelUploadRspProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ModelUploadRspProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelUploadRspProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelUploadRspProto_clockwork_2eproto}, {
      &scc_info_ResponseHeaderProto_clockwork_2eproto.base,}};

static void InitDefaultsscc_info_RequestHeaderProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_RequestHeaderProto_default_instance_;
    new (ptr) ::clockwork::RequestHeaderProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::RequestHeaderProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestHeaderProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestHeaderProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_ResponseHeaderProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_ResponseHeaderProto_default_instance_;
    new (ptr) ::clockwork::ResponseHeaderProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::ResponseHeaderProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseHeaderProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponseHeaderProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_TimingProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_TimingProto_default_instance_;
    new (ptr) ::clockwork::TimingProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::TimingProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimingProto_clockwork_2eproto}, {}};

static void InitDefaultsscc_info_WorkerMemoryInfoProto_clockwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clockwork::_WorkerMemoryInfoProto_default_instance_;
    new (ptr) ::clockwork::WorkerMemoryInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clockwork::WorkerMemoryInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkerMemoryInfoProto_clockwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WorkerMemoryInfoProto_clockwork_2eproto}, {
      &scc_info_GPUInfoProto_clockwork_2eproto.base,
      &scc_info_ModelInfoProto_clockwork_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_clockwork_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_clockwork_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_clockwork_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_clockwork_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::clockwork::RequestHeaderProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::RequestHeaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::RequestHeaderProto, user_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::RequestHeaderProto, user_request_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::clockwork::ResponseHeaderProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ResponseHeaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ResponseHeaderProto, user_request_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ResponseHeaderProto, status_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ResponseHeaderProto, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, batchsize_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, so_len_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, clockwork_len_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadReqProto, params_len_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadRspProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadRspProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadRspProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadRspProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadRspProto, input_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelUploadRspProto, output_size_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceReqProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceReqProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceReqProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceReqProto, batch_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceReqProto, slo_factor_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceRspProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceRspProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceRspProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceRspProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInferenceRspProto, batch_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictReqProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictReqProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictReqProto, model_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictRspProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictRspProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictRspProto, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskReqProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskReqProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskReqProto, remote_path_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskReqProto, no_of_copies_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, input_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, output_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskRspProto, copies_created_),
  0,
  2,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::clockwork::LSReqProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LSReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LSReqProto, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::clockwork::ClientModelInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClientModelInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ClientModelInfoProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClientModelInfoProto, remote_path_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClientModelInfoProto, input_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClientModelInfoProto, output_size_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::LSRspProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LSRspProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LSRspProto, header_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LSRspProto, models_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, action_type_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, status_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, message_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ErrorResultProto, result_sent_),
  1,
  2,
  5,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::clockwork::TimingProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::TimingProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::TimingProto, begin_),
  PROTOBUF_FIELD_OFFSET(::clockwork::TimingProto, end_),
  PROTOBUF_FIELD_OFFSET(::clockwork::TimingProto, duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, model_path_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, earliest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, latest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, no_of_copies_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, max_batch_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskActionProto, max_exec_duration_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, timing_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, input_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, output_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, supported_batch_sizes_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, weights_size_in_cache_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, num_weights_pages_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, weights_load_time_nanos_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, batch_size_exec_times_nanos_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, copies_created_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadModelFromDiskResultProto, result_sent_),
  3,
  0,
  1,
  2,
  ~0u,
  5,
  4,
  6,
  ~0u,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, earliest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, latest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsActionProto, expected_duration_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsResultProto, timing_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::LoadWeightsResultProto, result_sent_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, earliest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsActionProto, latest_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsResultProto, timing_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::EvictWeightsResultProto, result_sent_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, model_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, earliest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, latest_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, expected_duration_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, batch_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferActionProto, input_sizes_),
  0,
  1,
  4,
  2,
  3,
  6,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, copy_input_timing_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, exec_timing_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, copy_output_timing_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, gpu_clock_before_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, gpu_clock_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::InferResultProto, result_sent_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheActionProto, action_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ClearCacheResultProto, result_sent_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateActionProto, action_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, source_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, input_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, output_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, supported_batch_sizes_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, weights_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, num_weights_pages_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, weights_load_time_nanos_),
  PROTOBUF_FIELD_OFFSET(::clockwork::ModelInfoProto, batch_size_exec_times_nanos_),
  3,
  0,
  1,
  2,
  ~0u,
  5,
  4,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, weights_cache_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, weights_cache_total_pages_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, models_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, io_pool_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GPUInfoProto, workspace_pool_size_),
  1,
  0,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, page_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, host_weights_cache_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, host_io_pool_size_),
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, gpus_),
  PROTOBUF_FIELD_OFFSET(::clockwork::WorkerMemoryInfoProto, models_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateResultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateResultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateResultProto, action_id_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateResultProto, worker_memory_info_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateResultProto, action_received_),
  PROTOBUF_FIELD_OFFSET(::clockwork::GetWorkerStateResultProto, result_sent_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::clockwork::RequestHeaderProto)},
  { 9, 17, sizeof(::clockwork::ResponseHeaderProto)},
  { 20, 30, sizeof(::clockwork::ModelUploadReqProto)},
  { 35, 44, sizeof(::clockwork::ModelUploadRspProto)},
  { 48, 57, sizeof(::clockwork::ModelInferenceReqProto)},
  { 61, 69, sizeof(::clockwork::ModelInferenceRspProto)},
  { 72, 79, sizeof(::clockwork::EvictReqProto)},
  { 81, 87, sizeof(::clockwork::EvictRspProto)},
  { 88, 96, sizeof(::clockwork::LoadModelFromDiskReqProto)},
  { 99, 109, sizeof(::clockwork::LoadModelFromDiskRspProto)},
  { 114, 120, sizeof(::clockwork::LSReqProto)},
  { 121, 130, sizeof(::clockwork::ClientModelInfoProto)},
  { 134, 141, sizeof(::clockwork::LSRspProto)},
  { 143, 154, sizeof(::clockwork::ErrorResultProto)},
  { 160, 168, sizeof(::clockwork::TimingProto)},
  { 171, 184, sizeof(::clockwork::LoadModelFromDiskActionProto)},
  { 192, 209, sizeof(::clockwork::LoadModelFromDiskResultProto)},
  { 221, 232, sizeof(::clockwork::LoadWeightsActionProto)},
  { 238, 247, sizeof(::clockwork::LoadWeightsResultProto)},
  { 251, 261, sizeof(::clockwork::EvictWeightsActionProto)},
  { 266, 275, sizeof(::clockwork::EvictWeightsResultProto)},
  { 279, 292, sizeof(::clockwork::InferActionProto)},
  { 300, 314, sizeof(::clockwork::InferResultProto)},
  { 323, 329, sizeof(::clockwork::ClearCacheActionProto)},
  { 330, 338, sizeof(::clockwork::ClearCacheResultProto)},
  { 341, 347, sizeof(::clockwork::GetWorkerStateActionProto)},
  { 348, 362, sizeof(::clockwork::ModelInfoProto)},
  { 371, 382, sizeof(::clockwork::GPUInfoProto)},
  { 388, 398, sizeof(::clockwork::WorkerMemoryInfoProto)},
  { 403, 412, sizeof(::clockwork::GetWorkerStateResultProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_RequestHeaderProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ResponseHeaderProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ModelUploadReqProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ModelUploadRspProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ModelInferenceReqProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ModelInferenceRspProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_EvictReqProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_EvictRspProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LoadModelFromDiskReqProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LoadModelFromDiskRspProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LSReqProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ClientModelInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LSRspProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ErrorResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_TimingProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LoadModelFromDiskActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LoadModelFromDiskResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LoadWeightsActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_LoadWeightsResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_EvictWeightsActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_EvictWeightsResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_InferActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_InferResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ClearCacheActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ClearCacheResultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_GetWorkerStateActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_ModelInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_GPUInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_WorkerMemoryInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clockwork::_GetWorkerStateResultProto_default_instance_),
};

const char descriptor_table_protodef_clockwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017clockwork.proto\022\tclockwork\">\n\022RequestH"
  "eaderProto\022\017\n\007user_id\030\001 \001(\005\022\027\n\017user_requ"
  "est_id\030\002 \001(\005\"O\n\023ResponseHeaderProto\022\027\n\017u"
  "ser_request_id\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\017\n\007"
  "message\030\003 \001(\t\"\222\001\n\023ModelUploadReqProto\022-\n"
  "\006header\030\001 \002(\0132\035.clockwork.RequestHeaderP"
  "roto\022\021\n\tbatchsize\030\003 \002(\r\022\016\n\006so_len\030\004 \002(\004\022"
  "\025\n\rclockwork_len\030\005 \002(\004\022\022\n\nparams_len\030\006 \002"
  "(\004\"\200\001\n\023ModelUploadRspProto\022.\n\006header\030\001 \002"
  "(\0132\036.clockwork.ResponseHeaderProto\022\020\n\010mo"
  "del_id\030\002 \002(\r\022\022\n\ninput_size\030\003 \002(\004\022\023\n\013outp"
  "ut_size\030\004 \002(\004\"\201\001\n\026ModelInferenceReqProto"
  "\022-\n\006header\030\001 \002(\0132\035.clockwork.RequestHead"
  "erProto\022\020\n\010model_id\030\002 \002(\r\022\022\n\nbatch_size\030"
  "\003 \002(\r\022\022\n\nslo_factor\030\004 \002(\002\"n\n\026ModelInfere"
  "nceRspProto\022.\n\006header\030\001 \002(\0132\036.clockwork."
  "ResponseHeaderProto\022\020\n\010model_id\030\002 \002(\r\022\022\n"
  "\nbatch_size\030\003 \002(\r\"P\n\rEvictReqProto\022-\n\006he"
  "ader\030\001 \002(\0132\035.clockwork.RequestHeaderProt"
  "o\022\020\n\010model_id\030\002 \002(\r\"\?\n\rEvictRspProto\022.\n\006"
  "header\030\001 \002(\0132\036.clockwork.ResponseHeaderP"
  "roto\"u\n\031LoadModelFromDiskReqProto\022-\n\006hea"
  "der\030\001 \002(\0132\035.clockwork.RequestHeaderProto"
  "\022\023\n\013remote_path\030\002 \002(\t\022\024\n\014no_of_copies\030\003 "
  "\002(\005\"\236\001\n\031LoadModelFromDiskRspProto\022.\n\006hea"
  "der\030\001 \002(\0132\036.clockwork.ResponseHeaderProt"
  "o\022\020\n\010model_id\030\002 \002(\r\022\022\n\ninput_size\030\003 \002(\004\022"
  "\023\n\013output_size\030\004 \002(\004\022\026\n\016copies_created\030\005"
  " \002(\005\";\n\nLSReqProto\022-\n\006header\030\001 \002(\0132\035.clo"
  "ckwork.RequestHeaderProto\"f\n\024ClientModel"
  "InfoProto\022\020\n\010model_id\030\001 \002(\r\022\023\n\013remote_pa"
  "th\030\002 \002(\t\022\022\n\ninput_size\030\003 \002(\004\022\023\n\013output_s"
  "ize\030\004 \002(\004\"m\n\nLSRspProto\022.\n\006header\030\001 \002(\0132"
  "\036.clockwork.ResponseHeaderProto\022/\n\006model"
  "s\030\002 \003(\0132\037.clockwork.ClientModelInfoProto"
  "\"\211\001\n\020ErrorResultProto\022\021\n\taction_id\030\001 \002(\005"
  "\022\023\n\013action_type\030\002 \002(\005\022\016\n\006status\030\003 \002(\005\022\017\n"
  "\007message\030\004 \002(\t\022\027\n\017action_received\030\005 \002(\006\022"
  "\023\n\013result_sent\030\006 \002(\006\";\n\013TimingProto\022\r\n\005b"
  "egin\030\001 \002(\006\022\013\n\003end\030\002 \002(\006\022\020\n\010duration\030\003 \002("
  "\006\"\302\001\n\034LoadModelFromDiskActionProto\022\021\n\tac"
  "tion_id\030\001 \002(\005\022\020\n\010model_id\030\002 \002(\005\022\022\n\nmodel"
  "_path\030\003 \002(\t\022\020\n\010earliest\030\004 \002(\006\022\016\n\006latest\030"
  "\005 \002(\006\022\024\n\014no_of_copies\030\006 \002(\005\022\026\n\016max_batch"
  "_size\030\007 \002(\r\022\031\n\021max_exec_duration\030\010 \002(\004\"\347"
  "\002\n\034LoadModelFromDiskResultProto\022\021\n\tactio"
  "n_id\030\001 \002(\005\022&\n\006timing\030\002 \002(\0132\026.clockwork.T"
  "imingProto\022\022\n\ninput_size\030\003 \002(\004\022\023\n\013output"
  "_size\030\004 \002(\004\022\035\n\025supported_batch_sizes\030\005 \003"
  "(\r\022\035\n\025weights_size_in_cache\030\006 \002(\004\022\031\n\021num"
  "_weights_pages\030\007 \002(\r\022\037\n\027weights_load_tim"
  "e_nanos\030\010 \002(\004\022#\n\033batch_size_exec_times_n"
  "anos\030\t \003(\004\022\026\n\016copies_created\030\n \002(\005\022\027\n\017ac"
  "tion_received\030\013 \002(\006\022\023\n\013result_sent\030\014 \002(\006"
  "\"\212\001\n\026LoadWeightsActionProto\022\021\n\taction_id"
  "\030\001 \002(\005\022\020\n\010model_id\030\002 \002(\005\022\016\n\006gpu_id\030\003 \002(\r"
  "\022\020\n\010earliest\030\004 \002(\006\022\016\n\006latest\030\005 \002(\006\022\031\n\021ex"
  "pected_duration\030\006 \002(\004\"\201\001\n\026LoadWeightsRes"
  "ultProto\022\021\n\taction_id\030\001 \002(\005\022&\n\006timing\030\002 "
  "\002(\0132\026.clockwork.TimingProto\022\027\n\017action_re"
  "ceived\030\003 \002(\006\022\023\n\013result_sent\030\004 \002(\006\"p\n\027Evi"
  "ctWeightsActionProto\022\021\n\taction_id\030\001 \002(\005\022"
  "\020\n\010model_id\030\002 \002(\005\022\016\n\006gpu_id\030\003 \002(\r\022\020\n\010ear"
  "liest\030\004 \002(\006\022\016\n\006latest\030\005 \002(\006\"\202\001\n\027EvictWei"
  "ghtsResultProto\022\021\n\taction_id\030\001 \002(\005\022&\n\006ti"
  "ming\030\002 \002(\0132\026.clockwork.TimingProto\022\027\n\017ac"
  "tion_received\030\003 \002(\006\022\023\n\013result_sent\030\004 \002(\006"
  "\"\255\001\n\020InferActionProto\022\021\n\taction_id\030\001 \002(\005"
  "\022\020\n\010model_id\030\002 \002(\005\022\016\n\006gpu_id\030\003 \002(\r\022\020\n\010ea"
  "rliest\030\004 \002(\006\022\016\n\006latest\030\005 \002(\006\022\031\n\021expected"
  "_duration\030\006 \002(\004\022\022\n\nbatch_size\030\007 \002(\r\022\023\n\013i"
  "nput_sizes\030\010 \003(\r\"\244\002\n\020InferResultProto\022\021\n"
  "\taction_id\030\001 \002(\005\0221\n\021copy_input_timing\030\002 "
  "\002(\0132\026.clockwork.TimingProto\022+\n\013exec_timi"
  "ng\030\003 \002(\0132\026.clockwork.TimingProto\0222\n\022copy"
  "_output_timing\030\004 \002(\0132\026.clockwork.TimingP"
  "roto\022\016\n\006gpu_id\030\005 \002(\r\022\030\n\020gpu_clock_before"
  "\030\006 \002(\r\022\021\n\tgpu_clock\030\007 \002(\r\022\027\n\017action_rece"
  "ived\030\010 \002(\006\022\023\n\013result_sent\030\t \002(\006\"*\n\025Clear"
  "CacheActionProto\022\021\n\taction_id\030\001 \002(\005\"X\n\025C"
  "learCacheResultProto\022\021\n\taction_id\030\001 \002(\005\022"
  "\027\n\017action_received\030\002 \002(\004\022\023\n\013result_sent\030"
  "\003 \002(\004\".\n\031GetWorkerStateActionProto\022\021\n\tac"
  "tion_id\030\001 \002(\005\"\353\001\n\016ModelInfoProto\022\n\n\002id\030\001"
  " \002(\005\022\016\n\006source\030\002 \002(\t\022\022\n\ninput_size\030\003 \002(\004"
  "\022\023\n\013output_size\030\004 \002(\004\022\035\n\025supported_batch"
  "_sizes\030\005 \003(\r\022\024\n\014weights_size\030\006 \002(\004\022\031\n\021nu"
  "m_weights_pages\030\007 \002(\r\022\037\n\027weights_load_ti"
  "me_nanos\030\010 \002(\004\022#\n\033batch_size_exec_times_"
  "nanos\030\t \003(\004\"\234\001\n\014GPUInfoProto\022\n\n\002id\030\001 \002(\005"
  "\022\032\n\022weights_cache_size\030\002 \002(\004\022!\n\031weights_"
  "cache_total_pages\030\003 \002(\005\022\016\n\006models\030\004 \003(\r\022"
  "\024\n\014io_pool_size\030\005 \002(\004\022\033\n\023workspace_pool_"
  "size\030\006 \002(\004\"\270\001\n\025WorkerMemoryInfoProto\022\021\n\t"
  "page_size\030\001 \002(\004\022\037\n\027host_weights_cache_si"
  "ze\030\002 \002(\004\022\031\n\021host_io_pool_size\030\003 \002(\004\022%\n\004g"
  "pus\030\004 \003(\0132\027.clockwork.GPUInfoProto\022)\n\006mo"
  "dels\030\005 \003(\0132\031.clockwork.ModelInfoProto\"\232\001"
  "\n\031GetWorkerStateResultProto\022\021\n\taction_id"
  "\030\001 \002(\005\022<\n\022worker_memory_info\030\002 \002(\0132 .clo"
  "ckwork.WorkerMemoryInfoProto\022\027\n\017action_r"
  "eceived\030\003 \002(\004\022\023\n\013result_sent\030\004 \002(\004*\313\001\n\013R"
  "equestType\022\024\n\020REQ_UPLOAD_MODEL\020\001\022\021\n\rREQ_"
  "INFERENCE\020\002\022\031\n\025REQ_LOAD_REMOTE_MODEL\020\003\022\r"
  "\n\tREQ_EVICT\020\004\022\n\n\006REQ_LS\020\005\022\024\n\020RSP_UPLOAD_"
  "MODEL\020e\022\021\n\rRSP_INFERENCE\020f\022\031\n\025RSP_LOAD_R"
  "EMOTE_MODEL\020g\022\r\n\tRSP_EVICT\020h\022\n\n\006RSP_LS\020i"
  "*\255\002\n\nActionType\022\034\n\030ACT_LOAD_MODEL_FROM_D"
  "ISK\020\001\022\024\n\020ACT_LOAD_WEIGHTS\020\002\022\r\n\tACT_INFER"
  "\020\003\022\025\n\021ACT_EVICT_WEIGHTS\020\004\022\023\n\017ACT_CLEAR_C"
  "ACHE\020\005\022\030\n\024ACT_GET_WORKER_STATE\020\006\022\r\n\tRES_"
  "ERROR\020d\022\034\n\030RES_LOAD_MODEL_FROM_DISK\020e\022\024\n"
  "\020RES_LOAD_WEIGHTS\020f\022\r\n\tRES_INFER\020g\022\025\n\021RE"
  "S_EVICT_WEIGHTS\020h\022\023\n\017RES_CLEAR_CACHE\020i\022\030"
  "\n\024RES_GET_WORKER_STATE\020j"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_clockwork_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_clockwork_2eproto_sccs[30] = {
  &scc_info_ClearCacheActionProto_clockwork_2eproto.base,
  &scc_info_ClearCacheResultProto_clockwork_2eproto.base,
  &scc_info_ClientModelInfoProto_clockwork_2eproto.base,
  &scc_info_ErrorResultProto_clockwork_2eproto.base,
  &scc_info_EvictReqProto_clockwork_2eproto.base,
  &scc_info_EvictRspProto_clockwork_2eproto.base,
  &scc_info_EvictWeightsActionProto_clockwork_2eproto.base,
  &scc_info_EvictWeightsResultProto_clockwork_2eproto.base,
  &scc_info_GPUInfoProto_clockwork_2eproto.base,
  &scc_info_GetWorkerStateActionProto_clockwork_2eproto.base,
  &scc_info_GetWorkerStateResultProto_clockwork_2eproto.base,
  &scc_info_InferActionProto_clockwork_2eproto.base,
  &scc_info_InferResultProto_clockwork_2eproto.base,
  &scc_info_LSReqProto_clockwork_2eproto.base,
  &scc_info_LSRspProto_clockwork_2eproto.base,
  &scc_info_LoadModelFromDiskActionProto_clockwork_2eproto.base,
  &scc_info_LoadModelFromDiskReqProto_clockwork_2eproto.base,
  &scc_info_LoadModelFromDiskResultProto_clockwork_2eproto.base,
  &scc_info_LoadModelFromDiskRspProto_clockwork_2eproto.base,
  &scc_info_LoadWeightsActionProto_clockwork_2eproto.base,
  &scc_info_LoadWeightsResultProto_clockwork_2eproto.base,
  &scc_info_ModelInferenceReqProto_clockwork_2eproto.base,
  &scc_info_ModelInferenceRspProto_clockwork_2eproto.base,
  &scc_info_ModelInfoProto_clockwork_2eproto.base,
  &scc_info_ModelUploadReqProto_clockwork_2eproto.base,
  &scc_info_ModelUploadRspProto_clockwork_2eproto.base,
  &scc_info_RequestHeaderProto_clockwork_2eproto.base,
  &scc_info_ResponseHeaderProto_clockwork_2eproto.base,
  &scc_info_TimingProto_clockwork_2eproto.base,
  &scc_info_WorkerMemoryInfoProto_clockwork_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_clockwork_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clockwork_2eproto = {
  false, false, descriptor_table_protodef_clockwork_2eproto, "clockwork.proto", 4584,
  &descriptor_table_clockwork_2eproto_once, descriptor_table_clockwork_2eproto_sccs, descriptor_table_clockwork_2eproto_deps, 30, 0,
  schemas, file_default_instances, TableStruct_clockwork_2eproto::offsets,
  file_level_metadata_clockwork_2eproto, 30, file_level_enum_descriptors_clockwork_2eproto, file_level_service_descriptors_clockwork_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_clockwork_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_clockwork_2eproto)), true);
namespace clockwork {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_clockwork_2eproto);
  return file_level_enum_descriptors_clockwork_2eproto[0];
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_clockwork_2eproto);
  return file_level_enum_descriptors_clockwork_2eproto[1];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestHeaderProto::InitAsDefaultInstance() {
}
class RequestHeaderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestHeaderProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RequestHeaderProto::RequestHeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.RequestHeaderProto)
}
RequestHeaderProto::RequestHeaderProto(const RequestHeaderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_request_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(user_request_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.RequestHeaderProto)
}

void RequestHeaderProto::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_request_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(user_request_id_));
}

RequestHeaderProto::~RequestHeaderProto() {
  // @@protoc_insertion_point(destructor:clockwork.RequestHeaderProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestHeaderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestHeaderProto::ArenaDtor(void* object) {
  RequestHeaderProto* _this = reinterpret_cast< RequestHeaderProto* >(object);
  (void)_this;
}
void RequestHeaderProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeaderProto& RequestHeaderProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestHeaderProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void RequestHeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.RequestHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_request_id_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(user_request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeaderProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_request_id(&has_bits);
          user_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeaderProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.RequestHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // optional int32 user_request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.RequestHeaderProto)
  return target;
}

size_t RequestHeaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.RequestHeaderProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_id());
    }

    // optional int32 user_request_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_request_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeaderProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.RequestHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeaderProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeaderProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.RequestHeaderProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.RequestHeaderProto)
    MergeFrom(*source);
  }
}

void RequestHeaderProto::MergeFrom(const RequestHeaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.RequestHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_request_id_ = from.user_request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestHeaderProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.RequestHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeaderProto::CopyFrom(const RequestHeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.RequestHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeaderProto::IsInitialized() const {
  return true;
}

void RequestHeaderProto::InternalSwap(RequestHeaderProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeaderProto, user_request_id_)
      + sizeof(RequestHeaderProto::user_request_id_)
      - PROTOBUF_FIELD_OFFSET(RequestHeaderProto, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeaderProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseHeaderProto::InitAsDefaultInstance() {
}
class ResponseHeaderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseHeaderProto>()._has_bits_);
  static void set_has_user_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseHeaderProto::ResponseHeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ResponseHeaderProto)
}
ResponseHeaderProto::ResponseHeaderProto(const ResponseHeaderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&user_request_id_, &from.user_request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_request_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ResponseHeaderProto)
}

void ResponseHeaderProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseHeaderProto_clockwork_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&user_request_id_)) + sizeof(status_));
}

ResponseHeaderProto::~ResponseHeaderProto() {
  // @@protoc_insertion_point(destructor:clockwork.ResponseHeaderProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseHeaderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseHeaderProto::ArenaDtor(void* object) {
  ResponseHeaderProto* _this = reinterpret_cast< ResponseHeaderProto* >(object);
  (void)_this;
}
void ResponseHeaderProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseHeaderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseHeaderProto& ResponseHeaderProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseHeaderProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ResponseHeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ResponseHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&user_request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&user_request_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeaderProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_request_id(&has_bits);
          user_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clockwork.ResponseHeaderProto.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseHeaderProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ResponseHeaderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_request_id(), target);
  }

  // optional int32 status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clockwork.ResponseHeaderProto.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ResponseHeaderProto)
  return target;
}

size_t ResponseHeaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ResponseHeaderProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 user_request_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_user_request_id());
    }

    // optional int32 status = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeaderProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ResponseHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeaderProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseHeaderProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ResponseHeaderProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ResponseHeaderProto)
    MergeFrom(*source);
  }
}

void ResponseHeaderProto::MergeFrom(const ResponseHeaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ResponseHeaderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      user_request_id_ = from.user_request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseHeaderProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ResponseHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeaderProto::CopyFrom(const ResponseHeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ResponseHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeaderProto::IsInitialized() const {
  return true;
}

void ResponseHeaderProto::InternalSwap(ResponseHeaderProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHeaderProto, status_)
      + sizeof(ResponseHeaderProto::status_)
      - PROTOBUF_FIELD_OFFSET(ResponseHeaderProto, user_request_id_)>(
          reinterpret_cast<char*>(&user_request_id_),
          reinterpret_cast<char*>(&other->user_request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeaderProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelUploadReqProto::InitAsDefaultInstance() {
  ::clockwork::_ModelUploadReqProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::RequestHeaderProto*>(
      ::clockwork::RequestHeaderProto::internal_default_instance());
}
class ModelUploadReqProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelUploadReqProto>()._has_bits_);
  static const ::clockwork::RequestHeaderProto& header(const ModelUploadReqProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batchsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_so_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clockwork_len(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_params_len(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::clockwork::RequestHeaderProto&
ModelUploadReqProto::_Internal::header(const ModelUploadReqProto* msg) {
  return *msg->header_;
}
ModelUploadReqProto::ModelUploadReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ModelUploadReqProto)
}
ModelUploadReqProto::ModelUploadReqProto(const ModelUploadReqProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::RequestHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&so_len_, &from.so_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&batchsize_) -
    reinterpret_cast<char*>(&so_len_)) + sizeof(batchsize_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ModelUploadReqProto)
}

void ModelUploadReqProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelUploadReqProto_clockwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batchsize_) -
      reinterpret_cast<char*>(&header_)) + sizeof(batchsize_));
}

ModelUploadReqProto::~ModelUploadReqProto() {
  // @@protoc_insertion_point(destructor:clockwork.ModelUploadReqProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelUploadReqProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ModelUploadReqProto::ArenaDtor(void* object) {
  ModelUploadReqProto* _this = reinterpret_cast< ModelUploadReqProto* >(object);
  (void)_this;
}
void ModelUploadReqProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelUploadReqProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelUploadReqProto& ModelUploadReqProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelUploadReqProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ModelUploadReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ModelUploadReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&so_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batchsize_) -
        reinterpret_cast<char*>(&so_len_)) + sizeof(batchsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelUploadReqProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.RequestHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 batchsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_batchsize(&has_bits);
          batchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 so_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_so_len(&has_bits);
          so_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 clockwork_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clockwork_len(&has_bits);
          clockwork_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 params_len = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_params_len(&has_bits);
          params_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelUploadReqProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ModelUploadReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.RequestHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 batchsize = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batchsize(), target);
  }

  // required uint64 so_len = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_so_len(), target);
  }

  // required uint64 clockwork_len = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_clockwork_len(), target);
  }

  // required uint64 params_len = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_params_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ModelUploadReqProto)
  return target;
}

size_t ModelUploadReqProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ModelUploadReqProto)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_so_len()) {
    // required uint64 so_len = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_so_len());
  }

  if (_internal_has_clockwork_len()) {
    // required uint64 clockwork_len = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clockwork_len());
  }

  if (_internal_has_params_len()) {
    // required uint64 params_len = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_params_len());
  }

  if (_internal_has_batchsize()) {
    // required uint32 batchsize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batchsize());
  }

  return total_size;
}
size_t ModelUploadReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ModelUploadReqProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint64 so_len = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_so_len());

    // required uint64 clockwork_len = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_clockwork_len());

    // required uint64 params_len = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_params_len());

    // required uint32 batchsize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batchsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelUploadReqProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ModelUploadReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelUploadReqProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelUploadReqProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ModelUploadReqProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ModelUploadReqProto)
    MergeFrom(*source);
  }
}

void ModelUploadReqProto::MergeFrom(const ModelUploadReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ModelUploadReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::clockwork::RequestHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      so_len_ = from.so_len_;
    }
    if (cached_has_bits & 0x00000004u) {
      clockwork_len_ = from.clockwork_len_;
    }
    if (cached_has_bits & 0x00000008u) {
      params_len_ = from.params_len_;
    }
    if (cached_has_bits & 0x00000010u) {
      batchsize_ = from.batchsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelUploadReqProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ModelUploadReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelUploadReqProto::CopyFrom(const ModelUploadReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ModelUploadReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelUploadReqProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModelUploadReqProto::InternalSwap(ModelUploadReqProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelUploadReqProto, batchsize_)
      + sizeof(ModelUploadReqProto::batchsize_)
      - PROTOBUF_FIELD_OFFSET(ModelUploadReqProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelUploadReqProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelUploadRspProto::InitAsDefaultInstance() {
  ::clockwork::_ModelUploadRspProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::ResponseHeaderProto*>(
      ::clockwork::ResponseHeaderProto::internal_default_instance());
}
class ModelUploadRspProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelUploadRspProto>()._has_bits_);
  static const ::clockwork::ResponseHeaderProto& header(const ModelUploadRspProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::clockwork::ResponseHeaderProto&
ModelUploadRspProto::_Internal::header(const ModelUploadRspProto* msg) {
  return *msg->header_;
}
ModelUploadRspProto::ModelUploadRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ModelUploadRspProto)
}
ModelUploadRspProto::ModelUploadRspProto(const ModelUploadRspProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::ResponseHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&input_size_, &from.input_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_id_) -
    reinterpret_cast<char*>(&input_size_)) + sizeof(model_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ModelUploadRspProto)
}

void ModelUploadRspProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelUploadRspProto_clockwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(model_id_));
}

ModelUploadRspProto::~ModelUploadRspProto() {
  // @@protoc_insertion_point(destructor:clockwork.ModelUploadRspProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelUploadRspProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ModelUploadRspProto::ArenaDtor(void* object) {
  ModelUploadRspProto* _this = reinterpret_cast< ModelUploadRspProto* >(object);
  (void)_this;
}
void ModelUploadRspProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelUploadRspProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelUploadRspProto& ModelUploadRspProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelUploadRspProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ModelUploadRspProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ModelUploadRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&input_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_id_) -
        reinterpret_cast<char*>(&input_size_)) + sizeof(model_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelUploadRspProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.ResponseHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 input_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_input_size(&has_bits);
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 output_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_size(&has_bits);
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelUploadRspProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ModelUploadRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.ResponseHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 model_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint64 input_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_input_size(), target);
  }

  // required uint64 output_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_output_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ModelUploadRspProto)
  return target;
}

size_t ModelUploadRspProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ModelUploadRspProto)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .clockwork.ResponseHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_input_size()) {
    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());
  }

  if (_internal_has_output_size()) {
    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());
  }

  if (_internal_has_model_id()) {
    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  return total_size;
}
size_t ModelUploadRspProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ModelUploadRspProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .clockwork.ResponseHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());

    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());

    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelUploadRspProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ModelUploadRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelUploadRspProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelUploadRspProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ModelUploadRspProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ModelUploadRspProto)
    MergeFrom(*source);
  }
}

void ModelUploadRspProto::MergeFrom(const ModelUploadRspProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ModelUploadRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::clockwork::ResponseHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      input_size_ = from.input_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_size_ = from.output_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      model_id_ = from.model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelUploadRspProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ModelUploadRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelUploadRspProto::CopyFrom(const ModelUploadRspProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ModelUploadRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelUploadRspProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModelUploadRspProto::InternalSwap(ModelUploadRspProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelUploadRspProto, model_id_)
      + sizeof(ModelUploadRspProto::model_id_)
      - PROTOBUF_FIELD_OFFSET(ModelUploadRspProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelUploadRspProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInferenceReqProto::InitAsDefaultInstance() {
  ::clockwork::_ModelInferenceReqProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::RequestHeaderProto*>(
      ::clockwork::RequestHeaderProto::internal_default_instance());
}
class ModelInferenceReqProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelInferenceReqProto>()._has_bits_);
  static const ::clockwork::RequestHeaderProto& header(const ModelInferenceReqProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slo_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::clockwork::RequestHeaderProto&
ModelInferenceReqProto::_Internal::header(const ModelInferenceReqProto* msg) {
  return *msg->header_;
}
ModelInferenceReqProto::ModelInferenceReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ModelInferenceReqProto)
}
ModelInferenceReqProto::ModelInferenceReqProto(const ModelInferenceReqProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::RequestHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&model_id_, &from.model_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slo_factor_) -
    reinterpret_cast<char*>(&model_id_)) + sizeof(slo_factor_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ModelInferenceReqProto)
}

void ModelInferenceReqProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInferenceReqProto_clockwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slo_factor_) -
      reinterpret_cast<char*>(&header_)) + sizeof(slo_factor_));
}

ModelInferenceReqProto::~ModelInferenceReqProto() {
  // @@protoc_insertion_point(destructor:clockwork.ModelInferenceReqProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInferenceReqProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ModelInferenceReqProto::ArenaDtor(void* object) {
  ModelInferenceReqProto* _this = reinterpret_cast< ModelInferenceReqProto* >(object);
  (void)_this;
}
void ModelInferenceReqProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInferenceReqProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInferenceReqProto& ModelInferenceReqProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInferenceReqProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ModelInferenceReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ModelInferenceReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&model_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slo_factor_) -
        reinterpret_cast<char*>(&model_id_)) + sizeof(slo_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInferenceReqProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.RequestHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float slo_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_slo_factor(&has_bits);
          slo_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInferenceReqProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ModelInferenceReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.RequestHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint32 batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_size(), target);
  }

  // required float slo_factor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_slo_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ModelInferenceReqProto)
  return target;
}

size_t ModelInferenceReqProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ModelInferenceReqProto)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_model_id()) {
    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  if (_internal_has_batch_size()) {
    // required uint32 batch_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  if (_internal_has_slo_factor()) {
    // required float slo_factor = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ModelInferenceReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ModelInferenceReqProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());

    // required uint32 batch_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());

    // required float slo_factor = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInferenceReqProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ModelInferenceReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInferenceReqProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInferenceReqProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ModelInferenceReqProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ModelInferenceReqProto)
    MergeFrom(*source);
  }
}

void ModelInferenceReqProto::MergeFrom(const ModelInferenceReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ModelInferenceReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::clockwork::RequestHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      slo_factor_ = from.slo_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelInferenceReqProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ModelInferenceReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInferenceReqProto::CopyFrom(const ModelInferenceReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ModelInferenceReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInferenceReqProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModelInferenceReqProto::InternalSwap(ModelInferenceReqProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelInferenceReqProto, slo_factor_)
      + sizeof(ModelInferenceReqProto::slo_factor_)
      - PROTOBUF_FIELD_OFFSET(ModelInferenceReqProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInferenceReqProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInferenceRspProto::InitAsDefaultInstance() {
  ::clockwork::_ModelInferenceRspProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::ResponseHeaderProto*>(
      ::clockwork::ResponseHeaderProto::internal_default_instance());
}
class ModelInferenceRspProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelInferenceRspProto>()._has_bits_);
  static const ::clockwork::ResponseHeaderProto& header(const ModelInferenceRspProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::clockwork::ResponseHeaderProto&
ModelInferenceRspProto::_Internal::header(const ModelInferenceRspProto* msg) {
  return *msg->header_;
}
ModelInferenceRspProto::ModelInferenceRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ModelInferenceRspProto)
}
ModelInferenceRspProto::ModelInferenceRspProto(const ModelInferenceRspProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::ResponseHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&model_id_, &from.model_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&model_id_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ModelInferenceRspProto)
}

void ModelInferenceRspProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInferenceRspProto_clockwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(batch_size_));
}

ModelInferenceRspProto::~ModelInferenceRspProto() {
  // @@protoc_insertion_point(destructor:clockwork.ModelInferenceRspProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInferenceRspProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ModelInferenceRspProto::ArenaDtor(void* object) {
  ModelInferenceRspProto* _this = reinterpret_cast< ModelInferenceRspProto* >(object);
  (void)_this;
}
void ModelInferenceRspProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInferenceRspProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInferenceRspProto& ModelInferenceRspProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInferenceRspProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ModelInferenceRspProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ModelInferenceRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&model_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_size_) -
        reinterpret_cast<char*>(&model_id_)) + sizeof(batch_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInferenceRspProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.ResponseHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInferenceRspProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ModelInferenceRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.ResponseHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint32 batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ModelInferenceRspProto)
  return target;
}

size_t ModelInferenceRspProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ModelInferenceRspProto)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .clockwork.ResponseHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_model_id()) {
    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  if (_internal_has_batch_size()) {
    // required uint32 batch_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  return total_size;
}
size_t ModelInferenceRspProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ModelInferenceRspProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .clockwork.ResponseHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());

    // required uint32 batch_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInferenceRspProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ModelInferenceRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInferenceRspProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInferenceRspProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ModelInferenceRspProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ModelInferenceRspProto)
    MergeFrom(*source);
  }
}

void ModelInferenceRspProto::MergeFrom(const ModelInferenceRspProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ModelInferenceRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::clockwork::ResponseHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelInferenceRspProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ModelInferenceRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInferenceRspProto::CopyFrom(const ModelInferenceRspProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ModelInferenceRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInferenceRspProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModelInferenceRspProto::InternalSwap(ModelInferenceRspProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelInferenceRspProto, batch_size_)
      + sizeof(ModelInferenceRspProto::batch_size_)
      - PROTOBUF_FIELD_OFFSET(ModelInferenceRspProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInferenceRspProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvictReqProto::InitAsDefaultInstance() {
  ::clockwork::_EvictReqProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::RequestHeaderProto*>(
      ::clockwork::RequestHeaderProto::internal_default_instance());
}
class EvictReqProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EvictReqProto>()._has_bits_);
  static const ::clockwork::RequestHeaderProto& header(const EvictReqProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::clockwork::RequestHeaderProto&
EvictReqProto::_Internal::header(const EvictReqProto* msg) {
  return *msg->header_;
}
EvictReqProto::EvictReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.EvictReqProto)
}
EvictReqProto::EvictReqProto(const EvictReqProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::RequestHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  model_id_ = from.model_id_;
  // @@protoc_insertion_point(copy_constructor:clockwork.EvictReqProto)
}

void EvictReqProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvictReqProto_clockwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(model_id_));
}

EvictReqProto::~EvictReqProto() {
  // @@protoc_insertion_point(destructor:clockwork.EvictReqProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvictReqProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void EvictReqProto::ArenaDtor(void* object) {
  EvictReqProto* _this = reinterpret_cast< EvictReqProto* >(object);
  (void)_this;
}
void EvictReqProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvictReqProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvictReqProto& EvictReqProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvictReqProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void EvictReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.EvictReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  model_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvictReqProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.RequestHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvictReqProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.EvictReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.RequestHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.EvictReqProto)
  return target;
}

size_t EvictReqProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.EvictReqProto)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_model_id()) {
    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  return total_size;
}
size_t EvictReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.EvictReqProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvictReqProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.EvictReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EvictReqProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvictReqProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.EvictReqProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.EvictReqProto)
    MergeFrom(*source);
  }
}

void EvictReqProto::MergeFrom(const EvictReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.EvictReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::clockwork::RequestHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvictReqProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.EvictReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvictReqProto::CopyFrom(const EvictReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.EvictReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvictReqProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EvictReqProto::InternalSwap(EvictReqProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvictReqProto, model_id_)
      + sizeof(EvictReqProto::model_id_)
      - PROTOBUF_FIELD_OFFSET(EvictReqProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvictReqProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvictRspProto::InitAsDefaultInstance() {
  ::clockwork::_EvictRspProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::ResponseHeaderProto*>(
      ::clockwork::ResponseHeaderProto::internal_default_instance());
}
class EvictRspProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EvictRspProto>()._has_bits_);
  static const ::clockwork::ResponseHeaderProto& header(const EvictRspProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::clockwork::ResponseHeaderProto&
EvictRspProto::_Internal::header(const EvictRspProto* msg) {
  return *msg->header_;
}
EvictRspProto::EvictRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.EvictRspProto)
}
EvictRspProto::EvictRspProto(const EvictRspProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::ResponseHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clockwork.EvictRspProto)
}

void EvictRspProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvictRspProto_clockwork_2eproto.base);
  header_ = nullptr;
}

EvictRspProto::~EvictRspProto() {
  // @@protoc_insertion_point(destructor:clockwork.EvictRspProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvictRspProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void EvictRspProto::ArenaDtor(void* object) {
  EvictRspProto* _this = reinterpret_cast< EvictRspProto* >(object);
  (void)_this;
}
void EvictRspProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvictRspProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvictRspProto& EvictRspProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvictRspProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void EvictRspProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.EvictRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvictRspProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.ResponseHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvictRspProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.EvictRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.ResponseHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.EvictRspProto)
  return target;
}

size_t EvictRspProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.EvictRspProto)
  size_t total_size = 0;

  // required .clockwork.ResponseHeaderProto header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvictRspProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.EvictRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EvictRspProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvictRspProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.EvictRspProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.EvictRspProto)
    MergeFrom(*source);
  }
}

void EvictRspProto::MergeFrom(const EvictRspProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.EvictRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::clockwork::ResponseHeaderProto::MergeFrom(from._internal_header());
  }
}

void EvictRspProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.EvictRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvictRspProto::CopyFrom(const EvictRspProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.EvictRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvictRspProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EvictRspProto::InternalSwap(EvictRspProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvictRspProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadModelFromDiskReqProto::InitAsDefaultInstance() {
  ::clockwork::_LoadModelFromDiskReqProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::RequestHeaderProto*>(
      ::clockwork::RequestHeaderProto::internal_default_instance());
}
class LoadModelFromDiskReqProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadModelFromDiskReqProto>()._has_bits_);
  static const ::clockwork::RequestHeaderProto& header(const LoadModelFromDiskReqProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remote_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_of_copies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::clockwork::RequestHeaderProto&
LoadModelFromDiskReqProto::_Internal::header(const LoadModelFromDiskReqProto* msg) {
  return *msg->header_;
}
LoadModelFromDiskReqProto::LoadModelFromDiskReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LoadModelFromDiskReqProto)
}
LoadModelFromDiskReqProto::LoadModelFromDiskReqProto(const LoadModelFromDiskReqProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_remote_path()) {
    remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_path(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::clockwork::RequestHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  no_of_copies_ = from.no_of_copies_;
  // @@protoc_insertion_point(copy_constructor:clockwork.LoadModelFromDiskReqProto)
}

void LoadModelFromDiskReqProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadModelFromDiskReqProto_clockwork_2eproto.base);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_of_copies_) -
      reinterpret_cast<char*>(&header_)) + sizeof(no_of_copies_));
}

LoadModelFromDiskReqProto::~LoadModelFromDiskReqProto() {
  // @@protoc_insertion_point(destructor:clockwork.LoadModelFromDiskReqProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadModelFromDiskReqProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LoadModelFromDiskReqProto::ArenaDtor(void* object) {
  LoadModelFromDiskReqProto* _this = reinterpret_cast< LoadModelFromDiskReqProto* >(object);
  (void)_this;
}
void LoadModelFromDiskReqProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelFromDiskReqProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadModelFromDiskReqProto& LoadModelFromDiskReqProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadModelFromDiskReqProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LoadModelFromDiskReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LoadModelFromDiskReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      remote_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  no_of_copies_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelFromDiskReqProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.RequestHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string remote_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clockwork.LoadModelFromDiskReqProto.remote_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 no_of_copies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_no_of_copies(&has_bits);
          no_of_copies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadModelFromDiskReqProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LoadModelFromDiskReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.RequestHeaderProto header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required string remote_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_path().data(), static_cast<int>(this->_internal_remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clockwork.LoadModelFromDiskReqProto.remote_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_path(), target);
  }

  // required int32 no_of_copies = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_no_of_copies(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LoadModelFromDiskReqProto)
  return target;
}

size_t LoadModelFromDiskReqProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.LoadModelFromDiskReqProto)
  size_t total_size = 0;

  if (_internal_has_remote_path()) {
    // required string remote_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_path());
  }

  if (_internal_has_header()) {
    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_no_of_copies()) {
    // required int32 no_of_copies = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_of_copies());
  }

  return total_size;
}
size_t LoadModelFromDiskReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LoadModelFromDiskReqProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string remote_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_path());

    // required .clockwork.RequestHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required int32 no_of_copies = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_of_copies());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadModelFromDiskReqProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LoadModelFromDiskReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadModelFromDiskReqProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadModelFromDiskReqProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LoadModelFromDiskReqProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LoadModelFromDiskReqProto)
    MergeFrom(*source);
  }
}

void LoadModelFromDiskReqProto::MergeFrom(const LoadModelFromDiskReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LoadModelFromDiskReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_remote_path(from._internal_remote_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::clockwork::RequestHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      no_of_copies_ = from.no_of_copies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadModelFromDiskReqProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LoadModelFromDiskReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadModelFromDiskReqProto::CopyFrom(const LoadModelFromDiskReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LoadModelFromDiskReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelFromDiskReqProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoadModelFromDiskReqProto::InternalSwap(LoadModelFromDiskReqProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadModelFromDiskReqProto, no_of_copies_)
      + sizeof(LoadModelFromDiskReqProto::no_of_copies_)
      - PROTOBUF_FIELD_OFFSET(LoadModelFromDiskReqProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelFromDiskReqProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadModelFromDiskRspProto::InitAsDefaultInstance() {
  ::clockwork::_LoadModelFromDiskRspProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::ResponseHeaderProto*>(
      ::clockwork::ResponseHeaderProto::internal_default_instance());
}
class LoadModelFromDiskRspProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadModelFromDiskRspProto>()._has_bits_);
  static const ::clockwork::ResponseHeaderProto& header(const LoadModelFromDiskRspProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_copies_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::clockwork::ResponseHeaderProto&
LoadModelFromDiskRspProto::_Internal::header(const LoadModelFromDiskRspProto* msg) {
  return *msg->header_;
}
LoadModelFromDiskRspProto::LoadModelFromDiskRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LoadModelFromDiskRspProto)
}
LoadModelFromDiskRspProto::LoadModelFromDiskRspProto(const LoadModelFromDiskRspProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::ResponseHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&input_size_, &from.input_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_size_) -
    reinterpret_cast<char*>(&input_size_)) + sizeof(output_size_));
  // @@protoc_insertion_point(copy_constructor:clockwork.LoadModelFromDiskRspProto)
}

void LoadModelFromDiskRspProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadModelFromDiskRspProto_clockwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(output_size_));
}

LoadModelFromDiskRspProto::~LoadModelFromDiskRspProto() {
  // @@protoc_insertion_point(destructor:clockwork.LoadModelFromDiskRspProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadModelFromDiskRspProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LoadModelFromDiskRspProto::ArenaDtor(void* object) {
  LoadModelFromDiskRspProto* _this = reinterpret_cast< LoadModelFromDiskRspProto* >(object);
  (void)_this;
}
void LoadModelFromDiskRspProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelFromDiskRspProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadModelFromDiskRspProto& LoadModelFromDiskRspProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadModelFromDiskRspProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LoadModelFromDiskRspProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LoadModelFromDiskRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&input_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_size_) -
        reinterpret_cast<char*>(&input_size_)) + sizeof(output_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelFromDiskRspProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.ResponseHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 input_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_input_size(&has_bits);
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 output_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_size(&has_bits);
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 copies_created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_copies_created(&has_bits);
          copies_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadModelFromDiskRspProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LoadModelFromDiskRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.ResponseHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required uint32 model_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint64 input_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_input_size(), target);
  }

  // required uint64 output_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_output_size(), target);
  }

  // required int32 copies_created = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_copies_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LoadModelFromDiskRspProto)
  return target;
}

size_t LoadModelFromDiskRspProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.LoadModelFromDiskRspProto)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .clockwork.ResponseHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_input_size()) {
    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());
  }

  if (_internal_has_model_id()) {
    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  if (_internal_has_copies_created()) {
    // required int32 copies_created = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copies_created());
  }

  if (_internal_has_output_size()) {
    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());
  }

  return total_size;
}
size_t LoadModelFromDiskRspProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LoadModelFromDiskRspProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .clockwork.ResponseHeaderProto header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());

    // required uint32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());

    // required int32 copies_created = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copies_created());

    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadModelFromDiskRspProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LoadModelFromDiskRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadModelFromDiskRspProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadModelFromDiskRspProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LoadModelFromDiskRspProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LoadModelFromDiskRspProto)
    MergeFrom(*source);
  }
}

void LoadModelFromDiskRspProto::MergeFrom(const LoadModelFromDiskRspProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LoadModelFromDiskRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::clockwork::ResponseHeaderProto::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      input_size_ = from.input_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      copies_created_ = from.copies_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      output_size_ = from.output_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadModelFromDiskRspProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LoadModelFromDiskRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadModelFromDiskRspProto::CopyFrom(const LoadModelFromDiskRspProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LoadModelFromDiskRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelFromDiskRspProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoadModelFromDiskRspProto::InternalSwap(LoadModelFromDiskRspProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadModelFromDiskRspProto, output_size_)
      + sizeof(LoadModelFromDiskRspProto::output_size_)
      - PROTOBUF_FIELD_OFFSET(LoadModelFromDiskRspProto, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelFromDiskRspProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LSReqProto::InitAsDefaultInstance() {
  ::clockwork::_LSReqProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::RequestHeaderProto*>(
      ::clockwork::RequestHeaderProto::internal_default_instance());
}
class LSReqProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LSReqProto>()._has_bits_);
  static const ::clockwork::RequestHeaderProto& header(const LSReqProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::clockwork::RequestHeaderProto&
LSReqProto::_Internal::header(const LSReqProto* msg) {
  return *msg->header_;
}
LSReqProto::LSReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LSReqProto)
}
LSReqProto::LSReqProto(const LSReqProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::RequestHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clockwork.LSReqProto)
}

void LSReqProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LSReqProto_clockwork_2eproto.base);
  header_ = nullptr;
}

LSReqProto::~LSReqProto() {
  // @@protoc_insertion_point(destructor:clockwork.LSReqProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LSReqProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LSReqProto::ArenaDtor(void* object) {
  LSReqProto* _this = reinterpret_cast< LSReqProto* >(object);
  (void)_this;
}
void LSReqProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LSReqProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LSReqProto& LSReqProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LSReqProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LSReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LSReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LSReqProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.RequestHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LSReqProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LSReqProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.RequestHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LSReqProto)
  return target;
}

size_t LSReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LSReqProto)
  size_t total_size = 0;

  // required .clockwork.RequestHeaderProto header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LSReqProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LSReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LSReqProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LSReqProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LSReqProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LSReqProto)
    MergeFrom(*source);
  }
}

void LSReqProto::MergeFrom(const LSReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LSReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::clockwork::RequestHeaderProto::MergeFrom(from._internal_header());
  }
}

void LSReqProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LSReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSReqProto::CopyFrom(const LSReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LSReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSReqProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LSReqProto::InternalSwap(LSReqProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LSReqProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientModelInfoProto::InitAsDefaultInstance() {
}
class ClientModelInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientModelInfoProto>()._has_bits_);
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ClientModelInfoProto::ClientModelInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ClientModelInfoProto)
}
ClientModelInfoProto::ClientModelInfoProto(const ClientModelInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_remote_path()) {
    remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remote_path(),
      GetArena());
  }
  ::memcpy(&input_size_, &from.input_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_id_) -
    reinterpret_cast<char*>(&input_size_)) + sizeof(model_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ClientModelInfoProto)
}

void ClientModelInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientModelInfoProto_clockwork_2eproto.base);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&input_size_)) + sizeof(model_id_));
}

ClientModelInfoProto::~ClientModelInfoProto() {
  // @@protoc_insertion_point(destructor:clockwork.ClientModelInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientModelInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientModelInfoProto::ArenaDtor(void* object) {
  ClientModelInfoProto* _this = reinterpret_cast< ClientModelInfoProto* >(object);
  (void)_this;
}
void ClientModelInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientModelInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientModelInfoProto& ClientModelInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientModelInfoProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ClientModelInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ClientModelInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    remote_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&input_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&model_id_) -
        reinterpret_cast<char*>(&input_size_)) + sizeof(model_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientModelInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string remote_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clockwork.ClientModelInfoProto.remote_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 input_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_input_size(&has_bits);
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 output_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_size(&has_bits);
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientModelInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ClientModelInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 model_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_model_id(), target);
  }

  // required string remote_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_path().data(), static_cast<int>(this->_internal_remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clockwork.ClientModelInfoProto.remote_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_path(), target);
  }

  // required uint64 input_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_input_size(), target);
  }

  // required uint64 output_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_output_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ClientModelInfoProto)
  return target;
}

size_t ClientModelInfoProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ClientModelInfoProto)
  size_t total_size = 0;

  if (_internal_has_remote_path()) {
    // required string remote_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_path());
  }

  if (_internal_has_input_size()) {
    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());
  }

  if (_internal_has_output_size()) {
    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());
  }

  if (_internal_has_model_id()) {
    // required uint32 model_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());
  }

  return total_size;
}
size_t ClientModelInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ClientModelInfoProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string remote_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_path());

    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());

    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());

    // required uint32 model_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_model_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientModelInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ClientModelInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientModelInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientModelInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ClientModelInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ClientModelInfoProto)
    MergeFrom(*source);
  }
}

void ClientModelInfoProto::MergeFrom(const ClientModelInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ClientModelInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_remote_path(from._internal_remote_path());
    }
    if (cached_has_bits & 0x00000002u) {
      input_size_ = from.input_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_size_ = from.output_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      model_id_ = from.model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientModelInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ClientModelInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientModelInfoProto::CopyFrom(const ClientModelInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ClientModelInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientModelInfoProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientModelInfoProto::InternalSwap(ClientModelInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientModelInfoProto, model_id_)
      + sizeof(ClientModelInfoProto::model_id_)
      - PROTOBUF_FIELD_OFFSET(ClientModelInfoProto, input_size_)>(
          reinterpret_cast<char*>(&input_size_),
          reinterpret_cast<char*>(&other->input_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientModelInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LSRspProto::InitAsDefaultInstance() {
  ::clockwork::_LSRspProto_default_instance_._instance.get_mutable()->header_ = const_cast< ::clockwork::ResponseHeaderProto*>(
      ::clockwork::ResponseHeaderProto::internal_default_instance());
}
class LSRspProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LSRspProto>()._has_bits_);
  static const ::clockwork::ResponseHeaderProto& header(const LSRspProto* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::clockwork::ResponseHeaderProto&
LSRspProto::_Internal::header(const LSRspProto* msg) {
  return *msg->header_;
}
LSRspProto::LSRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LSRspProto)
}
LSRspProto::LSRspProto(const LSRspProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::clockwork::ResponseHeaderProto(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clockwork.LSRspProto)
}

void LSRspProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LSRspProto_clockwork_2eproto.base);
  header_ = nullptr;
}

LSRspProto::~LSRspProto() {
  // @@protoc_insertion_point(destructor:clockwork.LSRspProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LSRspProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void LSRspProto::ArenaDtor(void* object) {
  LSRspProto* _this = reinterpret_cast< LSRspProto* >(object);
  (void)_this;
}
void LSRspProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LSRspProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LSRspProto& LSRspProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LSRspProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LSRspProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LSRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LSRspProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .clockwork.ResponseHeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clockwork.ClientModelInfoProto models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LSRspProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LSRspProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .clockwork.ResponseHeaderProto header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .clockwork.ClientModelInfoProto models = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LSRspProto)
  return target;
}

size_t LSRspProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LSRspProto)
  size_t total_size = 0;

  // required .clockwork.ResponseHeaderProto header = 1;
  if (_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clockwork.ClientModelInfoProto models = 2;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LSRspProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LSRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LSRspProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LSRspProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LSRspProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LSRspProto)
    MergeFrom(*source);
  }
}

void LSRspProto::MergeFrom(const LSRspProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LSRspProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::clockwork::ResponseHeaderProto::MergeFrom(from._internal_header());
  }
}

void LSRspProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LSRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSRspProto::CopyFrom(const LSRspProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LSRspProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSRspProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(models_)) return false;
  return true;
}

void LSRspProto::InternalSwap(LSRspProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  models_.InternalSwap(&other->models_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LSRspProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorResultProto::InitAsDefaultInstance() {
}
class ErrorResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

ErrorResultProto::ErrorResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ErrorResultProto)
}
ErrorResultProto::ErrorResultProto(const ErrorResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ErrorResultProto)
}

void ErrorResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorResultProto_clockwork_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&action_id_)) + sizeof(status_));
}

ErrorResultProto::~ErrorResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.ErrorResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorResultProto::ArenaDtor(void* object) {
  ErrorResultProto* _this = reinterpret_cast< ErrorResultProto* >(object);
  (void)_this;
}
void ErrorResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorResultProto& ErrorResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ErrorResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ErrorResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 action_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_action_type(&has_bits);
          action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clockwork.ErrorResultProto.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 action_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 result_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ErrorResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required int32 action_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_action_type(), target);
  }

  // required int32 status = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // required string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clockwork.ErrorResultProto.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // required fixed64 action_received = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_action_received(), target);
  }

  // required fixed64 result_sent = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ErrorResultProto)
  return target;
}

size_t ErrorResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ErrorResultProto)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_action_type()) {
    // required int32 action_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_type());
  }

  if (_internal_has_action_received()) {
    // required fixed64 action_received = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_result_sent()) {
    // required fixed64 result_sent = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_status()) {
    // required int32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t ErrorResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ErrorResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string message = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required int32 action_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_type());

    // required fixed64 action_received = 5;
    total_size += 1 + 8;

    // required fixed64 result_sent = 6;
    total_size += 1 + 8;

    // required int32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ErrorResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ErrorResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ErrorResultProto)
    MergeFrom(*source);
  }
}

void ErrorResultProto::MergeFrom(const ErrorResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ErrorResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_type_ = from.action_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_received_ = from.action_received_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_sent_ = from.result_sent_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ErrorResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ErrorResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorResultProto::CopyFrom(const ErrorResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ErrorResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ErrorResultProto::InternalSwap(ErrorResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorResultProto, status_)
      + sizeof(ErrorResultProto::status_)
      - PROTOBUF_FIELD_OFFSET(ErrorResultProto, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimingProto::InitAsDefaultInstance() {
}
class TimingProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TimingProto>()._has_bits_);
  static void set_has_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TimingProto::TimingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.TimingProto)
}
TimingProto::TimingProto(const TimingProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:clockwork.TimingProto)
}

void TimingProto::SharedCtor() {
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(duration_));
}

TimingProto::~TimingProto() {
  // @@protoc_insertion_point(destructor:clockwork.TimingProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimingProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimingProto::ArenaDtor(void* object) {
  TimingProto* _this = reinterpret_cast< TimingProto* >(object);
  (void)_this;
}
void TimingProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimingProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimingProto& TimingProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimingProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void TimingProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.TimingProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&begin_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimingProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_begin(&has_bits);
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimingProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.TimingProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_begin(), target);
  }

  // required fixed64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_end(), target);
  }

  // required fixed64 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.TimingProto)
  return target;
}

size_t TimingProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.TimingProto)
  size_t total_size = 0;

  if (_internal_has_begin()) {
    // required fixed64 begin = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_end()) {
    // required fixed64 end = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_duration()) {
    // required fixed64 duration = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TimingProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.TimingProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 begin = 1;
    total_size += 1 + 8;

    // required fixed64 end = 2;
    total_size += 1 + 8;

    // required fixed64 duration = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimingProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.TimingProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TimingProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimingProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.TimingProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.TimingProto)
    MergeFrom(*source);
  }
}

void TimingProto::MergeFrom(const TimingProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.TimingProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      begin_ = from.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimingProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.TimingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingProto::CopyFrom(const TimingProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.TimingProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TimingProto::InternalSwap(TimingProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimingProto, duration_)
      + sizeof(TimingProto::duration_)
      - PROTOBUF_FIELD_OFFSET(TimingProto, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimingProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadModelFromDiskActionProto::InitAsDefaultInstance() {
}
class LoadModelFromDiskActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadModelFromDiskActionProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_earliest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_no_of_copies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_exec_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

LoadModelFromDiskActionProto::LoadModelFromDiskActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LoadModelFromDiskActionProto)
}
LoadModelFromDiskActionProto::LoadModelFromDiskActionProto(const LoadModelFromDiskActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model_path()) {
    model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_path(),
      GetArena());
  }
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_exec_duration_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(max_exec_duration_));
  // @@protoc_insertion_point(copy_constructor:clockwork.LoadModelFromDiskActionProto)
}

void LoadModelFromDiskActionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadModelFromDiskActionProto_clockwork_2eproto.base);
  model_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_exec_duration_) -
      reinterpret_cast<char*>(&action_id_)) + sizeof(max_exec_duration_));
}

LoadModelFromDiskActionProto::~LoadModelFromDiskActionProto() {
  // @@protoc_insertion_point(destructor:clockwork.LoadModelFromDiskActionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadModelFromDiskActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadModelFromDiskActionProto::ArenaDtor(void* object) {
  LoadModelFromDiskActionProto* _this = reinterpret_cast< LoadModelFromDiskActionProto* >(object);
  (void)_this;
}
void LoadModelFromDiskActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelFromDiskActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadModelFromDiskActionProto& LoadModelFromDiskActionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadModelFromDiskActionProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LoadModelFromDiskActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LoadModelFromDiskActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_exec_duration_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(max_exec_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelFromDiskActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string model_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clockwork.LoadModelFromDiskActionProto.model_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 earliest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_earliest(&has_bits);
          earliest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 latest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_latest(&has_bits);
          latest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required int32 no_of_copies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_no_of_copies(&has_bits);
          no_of_copies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 max_batch_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_batch_size(&has_bits);
          max_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 max_exec_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_exec_duration(&has_bits);
          max_exec_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadModelFromDiskActionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LoadModelFromDiskActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required string model_path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_path().data(), static_cast<int>(this->_internal_model_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clockwork.LoadModelFromDiskActionProto.model_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_path(), target);
  }

  // required fixed64 earliest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_earliest(), target);
  }

  // required fixed64 latest = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_latest(), target);
  }

  // required int32 no_of_copies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_no_of_copies(), target);
  }

  // required uint32 max_batch_size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_batch_size(), target);
  }

  // required uint64 max_exec_duration = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_max_exec_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LoadModelFromDiskActionProto)
  return target;
}

size_t LoadModelFromDiskActionProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.LoadModelFromDiskActionProto)
  size_t total_size = 0;

  if (_internal_has_model_path()) {
    // required string model_path = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_path());
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_model_id()) {
    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  if (_internal_has_earliest()) {
    // required fixed64 earliest = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_latest()) {
    // required fixed64 latest = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_no_of_copies()) {
    // required int32 no_of_copies = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_of_copies());
  }

  if (_internal_has_max_batch_size()) {
    // required uint32 max_batch_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_batch_size());
  }

  if (_internal_has_max_exec_duration()) {
    // required uint64 max_exec_duration = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_exec_duration());
  }

  return total_size;
}
size_t LoadModelFromDiskActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LoadModelFromDiskActionProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string model_path = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_path());

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());

    // required fixed64 earliest = 4;
    total_size += 1 + 8;

    // required fixed64 latest = 5;
    total_size += 1 + 8;

    // required int32 no_of_copies = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_of_copies());

    // required uint32 max_batch_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_batch_size());

    // required uint64 max_exec_duration = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_exec_duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadModelFromDiskActionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LoadModelFromDiskActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadModelFromDiskActionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadModelFromDiskActionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LoadModelFromDiskActionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LoadModelFromDiskActionProto)
    MergeFrom(*source);
  }
}

void LoadModelFromDiskActionProto::MergeFrom(const LoadModelFromDiskActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LoadModelFromDiskActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_model_path(from._internal_model_path());
    }
    if (cached_has_bits & 0x00000002u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      earliest_ = from.earliest_;
    }
    if (cached_has_bits & 0x00000010u) {
      latest_ = from.latest_;
    }
    if (cached_has_bits & 0x00000020u) {
      no_of_copies_ = from.no_of_copies_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_batch_size_ = from.max_batch_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_exec_duration_ = from.max_exec_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadModelFromDiskActionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LoadModelFromDiskActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadModelFromDiskActionProto::CopyFrom(const LoadModelFromDiskActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LoadModelFromDiskActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelFromDiskActionProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoadModelFromDiskActionProto::InternalSwap(LoadModelFromDiskActionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_path_.Swap(&other->model_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadModelFromDiskActionProto, max_exec_duration_)
      + sizeof(LoadModelFromDiskActionProto::max_exec_duration_)
      - PROTOBUF_FIELD_OFFSET(LoadModelFromDiskActionProto, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelFromDiskActionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadModelFromDiskResultProto::InitAsDefaultInstance() {
  ::clockwork::_LoadModelFromDiskResultProto_default_instance_._instance.get_mutable()->timing_ = const_cast< ::clockwork::TimingProto*>(
      ::clockwork::TimingProto::internal_default_instance());
}
class LoadModelFromDiskResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadModelFromDiskResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::clockwork::TimingProto& timing(const LoadModelFromDiskResultProto* msg);
  static void set_has_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weights_size_in_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_weights_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weights_load_time_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_copies_created(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

const ::clockwork::TimingProto&
LoadModelFromDiskResultProto::_Internal::timing(const LoadModelFromDiskResultProto* msg) {
  return *msg->timing_;
}
LoadModelFromDiskResultProto::LoadModelFromDiskResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_batch_sizes_(arena),
  batch_size_exec_times_nanos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LoadModelFromDiskResultProto)
}
LoadModelFromDiskResultProto::LoadModelFromDiskResultProto(const LoadModelFromDiskResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supported_batch_sizes_(from.supported_batch_sizes_),
      batch_size_exec_times_nanos_(from.batch_size_exec_times_nanos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timing()) {
    timing_ = new ::clockwork::TimingProto(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  ::memcpy(&input_size_, &from.input_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&copies_created_) -
    reinterpret_cast<char*>(&input_size_)) + sizeof(copies_created_));
  // @@protoc_insertion_point(copy_constructor:clockwork.LoadModelFromDiskResultProto)
}

void LoadModelFromDiskResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadModelFromDiskResultProto_clockwork_2eproto.base);
  ::memset(&timing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copies_created_) -
      reinterpret_cast<char*>(&timing_)) + sizeof(copies_created_));
}

LoadModelFromDiskResultProto::~LoadModelFromDiskResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.LoadModelFromDiskResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadModelFromDiskResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timing_;
}

void LoadModelFromDiskResultProto::ArenaDtor(void* object) {
  LoadModelFromDiskResultProto* _this = reinterpret_cast< LoadModelFromDiskResultProto* >(object);
  (void)_this;
}
void LoadModelFromDiskResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadModelFromDiskResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadModelFromDiskResultProto& LoadModelFromDiskResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadModelFromDiskResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LoadModelFromDiskResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LoadModelFromDiskResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_batch_sizes_.Clear();
  batch_size_exec_times_nanos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timing_ != nullptr);
    timing_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&input_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_received_) -
        reinterpret_cast<char*>(&input_size_)) + sizeof(action_received_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&result_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copies_created_) -
        reinterpret_cast<char*>(&result_sent_)) + sizeof(copies_created_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadModelFromDiskResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.TimingProto timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 input_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_input_size(&has_bits);
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 output_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_size(&has_bits);
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 supported_batch_sizes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_supported_batch_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 weights_size_in_cache = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_weights_size_in_cache(&has_bits);
          weights_size_in_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_weights_pages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_weights_pages(&has_bits);
          num_weights_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 weights_load_time_nanos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_weights_load_time_nanos(&has_bits);
          weights_load_time_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 batch_size_exec_times_nanos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_batch_size_exec_times_nanos(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 copies_created = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_copies_created(&has_bits);
          copies_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 action_received = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 result_sent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadModelFromDiskResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LoadModelFromDiskResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required .clockwork.TimingProto timing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timing(this), target, stream);
  }

  // required uint64 input_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_input_size(), target);
  }

  // required uint64 output_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_output_size(), target);
  }

  // repeated uint32 supported_batch_sizes = 5;
  for (int i = 0, n = this->_internal_supported_batch_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_supported_batch_sizes(i), target);
  }

  // required uint64 weights_size_in_cache = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_weights_size_in_cache(), target);
  }

  // required uint32 num_weights_pages = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_weights_pages(), target);
  }

  // required uint64 weights_load_time_nanos = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_weights_load_time_nanos(), target);
  }

  // repeated uint64 batch_size_exec_times_nanos = 9;
  for (int i = 0, n = this->_internal_batch_size_exec_times_nanos_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_batch_size_exec_times_nanos(i), target);
  }

  // required int32 copies_created = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_copies_created(), target);
  }

  // required fixed64 action_received = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_action_received(), target);
  }

  // required fixed64 result_sent = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LoadModelFromDiskResultProto)
  return target;
}

size_t LoadModelFromDiskResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.LoadModelFromDiskResultProto)
  size_t total_size = 0;

  if (_internal_has_timing()) {
    // required .clockwork.TimingProto timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  if (_internal_has_input_size()) {
    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());
  }

  if (_internal_has_output_size()) {
    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_num_weights_pages()) {
    // required uint32 num_weights_pages = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_weights_pages());
  }

  if (_internal_has_weights_size_in_cache()) {
    // required uint64 weights_size_in_cache = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_size_in_cache());
  }

  if (_internal_has_weights_load_time_nanos()) {
    // required uint64 weights_load_time_nanos = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_load_time_nanos());
  }

  if (_internal_has_action_received()) {
    // required fixed64 action_received = 11;
    total_size += 1 + 8;
  }

  if (_internal_has_result_sent()) {
    // required fixed64 result_sent = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_copies_created()) {
    // required int32 copies_created = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copies_created());
  }

  return total_size;
}
size_t LoadModelFromDiskResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LoadModelFromDiskResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required .clockwork.TimingProto timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);

    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());

    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required uint32 num_weights_pages = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_weights_pages());

    // required uint64 weights_size_in_cache = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_size_in_cache());

    // required uint64 weights_load_time_nanos = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_load_time_nanos());

    // required fixed64 action_received = 11;
    total_size += 1 + 8;

    // required fixed64 result_sent = 12;
    total_size += 1 + 8;

    // required int32 copies_created = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copies_created());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 supported_batch_sizes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->supported_batch_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_supported_batch_sizes_size());
    total_size += data_size;
  }

  // repeated uint64 batch_size_exec_times_nanos = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->batch_size_exec_times_nanos_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_batch_size_exec_times_nanos_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadModelFromDiskResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LoadModelFromDiskResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadModelFromDiskResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadModelFromDiskResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LoadModelFromDiskResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LoadModelFromDiskResultProto)
    MergeFrom(*source);
  }
}

void LoadModelFromDiskResultProto::MergeFrom(const LoadModelFromDiskResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LoadModelFromDiskResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_batch_sizes_.MergeFrom(from.supported_batch_sizes_);
  batch_size_exec_times_nanos_.MergeFrom(from.batch_size_exec_times_nanos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timing()->::clockwork::TimingProto::MergeFrom(from._internal_timing());
    }
    if (cached_has_bits & 0x00000002u) {
      input_size_ = from.input_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_size_ = from.output_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_weights_pages_ = from.num_weights_pages_;
    }
    if (cached_has_bits & 0x00000020u) {
      weights_size_in_cache_ = from.weights_size_in_cache_;
    }
    if (cached_has_bits & 0x00000040u) {
      weights_load_time_nanos_ = from.weights_load_time_nanos_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_received_ = from.action_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      result_sent_ = from.result_sent_;
    }
    if (cached_has_bits & 0x00000200u) {
      copies_created_ = from.copies_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadModelFromDiskResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LoadModelFromDiskResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadModelFromDiskResultProto::CopyFrom(const LoadModelFromDiskResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LoadModelFromDiskResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadModelFromDiskResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_timing()) {
    if (!timing_->IsInitialized()) return false;
  }
  return true;
}

void LoadModelFromDiskResultProto::InternalSwap(LoadModelFromDiskResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_batch_sizes_.InternalSwap(&other->supported_batch_sizes_);
  batch_size_exec_times_nanos_.InternalSwap(&other->batch_size_exec_times_nanos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadModelFromDiskResultProto, copies_created_)
      + sizeof(LoadModelFromDiskResultProto::copies_created_)
      - PROTOBUF_FIELD_OFFSET(LoadModelFromDiskResultProto, timing_)>(
          reinterpret_cast<char*>(&timing_),
          reinterpret_cast<char*>(&other->timing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadModelFromDiskResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadWeightsActionProto::InitAsDefaultInstance() {
}
class LoadWeightsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadWeightsActionProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_earliest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expected_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

LoadWeightsActionProto::LoadWeightsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LoadWeightsActionProto)
}
LoadWeightsActionProto::LoadWeightsActionProto(const LoadWeightsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpu_id_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(gpu_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.LoadWeightsActionProto)
}

void LoadWeightsActionProto::SharedCtor() {
  ::memset(&action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&action_id_)) + sizeof(gpu_id_));
}

LoadWeightsActionProto::~LoadWeightsActionProto() {
  // @@protoc_insertion_point(destructor:clockwork.LoadWeightsActionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadWeightsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadWeightsActionProto::ArenaDtor(void* object) {
  LoadWeightsActionProto* _this = reinterpret_cast< LoadWeightsActionProto* >(object);
  (void)_this;
}
void LoadWeightsActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadWeightsActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadWeightsActionProto& LoadWeightsActionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadWeightsActionProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LoadWeightsActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LoadWeightsActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpu_id_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(gpu_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadWeightsActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gpu_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 earliest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_earliest(&has_bits);
          earliest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 latest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_latest(&has_bits);
          latest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required uint64 expected_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_expected_duration(&has_bits);
          expected_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadWeightsActionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LoadWeightsActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint32 gpu_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gpu_id(), target);
  }

  // required fixed64 earliest = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_earliest(), target);
  }

  // required fixed64 latest = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_latest(), target);
  }

  // required uint64 expected_duration = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_expected_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LoadWeightsActionProto)
  return target;
}

size_t LoadWeightsActionProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.LoadWeightsActionProto)
  size_t total_size = 0;

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_model_id()) {
    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  if (_internal_has_earliest()) {
    // required fixed64 earliest = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_latest()) {
    // required fixed64 latest = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_expected_duration()) {
    // required uint64 expected_duration = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expected_duration());
  }

  if (_internal_has_gpu_id()) {
    // required uint32 gpu_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());
  }

  return total_size;
}
size_t LoadWeightsActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LoadWeightsActionProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());

    // required fixed64 earliest = 4;
    total_size += 1 + 8;

    // required fixed64 latest = 5;
    total_size += 1 + 8;

    // required uint64 expected_duration = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expected_duration());

    // required uint32 gpu_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadWeightsActionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LoadWeightsActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadWeightsActionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadWeightsActionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LoadWeightsActionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LoadWeightsActionProto)
    MergeFrom(*source);
  }
}

void LoadWeightsActionProto::MergeFrom(const LoadWeightsActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LoadWeightsActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      earliest_ = from.earliest_;
    }
    if (cached_has_bits & 0x00000008u) {
      latest_ = from.latest_;
    }
    if (cached_has_bits & 0x00000010u) {
      expected_duration_ = from.expected_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpu_id_ = from.gpu_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadWeightsActionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LoadWeightsActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadWeightsActionProto::CopyFrom(const LoadWeightsActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LoadWeightsActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadWeightsActionProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LoadWeightsActionProto::InternalSwap(LoadWeightsActionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadWeightsActionProto, gpu_id_)
      + sizeof(LoadWeightsActionProto::gpu_id_)
      - PROTOBUF_FIELD_OFFSET(LoadWeightsActionProto, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadWeightsActionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadWeightsResultProto::InitAsDefaultInstance() {
  ::clockwork::_LoadWeightsResultProto_default_instance_._instance.get_mutable()->timing_ = const_cast< ::clockwork::TimingProto*>(
      ::clockwork::TimingProto::internal_default_instance());
}
class LoadWeightsResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LoadWeightsResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::clockwork::TimingProto& timing(const LoadWeightsResultProto* msg);
  static void set_has_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::clockwork::TimingProto&
LoadWeightsResultProto::_Internal::timing(const LoadWeightsResultProto* msg) {
  return *msg->timing_;
}
LoadWeightsResultProto::LoadWeightsResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.LoadWeightsResultProto)
}
LoadWeightsResultProto::LoadWeightsResultProto(const LoadWeightsResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timing()) {
    timing_ = new ::clockwork::TimingProto(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  ::memcpy(&action_received_, &from.action_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_id_) -
    reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.LoadWeightsResultProto)
}

void LoadWeightsResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadWeightsResultProto_clockwork_2eproto.base);
  ::memset(&timing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_id_) -
      reinterpret_cast<char*>(&timing_)) + sizeof(action_id_));
}

LoadWeightsResultProto::~LoadWeightsResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.LoadWeightsResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadWeightsResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timing_;
}

void LoadWeightsResultProto::ArenaDtor(void* object) {
  LoadWeightsResultProto* _this = reinterpret_cast< LoadWeightsResultProto* >(object);
  (void)_this;
}
void LoadWeightsResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadWeightsResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadWeightsResultProto& LoadWeightsResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadWeightsResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void LoadWeightsResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.LoadWeightsResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timing_ != nullptr);
    timing_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&action_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_id_) -
        reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadWeightsResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.TimingProto timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 action_received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 result_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadWeightsResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.LoadWeightsResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required .clockwork.TimingProto timing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timing(this), target, stream);
  }

  // required fixed64 action_received = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_action_received(), target);
  }

  // required fixed64 result_sent = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.LoadWeightsResultProto)
  return target;
}

size_t LoadWeightsResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.LoadWeightsResultProto)
  size_t total_size = 0;

  if (_internal_has_timing()) {
    // required .clockwork.TimingProto timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  if (_internal_has_action_received()) {
    // required fixed64 action_received = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_result_sent()) {
    // required fixed64 result_sent = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  return total_size;
}
size_t LoadWeightsResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.LoadWeightsResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .clockwork.TimingProto timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);

    // required fixed64 action_received = 3;
    total_size += 1 + 8;

    // required fixed64 result_sent = 4;
    total_size += 1 + 8;

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadWeightsResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.LoadWeightsResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadWeightsResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadWeightsResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.LoadWeightsResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.LoadWeightsResultProto)
    MergeFrom(*source);
  }
}

void LoadWeightsResultProto::MergeFrom(const LoadWeightsResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.LoadWeightsResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timing()->::clockwork::TimingProto::MergeFrom(from._internal_timing());
    }
    if (cached_has_bits & 0x00000002u) {
      action_received_ = from.action_received_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_sent_ = from.result_sent_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadWeightsResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.LoadWeightsResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadWeightsResultProto::CopyFrom(const LoadWeightsResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.LoadWeightsResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadWeightsResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_timing()) {
    if (!timing_->IsInitialized()) return false;
  }
  return true;
}

void LoadWeightsResultProto::InternalSwap(LoadWeightsResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadWeightsResultProto, action_id_)
      + sizeof(LoadWeightsResultProto::action_id_)
      - PROTOBUF_FIELD_OFFSET(LoadWeightsResultProto, timing_)>(
          reinterpret_cast<char*>(&timing_),
          reinterpret_cast<char*>(&other->timing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadWeightsResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvictWeightsActionProto::InitAsDefaultInstance() {
}
class EvictWeightsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EvictWeightsActionProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_earliest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

EvictWeightsActionProto::EvictWeightsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.EvictWeightsActionProto)
}
EvictWeightsActionProto::EvictWeightsActionProto(const EvictWeightsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpu_id_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(gpu_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.EvictWeightsActionProto)
}

void EvictWeightsActionProto::SharedCtor() {
  ::memset(&action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&action_id_)) + sizeof(gpu_id_));
}

EvictWeightsActionProto::~EvictWeightsActionProto() {
  // @@protoc_insertion_point(destructor:clockwork.EvictWeightsActionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvictWeightsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EvictWeightsActionProto::ArenaDtor(void* object) {
  EvictWeightsActionProto* _this = reinterpret_cast< EvictWeightsActionProto* >(object);
  (void)_this;
}
void EvictWeightsActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvictWeightsActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvictWeightsActionProto& EvictWeightsActionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvictWeightsActionProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void EvictWeightsActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.EvictWeightsActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpu_id_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(gpu_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvictWeightsActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gpu_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 earliest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_earliest(&has_bits);
          earliest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 latest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_latest(&has_bits);
          latest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvictWeightsActionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.EvictWeightsActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint32 gpu_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gpu_id(), target);
  }

  // required fixed64 earliest = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_earliest(), target);
  }

  // required fixed64 latest = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_latest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.EvictWeightsActionProto)
  return target;
}

size_t EvictWeightsActionProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.EvictWeightsActionProto)
  size_t total_size = 0;

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_model_id()) {
    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  if (_internal_has_earliest()) {
    // required fixed64 earliest = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_latest()) {
    // required fixed64 latest = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_gpu_id()) {
    // required uint32 gpu_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());
  }

  return total_size;
}
size_t EvictWeightsActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.EvictWeightsActionProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());

    // required fixed64 earliest = 4;
    total_size += 1 + 8;

    // required fixed64 latest = 5;
    total_size += 1 + 8;

    // required uint32 gpu_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvictWeightsActionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.EvictWeightsActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EvictWeightsActionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvictWeightsActionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.EvictWeightsActionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.EvictWeightsActionProto)
    MergeFrom(*source);
  }
}

void EvictWeightsActionProto::MergeFrom(const EvictWeightsActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.EvictWeightsActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      earliest_ = from.earliest_;
    }
    if (cached_has_bits & 0x00000008u) {
      latest_ = from.latest_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpu_id_ = from.gpu_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvictWeightsActionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.EvictWeightsActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvictWeightsActionProto::CopyFrom(const EvictWeightsActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.EvictWeightsActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvictWeightsActionProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EvictWeightsActionProto::InternalSwap(EvictWeightsActionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvictWeightsActionProto, gpu_id_)
      + sizeof(EvictWeightsActionProto::gpu_id_)
      - PROTOBUF_FIELD_OFFSET(EvictWeightsActionProto, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvictWeightsActionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EvictWeightsResultProto::InitAsDefaultInstance() {
  ::clockwork::_EvictWeightsResultProto_default_instance_._instance.get_mutable()->timing_ = const_cast< ::clockwork::TimingProto*>(
      ::clockwork::TimingProto::internal_default_instance());
}
class EvictWeightsResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EvictWeightsResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::clockwork::TimingProto& timing(const EvictWeightsResultProto* msg);
  static void set_has_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::clockwork::TimingProto&
EvictWeightsResultProto::_Internal::timing(const EvictWeightsResultProto* msg) {
  return *msg->timing_;
}
EvictWeightsResultProto::EvictWeightsResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.EvictWeightsResultProto)
}
EvictWeightsResultProto::EvictWeightsResultProto(const EvictWeightsResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timing()) {
    timing_ = new ::clockwork::TimingProto(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  ::memcpy(&action_received_, &from.action_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_id_) -
    reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.EvictWeightsResultProto)
}

void EvictWeightsResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EvictWeightsResultProto_clockwork_2eproto.base);
  ::memset(&timing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_id_) -
      reinterpret_cast<char*>(&timing_)) + sizeof(action_id_));
}

EvictWeightsResultProto::~EvictWeightsResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.EvictWeightsResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvictWeightsResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timing_;
}

void EvictWeightsResultProto::ArenaDtor(void* object) {
  EvictWeightsResultProto* _this = reinterpret_cast< EvictWeightsResultProto* >(object);
  (void)_this;
}
void EvictWeightsResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvictWeightsResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvictWeightsResultProto& EvictWeightsResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvictWeightsResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void EvictWeightsResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.EvictWeightsResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timing_ != nullptr);
    timing_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&action_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_id_) -
        reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvictWeightsResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.TimingProto timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 action_received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 result_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvictWeightsResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.EvictWeightsResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required .clockwork.TimingProto timing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timing(this), target, stream);
  }

  // required fixed64 action_received = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_action_received(), target);
  }

  // required fixed64 result_sent = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.EvictWeightsResultProto)
  return target;
}

size_t EvictWeightsResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.EvictWeightsResultProto)
  size_t total_size = 0;

  if (_internal_has_timing()) {
    // required .clockwork.TimingProto timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  if (_internal_has_action_received()) {
    // required fixed64 action_received = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_result_sent()) {
    // required fixed64 result_sent = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  return total_size;
}
size_t EvictWeightsResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.EvictWeightsResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .clockwork.TimingProto timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);

    // required fixed64 action_received = 3;
    total_size += 1 + 8;

    // required fixed64 result_sent = 4;
    total_size += 1 + 8;

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvictWeightsResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.EvictWeightsResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EvictWeightsResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvictWeightsResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.EvictWeightsResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.EvictWeightsResultProto)
    MergeFrom(*source);
  }
}

void EvictWeightsResultProto::MergeFrom(const EvictWeightsResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.EvictWeightsResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timing()->::clockwork::TimingProto::MergeFrom(from._internal_timing());
    }
    if (cached_has_bits & 0x00000002u) {
      action_received_ = from.action_received_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_sent_ = from.result_sent_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvictWeightsResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.EvictWeightsResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvictWeightsResultProto::CopyFrom(const EvictWeightsResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.EvictWeightsResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvictWeightsResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_timing()) {
    if (!timing_->IsInitialized()) return false;
  }
  return true;
}

void EvictWeightsResultProto::InternalSwap(EvictWeightsResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvictWeightsResultProto, action_id_)
      + sizeof(EvictWeightsResultProto::action_id_)
      - PROTOBUF_FIELD_OFFSET(EvictWeightsResultProto, timing_)>(
          reinterpret_cast<char*>(&timing_),
          reinterpret_cast<char*>(&other->timing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvictWeightsResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InferActionProto::InitAsDefaultInstance() {
}
class InferActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InferActionProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_earliest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expected_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

InferActionProto::InferActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_sizes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.InferActionProto)
}
InferActionProto::InferActionProto(const InferActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_sizes_(from.input_sizes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_duration_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(expected_duration_));
  // @@protoc_insertion_point(copy_constructor:clockwork.InferActionProto)
}

void InferActionProto::SharedCtor() {
  ::memset(&action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_duration_) -
      reinterpret_cast<char*>(&action_id_)) + sizeof(expected_duration_));
}

InferActionProto::~InferActionProto() {
  // @@protoc_insertion_point(destructor:clockwork.InferActionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InferActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InferActionProto::ArenaDtor(void* object) {
  InferActionProto* _this = reinterpret_cast< InferActionProto* >(object);
  (void)_this;
}
void InferActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InferActionProto& InferActionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InferActionProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void InferActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.InferActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_sizes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expected_duration_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(expected_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_model_id(&has_bits);
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gpu_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 earliest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_earliest(&has_bits);
          earliest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 latest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_latest(&has_bits);
          latest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required uint64 expected_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_expected_duration(&has_bits);
          expected_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 batch_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 input_sizes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_input_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferActionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.InferActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required int32 model_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_model_id(), target);
  }

  // required uint32 gpu_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gpu_id(), target);
  }

  // required fixed64 earliest = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_earliest(), target);
  }

  // required fixed64 latest = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_latest(), target);
  }

  // required uint64 expected_duration = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_expected_duration(), target);
  }

  // required uint32 batch_size = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_batch_size(), target);
  }

  // repeated uint32 input_sizes = 8;
  for (int i = 0, n = this->_internal_input_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_input_sizes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.InferActionProto)
  return target;
}

size_t InferActionProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.InferActionProto)
  size_t total_size = 0;

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_model_id()) {
    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  if (_internal_has_earliest()) {
    // required fixed64 earliest = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_latest()) {
    // required fixed64 latest = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_gpu_id()) {
    // required uint32 gpu_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());
  }

  if (_internal_has_batch_size()) {
    // required uint32 batch_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  if (_internal_has_expected_duration()) {
    // required uint64 expected_duration = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expected_duration());
  }

  return total_size;
}
size_t InferActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.InferActionProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required int32 model_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());

    // required fixed64 earliest = 4;
    total_size += 1 + 8;

    // required fixed64 latest = 5;
    total_size += 1 + 8;

    // required uint32 gpu_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());

    // required uint32 batch_size = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());

    // required uint64 expected_duration = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expected_duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 input_sizes = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->input_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_sizes_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InferActionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.InferActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const InferActionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InferActionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.InferActionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.InferActionProto)
    MergeFrom(*source);
  }
}

void InferActionProto::MergeFrom(const InferActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.InferActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_sizes_.MergeFrom(from.input_sizes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      model_id_ = from.model_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      earliest_ = from.earliest_;
    }
    if (cached_has_bits & 0x00000008u) {
      latest_ = from.latest_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpu_id_ = from.gpu_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      expected_duration_ = from.expected_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InferActionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.InferActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferActionProto::CopyFrom(const InferActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.InferActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferActionProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InferActionProto::InternalSwap(InferActionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_sizes_.InternalSwap(&other->input_sizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferActionProto, expected_duration_)
      + sizeof(InferActionProto::expected_duration_)
      - PROTOBUF_FIELD_OFFSET(InferActionProto, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferActionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InferResultProto::InitAsDefaultInstance() {
  ::clockwork::_InferResultProto_default_instance_._instance.get_mutable()->copy_input_timing_ = const_cast< ::clockwork::TimingProto*>(
      ::clockwork::TimingProto::internal_default_instance());
  ::clockwork::_InferResultProto_default_instance_._instance.get_mutable()->exec_timing_ = const_cast< ::clockwork::TimingProto*>(
      ::clockwork::TimingProto::internal_default_instance());
  ::clockwork::_InferResultProto_default_instance_._instance.get_mutable()->copy_output_timing_ = const_cast< ::clockwork::TimingProto*>(
      ::clockwork::TimingProto::internal_default_instance());
}
class InferResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InferResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::clockwork::TimingProto& copy_input_timing(const InferResultProto* msg);
  static void set_has_copy_input_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::clockwork::TimingProto& exec_timing(const InferResultProto* msg);
  static void set_has_exec_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::clockwork::TimingProto& copy_output_timing(const InferResultProto* msg);
  static void set_has_copy_output_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpu_clock_before(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gpu_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::clockwork::TimingProto&
InferResultProto::_Internal::copy_input_timing(const InferResultProto* msg) {
  return *msg->copy_input_timing_;
}
const ::clockwork::TimingProto&
InferResultProto::_Internal::exec_timing(const InferResultProto* msg) {
  return *msg->exec_timing_;
}
const ::clockwork::TimingProto&
InferResultProto::_Internal::copy_output_timing(const InferResultProto* msg) {
  return *msg->copy_output_timing_;
}
InferResultProto::InferResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.InferResultProto)
}
InferResultProto::InferResultProto(const InferResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_copy_input_timing()) {
    copy_input_timing_ = new ::clockwork::TimingProto(*from.copy_input_timing_);
  } else {
    copy_input_timing_ = nullptr;
  }
  if (from._internal_has_exec_timing()) {
    exec_timing_ = new ::clockwork::TimingProto(*from.exec_timing_);
  } else {
    exec_timing_ = nullptr;
  }
  if (from._internal_has_copy_output_timing()) {
    copy_output_timing_ = new ::clockwork::TimingProto(*from.copy_output_timing_);
  } else {
    copy_output_timing_ = nullptr;
  }
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_sent_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(result_sent_));
  // @@protoc_insertion_point(copy_constructor:clockwork.InferResultProto)
}

void InferResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InferResultProto_clockwork_2eproto.base);
  ::memset(&copy_input_timing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_sent_) -
      reinterpret_cast<char*>(&copy_input_timing_)) + sizeof(result_sent_));
}

InferResultProto::~InferResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.InferResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InferResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete copy_input_timing_;
  if (this != internal_default_instance()) delete exec_timing_;
  if (this != internal_default_instance()) delete copy_output_timing_;
}

void InferResultProto::ArenaDtor(void* object) {
  InferResultProto* _this = reinterpret_cast< InferResultProto* >(object);
  (void)_this;
}
void InferResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InferResultProto& InferResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InferResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void InferResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.InferResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(copy_input_timing_ != nullptr);
      copy_input_timing_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(exec_timing_ != nullptr);
      exec_timing_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(copy_output_timing_ != nullptr);
      copy_output_timing_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_received_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(action_received_));
  }
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.TimingProto copy_input_timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_copy_input_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.TimingProto exec_timing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_exec_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.TimingProto copy_output_timing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_copy_output_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gpu_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gpu_clock_before = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gpu_clock_before(&has_bits);
          gpu_clock_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gpu_clock = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gpu_clock(&has_bits);
          gpu_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed64 action_received = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 result_sent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InferResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.InferResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required .clockwork.TimingProto copy_input_timing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::copy_input_timing(this), target, stream);
  }

  // required .clockwork.TimingProto exec_timing = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::exec_timing(this), target, stream);
  }

  // required .clockwork.TimingProto copy_output_timing = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::copy_output_timing(this), target, stream);
  }

  // required uint32 gpu_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gpu_id(), target);
  }

  // required uint32 gpu_clock_before = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gpu_clock_before(), target);
  }

  // required uint32 gpu_clock = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gpu_clock(), target);
  }

  // required fixed64 action_received = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_action_received(), target);
  }

  // required fixed64 result_sent = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.InferResultProto)
  return target;
}

size_t InferResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.InferResultProto)
  size_t total_size = 0;

  if (_internal_has_copy_input_timing()) {
    // required .clockwork.TimingProto copy_input_timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copy_input_timing_);
  }

  if (_internal_has_exec_timing()) {
    // required .clockwork.TimingProto exec_timing = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exec_timing_);
  }

  if (_internal_has_copy_output_timing()) {
    // required .clockwork.TimingProto copy_output_timing = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copy_output_timing_);
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  if (_internal_has_gpu_id()) {
    // required uint32 gpu_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());
  }

  if (_internal_has_gpu_clock_before()) {
    // required uint32 gpu_clock_before = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_clock_before());
  }

  if (_internal_has_gpu_clock()) {
    // required uint32 gpu_clock = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_clock());
  }

  if (_internal_has_action_received()) {
    // required fixed64 action_received = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_result_sent()) {
    // required fixed64 result_sent = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t InferResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.InferResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .clockwork.TimingProto copy_input_timing = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copy_input_timing_);

    // required .clockwork.TimingProto exec_timing = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exec_timing_);

    // required .clockwork.TimingProto copy_output_timing = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copy_output_timing_);

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

    // required uint32 gpu_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_id());

    // required uint32 gpu_clock_before = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_clock_before());

    // required uint32 gpu_clock = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gpu_clock());

    // required fixed64 action_received = 8;
    total_size += 1 + 8;

    // required fixed64 result_sent = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InferResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.InferResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const InferResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InferResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.InferResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.InferResultProto)
    MergeFrom(*source);
  }
}

void InferResultProto::MergeFrom(const InferResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.InferResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_copy_input_timing()->::clockwork::TimingProto::MergeFrom(from._internal_copy_input_timing());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_exec_timing()->::clockwork::TimingProto::MergeFrom(from._internal_exec_timing());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_copy_output_timing()->::clockwork::TimingProto::MergeFrom(from._internal_copy_output_timing());
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpu_id_ = from.gpu_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpu_clock_before_ = from.gpu_clock_before_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpu_clock_ = from.gpu_clock_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_received_ = from.action_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_result_sent(from._internal_result_sent());
  }
}

void InferResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.InferResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferResultProto::CopyFrom(const InferResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.InferResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_copy_input_timing()) {
    if (!copy_input_timing_->IsInitialized()) return false;
  }
  if (_internal_has_exec_timing()) {
    if (!exec_timing_->IsInitialized()) return false;
  }
  if (_internal_has_copy_output_timing()) {
    if (!copy_output_timing_->IsInitialized()) return false;
  }
  return true;
}

void InferResultProto::InternalSwap(InferResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferResultProto, result_sent_)
      + sizeof(InferResultProto::result_sent_)
      - PROTOBUF_FIELD_OFFSET(InferResultProto, copy_input_timing_)>(
          reinterpret_cast<char*>(&copy_input_timing_),
          reinterpret_cast<char*>(&other->copy_input_timing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearCacheActionProto::InitAsDefaultInstance() {
}
class ClearCacheActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearCacheActionProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClearCacheActionProto::ClearCacheActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ClearCacheActionProto)
}
ClearCacheActionProto::ClearCacheActionProto(const ClearCacheActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:clockwork.ClearCacheActionProto)
}

void ClearCacheActionProto::SharedCtor() {
  action_id_ = 0;
}

ClearCacheActionProto::~ClearCacheActionProto() {
  // @@protoc_insertion_point(destructor:clockwork.ClearCacheActionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearCacheActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearCacheActionProto::ArenaDtor(void* object) {
  ClearCacheActionProto* _this = reinterpret_cast< ClearCacheActionProto* >(object);
  (void)_this;
}
void ClearCacheActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearCacheActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearCacheActionProto& ClearCacheActionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearCacheActionProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ClearCacheActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ClearCacheActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearCacheActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearCacheActionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ClearCacheActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ClearCacheActionProto)
  return target;
}

size_t ClearCacheActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ClearCacheActionProto)
  size_t total_size = 0;

  // required int32 action_id = 1;
  if (_internal_has_action_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearCacheActionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ClearCacheActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearCacheActionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearCacheActionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ClearCacheActionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ClearCacheActionProto)
    MergeFrom(*source);
  }
}

void ClearCacheActionProto::MergeFrom(const ClearCacheActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ClearCacheActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_id()) {
    _internal_set_action_id(from._internal_action_id());
  }
}

void ClearCacheActionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ClearCacheActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearCacheActionProto::CopyFrom(const ClearCacheActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ClearCacheActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearCacheActionProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClearCacheActionProto::InternalSwap(ClearCacheActionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_id_, other->action_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearCacheActionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearCacheResultProto::InitAsDefaultInstance() {
}
class ClearCacheResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearCacheResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ClearCacheResultProto::ClearCacheResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ClearCacheResultProto)
}
ClearCacheResultProto::ClearCacheResultProto(const ClearCacheResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_received_, &from.action_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_id_) -
    reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ClearCacheResultProto)
}

void ClearCacheResultProto::SharedCtor() {
  ::memset(&action_received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_id_) -
      reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
}

ClearCacheResultProto::~ClearCacheResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.ClearCacheResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearCacheResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearCacheResultProto::ArenaDtor(void* object) {
  ClearCacheResultProto* _this = reinterpret_cast< ClearCacheResultProto* >(object);
  (void)_this;
}
void ClearCacheResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearCacheResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearCacheResultProto& ClearCacheResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearCacheResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ClearCacheResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ClearCacheResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&action_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_id_) -
        reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearCacheResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 action_received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 result_sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearCacheResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ClearCacheResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required uint64 action_received = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_action_received(), target);
  }

  // required uint64 result_sent = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ClearCacheResultProto)
  return target;
}

size_t ClearCacheResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ClearCacheResultProto)
  size_t total_size = 0;

  if (_internal_has_action_received()) {
    // required uint64 action_received = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_action_received());
  }

  if (_internal_has_result_sent()) {
    // required uint64 result_sent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_result_sent());
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  return total_size;
}
size_t ClearCacheResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ClearCacheResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 action_received = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_action_received());

    // required uint64 result_sent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_result_sent());

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearCacheResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ClearCacheResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearCacheResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearCacheResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ClearCacheResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ClearCacheResultProto)
    MergeFrom(*source);
  }
}

void ClearCacheResultProto::MergeFrom(const ClearCacheResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ClearCacheResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_received_ = from.action_received_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_sent_ = from.result_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClearCacheResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ClearCacheResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearCacheResultProto::CopyFrom(const ClearCacheResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ClearCacheResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearCacheResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClearCacheResultProto::InternalSwap(ClearCacheResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearCacheResultProto, action_id_)
      + sizeof(ClearCacheResultProto::action_id_)
      - PROTOBUF_FIELD_OFFSET(ClearCacheResultProto, action_received_)>(
          reinterpret_cast<char*>(&action_received_),
          reinterpret_cast<char*>(&other->action_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearCacheResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWorkerStateActionProto::InitAsDefaultInstance() {
}
class GetWorkerStateActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWorkerStateActionProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GetWorkerStateActionProto::GetWorkerStateActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.GetWorkerStateActionProto)
}
GetWorkerStateActionProto::GetWorkerStateActionProto(const GetWorkerStateActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:clockwork.GetWorkerStateActionProto)
}

void GetWorkerStateActionProto::SharedCtor() {
  action_id_ = 0;
}

GetWorkerStateActionProto::~GetWorkerStateActionProto() {
  // @@protoc_insertion_point(destructor:clockwork.GetWorkerStateActionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkerStateActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetWorkerStateActionProto::ArenaDtor(void* object) {
  GetWorkerStateActionProto* _this = reinterpret_cast< GetWorkerStateActionProto* >(object);
  (void)_this;
}
void GetWorkerStateActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkerStateActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkerStateActionProto& GetWorkerStateActionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkerStateActionProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void GetWorkerStateActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.GetWorkerStateActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkerStateActionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkerStateActionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.GetWorkerStateActionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.GetWorkerStateActionProto)
  return target;
}

size_t GetWorkerStateActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.GetWorkerStateActionProto)
  size_t total_size = 0;

  // required int32 action_id = 1;
  if (_internal_has_action_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkerStateActionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.GetWorkerStateActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkerStateActionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkerStateActionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.GetWorkerStateActionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.GetWorkerStateActionProto)
    MergeFrom(*source);
  }
}

void GetWorkerStateActionProto::MergeFrom(const GetWorkerStateActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.GetWorkerStateActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action_id()) {
    _internal_set_action_id(from._internal_action_id());
  }
}

void GetWorkerStateActionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.GetWorkerStateActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkerStateActionProto::CopyFrom(const GetWorkerStateActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.GetWorkerStateActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkerStateActionProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GetWorkerStateActionProto::InternalSwap(GetWorkerStateActionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_id_, other->action_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkerStateActionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInfoProto::InitAsDefaultInstance() {
}
class ModelInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelInfoProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weights_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_weights_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weights_load_time_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

ModelInfoProto::ModelInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_batch_sizes_(arena),
  batch_size_exec_times_nanos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.ModelInfoProto)
}
ModelInfoProto::ModelInfoProto(const ModelInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supported_batch_sizes_(from.supported_batch_sizes_),
      batch_size_exec_times_nanos_(from.batch_size_exec_times_nanos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  ::memcpy(&input_size_, &from.input_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&weights_load_time_nanos_) -
    reinterpret_cast<char*>(&input_size_)) + sizeof(weights_load_time_nanos_));
  // @@protoc_insertion_point(copy_constructor:clockwork.ModelInfoProto)
}

void ModelInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInfoProto_clockwork_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weights_load_time_nanos_) -
      reinterpret_cast<char*>(&input_size_)) + sizeof(weights_load_time_nanos_));
}

ModelInfoProto::~ModelInfoProto() {
  // @@protoc_insertion_point(destructor:clockwork.ModelInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelInfoProto::ArenaDtor(void* object) {
  ModelInfoProto* _this = reinterpret_cast< ModelInfoProto* >(object);
  (void)_this;
}
void ModelInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInfoProto& ModelInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInfoProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void ModelInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.ModelInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_batch_sizes_.Clear();
  batch_size_exec_times_nanos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    source_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&input_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weights_load_time_nanos_) -
        reinterpret_cast<char*>(&input_size_)) + sizeof(weights_load_time_nanos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clockwork.ModelInfoProto.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 input_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_input_size(&has_bits);
          input_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 output_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_size(&has_bits);
          output_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 supported_batch_sizes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_supported_batch_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 weights_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_weights_size(&has_bits);
          weights_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_weights_pages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_weights_pages(&has_bits);
          num_weights_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 weights_load_time_nanos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_weights_load_time_nanos(&has_bits);
          weights_load_time_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 batch_size_exec_times_nanos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_batch_size_exec_times_nanos(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.ModelInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required string source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clockwork.ModelInfoProto.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // required uint64 input_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_input_size(), target);
  }

  // required uint64 output_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_output_size(), target);
  }

  // repeated uint32 supported_batch_sizes = 5;
  for (int i = 0, n = this->_internal_supported_batch_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_supported_batch_sizes(i), target);
  }

  // required uint64 weights_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_weights_size(), target);
  }

  // required uint32 num_weights_pages = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_weights_pages(), target);
  }

  // required uint64 weights_load_time_nanos = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_weights_load_time_nanos(), target);
  }

  // repeated uint64 batch_size_exec_times_nanos = 9;
  for (int i = 0, n = this->_internal_batch_size_exec_times_nanos_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_batch_size_exec_times_nanos(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.ModelInfoProto)
  return target;
}

size_t ModelInfoProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.ModelInfoProto)
  size_t total_size = 0;

  if (_internal_has_source()) {
    // required string source = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  if (_internal_has_input_size()) {
    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());
  }

  if (_internal_has_output_size()) {
    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_num_weights_pages()) {
    // required uint32 num_weights_pages = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_weights_pages());
  }

  if (_internal_has_weights_size()) {
    // required uint64 weights_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_size());
  }

  if (_internal_has_weights_load_time_nanos()) {
    // required uint64 weights_load_time_nanos = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_load_time_nanos());
  }

  return total_size;
}
size_t ModelInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.ModelInfoProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string source = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());

    // required uint64 input_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_input_size());

    // required uint64 output_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_output_size());

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required uint32 num_weights_pages = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_weights_pages());

    // required uint64 weights_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_size());

    // required uint64 weights_load_time_nanos = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_load_time_nanos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 supported_batch_sizes = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->supported_batch_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_supported_batch_sizes_size());
    total_size += data_size;
  }

  // repeated uint64 batch_size_exec_times_nanos = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->batch_size_exec_times_nanos_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_batch_size_exec_times_nanos_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.ModelInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.ModelInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.ModelInfoProto)
    MergeFrom(*source);
  }
}

void ModelInfoProto::MergeFrom(const ModelInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.ModelInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_batch_sizes_.MergeFrom(from.supported_batch_sizes_);
  batch_size_exec_times_nanos_.MergeFrom(from.batch_size_exec_times_nanos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000002u) {
      input_size_ = from.input_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_size_ = from.output_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_weights_pages_ = from.num_weights_pages_;
    }
    if (cached_has_bits & 0x00000020u) {
      weights_size_ = from.weights_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      weights_load_time_nanos_ = from.weights_load_time_nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.ModelInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfoProto::CopyFrom(const ModelInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.ModelInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfoProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModelInfoProto::InternalSwap(ModelInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_batch_sizes_.InternalSwap(&other->supported_batch_sizes_);
  batch_size_exec_times_nanos_.InternalSwap(&other->batch_size_exec_times_nanos_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelInfoProto, weights_load_time_nanos_)
      + sizeof(ModelInfoProto::weights_load_time_nanos_)
      - PROTOBUF_FIELD_OFFSET(ModelInfoProto, input_size_)>(
          reinterpret_cast<char*>(&input_size_),
          reinterpret_cast<char*>(&other->input_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPUInfoProto::InitAsDefaultInstance() {
}
class GPUInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GPUInfoProto>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weights_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weights_cache_total_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_io_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_workspace_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

GPUInfoProto::GPUInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.GPUInfoProto)
}
GPUInfoProto::GPUInfoProto(const GPUInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weights_cache_size_, &from.weights_cache_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&workspace_pool_size_) -
    reinterpret_cast<char*>(&weights_cache_size_)) + sizeof(workspace_pool_size_));
  // @@protoc_insertion_point(copy_constructor:clockwork.GPUInfoProto)
}

void GPUInfoProto::SharedCtor() {
  ::memset(&weights_cache_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&workspace_pool_size_) -
      reinterpret_cast<char*>(&weights_cache_size_)) + sizeof(workspace_pool_size_));
}

GPUInfoProto::~GPUInfoProto() {
  // @@protoc_insertion_point(destructor:clockwork.GPUInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPUInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPUInfoProto::ArenaDtor(void* object) {
  GPUInfoProto* _this = reinterpret_cast< GPUInfoProto* >(object);
  (void)_this;
}
void GPUInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPUInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPUInfoProto& GPUInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPUInfoProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void GPUInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.GPUInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&weights_cache_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workspace_pool_size_) -
        reinterpret_cast<char*>(&weights_cache_size_)) + sizeof(workspace_pool_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 weights_cache_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_weights_cache_size(&has_bits);
          weights_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 weights_cache_total_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_weights_cache_total_pages(&has_bits);
          weights_cache_total_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 models = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_models(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_models(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 io_pool_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_io_pool_size(&has_bits);
          io_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 workspace_pool_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_workspace_pool_size(&has_bits);
          workspace_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPUInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.GPUInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required uint64 weights_cache_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_weights_cache_size(), target);
  }

  // required int32 weights_cache_total_pages = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_weights_cache_total_pages(), target);
  }

  // repeated uint32 models = 4;
  for (int i = 0, n = this->_internal_models_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_models(i), target);
  }

  // required uint64 io_pool_size = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_io_pool_size(), target);
  }

  // required uint64 workspace_pool_size = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_workspace_pool_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.GPUInfoProto)
  return target;
}

size_t GPUInfoProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.GPUInfoProto)
  size_t total_size = 0;

  if (_internal_has_weights_cache_size()) {
    // required uint64 weights_cache_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_cache_size());
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_weights_cache_total_pages()) {
    // required int32 weights_cache_total_pages = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weights_cache_total_pages());
  }

  if (_internal_has_io_pool_size()) {
    // required uint64 io_pool_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_io_pool_size());
  }

  if (_internal_has_workspace_pool_size()) {
    // required uint64 workspace_pool_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_workspace_pool_size());
  }

  return total_size;
}
size_t GPUInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.GPUInfoProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 weights_cache_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_weights_cache_size());

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 weights_cache_total_pages = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weights_cache_total_pages());

    // required uint64 io_pool_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_io_pool_size());

    // required uint64 workspace_pool_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_workspace_pool_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 models = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->models_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_models_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPUInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.GPUInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GPUInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPUInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.GPUInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.GPUInfoProto)
    MergeFrom(*source);
  }
}

void GPUInfoProto::MergeFrom(const GPUInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.GPUInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      weights_cache_size_ = from.weights_cache_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      weights_cache_total_pages_ = from.weights_cache_total_pages_;
    }
    if (cached_has_bits & 0x00000008u) {
      io_pool_size_ = from.io_pool_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      workspace_pool_size_ = from.workspace_pool_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GPUInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.GPUInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUInfoProto::CopyFrom(const GPUInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.GPUInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUInfoProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GPUInfoProto::InternalSwap(GPUInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  models_.InternalSwap(&other->models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPUInfoProto, workspace_pool_size_)
      + sizeof(GPUInfoProto::workspace_pool_size_)
      - PROTOBUF_FIELD_OFFSET(GPUInfoProto, weights_cache_size_)>(
          reinterpret_cast<char*>(&weights_cache_size_),
          reinterpret_cast<char*>(&other->weights_cache_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerMemoryInfoProto::InitAsDefaultInstance() {
}
class WorkerMemoryInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkerMemoryInfoProto>()._has_bits_);
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_weights_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_io_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

WorkerMemoryInfoProto::WorkerMemoryInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gpus_(arena),
  models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.WorkerMemoryInfoProto)
}
WorkerMemoryInfoProto::WorkerMemoryInfoProto(const WorkerMemoryInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gpus_(from.gpus_),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_io_pool_size_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(host_io_pool_size_));
  // @@protoc_insertion_point(copy_constructor:clockwork.WorkerMemoryInfoProto)
}

void WorkerMemoryInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerMemoryInfoProto_clockwork_2eproto.base);
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_io_pool_size_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(host_io_pool_size_));
}

WorkerMemoryInfoProto::~WorkerMemoryInfoProto() {
  // @@protoc_insertion_point(destructor:clockwork.WorkerMemoryInfoProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerMemoryInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkerMemoryInfoProto::ArenaDtor(void* object) {
  WorkerMemoryInfoProto* _this = reinterpret_cast< WorkerMemoryInfoProto* >(object);
  (void)_this;
}
void WorkerMemoryInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerMemoryInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerMemoryInfoProto& WorkerMemoryInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerMemoryInfoProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void WorkerMemoryInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.WorkerMemoryInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpus_.Clear();
  models_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&page_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&host_io_pool_size_) -
        reinterpret_cast<char*>(&page_size_)) + sizeof(host_io_pool_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerMemoryInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page_size(&has_bits);
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 host_weights_cache_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_host_weights_cache_size(&has_bits);
          host_weights_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 host_io_pool_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_host_io_pool_size(&has_bits);
          host_io_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clockwork.GPUInfoProto gpus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clockwork.ModelInfoProto models = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerMemoryInfoProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.WorkerMemoryInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 page_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_page_size(), target);
  }

  // required uint64 host_weights_cache_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_host_weights_cache_size(), target);
  }

  // required uint64 host_io_pool_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_host_io_pool_size(), target);
  }

  // repeated .clockwork.GPUInfoProto gpus = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_gpus(i), target, stream);
  }

  // repeated .clockwork.ModelInfoProto models = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.WorkerMemoryInfoProto)
  return target;
}

size_t WorkerMemoryInfoProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.WorkerMemoryInfoProto)
  size_t total_size = 0;

  if (_internal_has_page_size()) {
    // required uint64 page_size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_page_size());
  }

  if (_internal_has_host_weights_cache_size()) {
    // required uint64 host_weights_cache_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_host_weights_cache_size());
  }

  if (_internal_has_host_io_pool_size()) {
    // required uint64 host_io_pool_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_host_io_pool_size());
  }

  return total_size;
}
size_t WorkerMemoryInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.WorkerMemoryInfoProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 page_size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_page_size());

    // required uint64 host_weights_cache_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_host_weights_cache_size());

    // required uint64 host_io_pool_size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_host_io_pool_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clockwork.GPUInfoProto gpus = 4;
  total_size += 1UL * this->_internal_gpus_size();
  for (const auto& msg : this->gpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clockwork.ModelInfoProto models = 5;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerMemoryInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.WorkerMemoryInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerMemoryInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerMemoryInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.WorkerMemoryInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.WorkerMemoryInfoProto)
    MergeFrom(*source);
  }
}

void WorkerMemoryInfoProto::MergeFrom(const WorkerMemoryInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.WorkerMemoryInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpus_.MergeFrom(from.gpus_);
  models_.MergeFrom(from.models_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      page_size_ = from.page_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      host_weights_cache_size_ = from.host_weights_cache_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      host_io_pool_size_ = from.host_io_pool_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkerMemoryInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.WorkerMemoryInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerMemoryInfoProto::CopyFrom(const WorkerMemoryInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.WorkerMemoryInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerMemoryInfoProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gpus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(models_)) return false;
  return true;
}

void WorkerMemoryInfoProto::InternalSwap(WorkerMemoryInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gpus_.InternalSwap(&other->gpus_);
  models_.InternalSwap(&other->models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerMemoryInfoProto, host_io_pool_size_)
      + sizeof(WorkerMemoryInfoProto::host_io_pool_size_)
      - PROTOBUF_FIELD_OFFSET(WorkerMemoryInfoProto, page_size_)>(
          reinterpret_cast<char*>(&page_size_),
          reinterpret_cast<char*>(&other->page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerMemoryInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetWorkerStateResultProto::InitAsDefaultInstance() {
  ::clockwork::_GetWorkerStateResultProto_default_instance_._instance.get_mutable()->worker_memory_info_ = const_cast< ::clockwork::WorkerMemoryInfoProto*>(
      ::clockwork::WorkerMemoryInfoProto::internal_default_instance());
}
class GetWorkerStateResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWorkerStateResultProto>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::clockwork::WorkerMemoryInfoProto& worker_memory_info(const GetWorkerStateResultProto* msg);
  static void set_has_worker_memory_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::clockwork::WorkerMemoryInfoProto&
GetWorkerStateResultProto::_Internal::worker_memory_info(const GetWorkerStateResultProto* msg) {
  return *msg->worker_memory_info_;
}
GetWorkerStateResultProto::GetWorkerStateResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clockwork.GetWorkerStateResultProto)
}
GetWorkerStateResultProto::GetWorkerStateResultProto(const GetWorkerStateResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worker_memory_info()) {
    worker_memory_info_ = new ::clockwork::WorkerMemoryInfoProto(*from.worker_memory_info_);
  } else {
    worker_memory_info_ = nullptr;
  }
  ::memcpy(&action_received_, &from.action_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_id_) -
    reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  // @@protoc_insertion_point(copy_constructor:clockwork.GetWorkerStateResultProto)
}

void GetWorkerStateResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetWorkerStateResultProto_clockwork_2eproto.base);
  ::memset(&worker_memory_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_id_) -
      reinterpret_cast<char*>(&worker_memory_info_)) + sizeof(action_id_));
}

GetWorkerStateResultProto::~GetWorkerStateResultProto() {
  // @@protoc_insertion_point(destructor:clockwork.GetWorkerStateResultProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetWorkerStateResultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete worker_memory_info_;
}

void GetWorkerStateResultProto::ArenaDtor(void* object) {
  GetWorkerStateResultProto* _this = reinterpret_cast< GetWorkerStateResultProto* >(object);
  (void)_this;
}
void GetWorkerStateResultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkerStateResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWorkerStateResultProto& GetWorkerStateResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetWorkerStateResultProto_clockwork_2eproto.base);
  return *internal_default_instance();
}


void GetWorkerStateResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:clockwork.GetWorkerStateResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(worker_memory_info_ != nullptr);
    worker_memory_info_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&action_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_id_) -
        reinterpret_cast<char*>(&action_received_)) + sizeof(action_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkerStateResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .clockwork.WorkerMemoryInfoProto worker_memory_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker_memory_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 action_received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_action_received(&has_bits);
          action_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 result_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result_sent(&has_bits);
          result_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetWorkerStateResultProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clockwork.GetWorkerStateResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 action_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action_id(), target);
  }

  // required .clockwork.WorkerMemoryInfoProto worker_memory_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::worker_memory_info(this), target, stream);
  }

  // required uint64 action_received = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_action_received(), target);
  }

  // required uint64 result_sent = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_result_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clockwork.GetWorkerStateResultProto)
  return target;
}

size_t GetWorkerStateResultProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:clockwork.GetWorkerStateResultProto)
  size_t total_size = 0;

  if (_internal_has_worker_memory_info()) {
    // required .clockwork.WorkerMemoryInfoProto worker_memory_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_memory_info_);
  }

  if (_internal_has_action_received()) {
    // required uint64 action_received = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_action_received());
  }

  if (_internal_has_result_sent()) {
    // required uint64 result_sent = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_result_sent());
  }

  if (_internal_has_action_id()) {
    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());
  }

  return total_size;
}
size_t GetWorkerStateResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clockwork.GetWorkerStateResultProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .clockwork.WorkerMemoryInfoProto worker_memory_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_memory_info_);

    // required uint64 action_received = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_action_received());

    // required uint64 result_sent = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_result_sent());

    // required int32 action_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWorkerStateResultProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clockwork.GetWorkerStateResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWorkerStateResultProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetWorkerStateResultProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clockwork.GetWorkerStateResultProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clockwork.GetWorkerStateResultProto)
    MergeFrom(*source);
  }
}

void GetWorkerStateResultProto::MergeFrom(const GetWorkerStateResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clockwork.GetWorkerStateResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_worker_memory_info()->::clockwork::WorkerMemoryInfoProto::MergeFrom(from._internal_worker_memory_info());
    }
    if (cached_has_bits & 0x00000002u) {
      action_received_ = from.action_received_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_sent_ = from.result_sent_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetWorkerStateResultProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clockwork.GetWorkerStateResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkerStateResultProto::CopyFrom(const GetWorkerStateResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clockwork.GetWorkerStateResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkerStateResultProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_worker_memory_info()) {
    if (!worker_memory_info_->IsInitialized()) return false;
  }
  return true;
}

void GetWorkerStateResultProto::InternalSwap(GetWorkerStateResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWorkerStateResultProto, action_id_)
      + sizeof(GetWorkerStateResultProto::action_id_)
      - PROTOBUF_FIELD_OFFSET(GetWorkerStateResultProto, worker_memory_info_)>(
          reinterpret_cast<char*>(&worker_memory_info_),
          reinterpret_cast<char*>(&other->worker_memory_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkerStateResultProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace clockwork
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clockwork::RequestHeaderProto* Arena::CreateMaybeMessage< ::clockwork::RequestHeaderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::RequestHeaderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ResponseHeaderProto* Arena::CreateMaybeMessage< ::clockwork::ResponseHeaderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ResponseHeaderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ModelUploadReqProto* Arena::CreateMaybeMessage< ::clockwork::ModelUploadReqProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ModelUploadReqProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ModelUploadRspProto* Arena::CreateMaybeMessage< ::clockwork::ModelUploadRspProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ModelUploadRspProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ModelInferenceReqProto* Arena::CreateMaybeMessage< ::clockwork::ModelInferenceReqProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ModelInferenceReqProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ModelInferenceRspProto* Arena::CreateMaybeMessage< ::clockwork::ModelInferenceRspProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ModelInferenceRspProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::EvictReqProto* Arena::CreateMaybeMessage< ::clockwork::EvictReqProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::EvictReqProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::EvictRspProto* Arena::CreateMaybeMessage< ::clockwork::EvictRspProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::EvictRspProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LoadModelFromDiskReqProto* Arena::CreateMaybeMessage< ::clockwork::LoadModelFromDiskReqProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LoadModelFromDiskReqProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LoadModelFromDiskRspProto* Arena::CreateMaybeMessage< ::clockwork::LoadModelFromDiskRspProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LoadModelFromDiskRspProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LSReqProto* Arena::CreateMaybeMessage< ::clockwork::LSReqProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LSReqProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ClientModelInfoProto* Arena::CreateMaybeMessage< ::clockwork::ClientModelInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ClientModelInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LSRspProto* Arena::CreateMaybeMessage< ::clockwork::LSRspProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LSRspProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ErrorResultProto* Arena::CreateMaybeMessage< ::clockwork::ErrorResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ErrorResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::TimingProto* Arena::CreateMaybeMessage< ::clockwork::TimingProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::TimingProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LoadModelFromDiskActionProto* Arena::CreateMaybeMessage< ::clockwork::LoadModelFromDiskActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LoadModelFromDiskActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LoadModelFromDiskResultProto* Arena::CreateMaybeMessage< ::clockwork::LoadModelFromDiskResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LoadModelFromDiskResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LoadWeightsActionProto* Arena::CreateMaybeMessage< ::clockwork::LoadWeightsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LoadWeightsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::LoadWeightsResultProto* Arena::CreateMaybeMessage< ::clockwork::LoadWeightsResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::LoadWeightsResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::EvictWeightsActionProto* Arena::CreateMaybeMessage< ::clockwork::EvictWeightsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::EvictWeightsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::EvictWeightsResultProto* Arena::CreateMaybeMessage< ::clockwork::EvictWeightsResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::EvictWeightsResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::InferActionProto* Arena::CreateMaybeMessage< ::clockwork::InferActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::InferActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::InferResultProto* Arena::CreateMaybeMessage< ::clockwork::InferResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::InferResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ClearCacheActionProto* Arena::CreateMaybeMessage< ::clockwork::ClearCacheActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ClearCacheActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ClearCacheResultProto* Arena::CreateMaybeMessage< ::clockwork::ClearCacheResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ClearCacheResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::GetWorkerStateActionProto* Arena::CreateMaybeMessage< ::clockwork::GetWorkerStateActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::GetWorkerStateActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::ModelInfoProto* Arena::CreateMaybeMessage< ::clockwork::ModelInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::ModelInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::GPUInfoProto* Arena::CreateMaybeMessage< ::clockwork::GPUInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::GPUInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::WorkerMemoryInfoProto* Arena::CreateMaybeMessage< ::clockwork::WorkerMemoryInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::WorkerMemoryInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::clockwork::GetWorkerStateResultProto* Arena::CreateMaybeMessage< ::clockwork::GetWorkerStateResultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clockwork::GetWorkerStateResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
