// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clockwork.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clockwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clockwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clockwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clockwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clockwork_2eproto;
namespace clockwork {
class ClearCacheActionProto;
class ClearCacheActionProtoDefaultTypeInternal;
extern ClearCacheActionProtoDefaultTypeInternal _ClearCacheActionProto_default_instance_;
class ClearCacheResultProto;
class ClearCacheResultProtoDefaultTypeInternal;
extern ClearCacheResultProtoDefaultTypeInternal _ClearCacheResultProto_default_instance_;
class ClientModelInfoProto;
class ClientModelInfoProtoDefaultTypeInternal;
extern ClientModelInfoProtoDefaultTypeInternal _ClientModelInfoProto_default_instance_;
class ErrorResultProto;
class ErrorResultProtoDefaultTypeInternal;
extern ErrorResultProtoDefaultTypeInternal _ErrorResultProto_default_instance_;
class EvictReqProto;
class EvictReqProtoDefaultTypeInternal;
extern EvictReqProtoDefaultTypeInternal _EvictReqProto_default_instance_;
class EvictRspProto;
class EvictRspProtoDefaultTypeInternal;
extern EvictRspProtoDefaultTypeInternal _EvictRspProto_default_instance_;
class EvictWeightsActionProto;
class EvictWeightsActionProtoDefaultTypeInternal;
extern EvictWeightsActionProtoDefaultTypeInternal _EvictWeightsActionProto_default_instance_;
class EvictWeightsResultProto;
class EvictWeightsResultProtoDefaultTypeInternal;
extern EvictWeightsResultProtoDefaultTypeInternal _EvictWeightsResultProto_default_instance_;
class GPUInfoProto;
class GPUInfoProtoDefaultTypeInternal;
extern GPUInfoProtoDefaultTypeInternal _GPUInfoProto_default_instance_;
class GetWorkerStateActionProto;
class GetWorkerStateActionProtoDefaultTypeInternal;
extern GetWorkerStateActionProtoDefaultTypeInternal _GetWorkerStateActionProto_default_instance_;
class GetWorkerStateResultProto;
class GetWorkerStateResultProtoDefaultTypeInternal;
extern GetWorkerStateResultProtoDefaultTypeInternal _GetWorkerStateResultProto_default_instance_;
class InferActionProto;
class InferActionProtoDefaultTypeInternal;
extern InferActionProtoDefaultTypeInternal _InferActionProto_default_instance_;
class InferResultProto;
class InferResultProtoDefaultTypeInternal;
extern InferResultProtoDefaultTypeInternal _InferResultProto_default_instance_;
class LSReqProto;
class LSReqProtoDefaultTypeInternal;
extern LSReqProtoDefaultTypeInternal _LSReqProto_default_instance_;
class LSRspProto;
class LSRspProtoDefaultTypeInternal;
extern LSRspProtoDefaultTypeInternal _LSRspProto_default_instance_;
class LoadModelFromDiskActionProto;
class LoadModelFromDiskActionProtoDefaultTypeInternal;
extern LoadModelFromDiskActionProtoDefaultTypeInternal _LoadModelFromDiskActionProto_default_instance_;
class LoadModelFromDiskReqProto;
class LoadModelFromDiskReqProtoDefaultTypeInternal;
extern LoadModelFromDiskReqProtoDefaultTypeInternal _LoadModelFromDiskReqProto_default_instance_;
class LoadModelFromDiskResultProto;
class LoadModelFromDiskResultProtoDefaultTypeInternal;
extern LoadModelFromDiskResultProtoDefaultTypeInternal _LoadModelFromDiskResultProto_default_instance_;
class LoadModelFromDiskRspProto;
class LoadModelFromDiskRspProtoDefaultTypeInternal;
extern LoadModelFromDiskRspProtoDefaultTypeInternal _LoadModelFromDiskRspProto_default_instance_;
class LoadWeightsActionProto;
class LoadWeightsActionProtoDefaultTypeInternal;
extern LoadWeightsActionProtoDefaultTypeInternal _LoadWeightsActionProto_default_instance_;
class LoadWeightsResultProto;
class LoadWeightsResultProtoDefaultTypeInternal;
extern LoadWeightsResultProtoDefaultTypeInternal _LoadWeightsResultProto_default_instance_;
class ModelInferenceReqProto;
class ModelInferenceReqProtoDefaultTypeInternal;
extern ModelInferenceReqProtoDefaultTypeInternal _ModelInferenceReqProto_default_instance_;
class ModelInferenceRspProto;
class ModelInferenceRspProtoDefaultTypeInternal;
extern ModelInferenceRspProtoDefaultTypeInternal _ModelInferenceRspProto_default_instance_;
class ModelInfoProto;
class ModelInfoProtoDefaultTypeInternal;
extern ModelInfoProtoDefaultTypeInternal _ModelInfoProto_default_instance_;
class ModelUploadReqProto;
class ModelUploadReqProtoDefaultTypeInternal;
extern ModelUploadReqProtoDefaultTypeInternal _ModelUploadReqProto_default_instance_;
class ModelUploadRspProto;
class ModelUploadRspProtoDefaultTypeInternal;
extern ModelUploadRspProtoDefaultTypeInternal _ModelUploadRspProto_default_instance_;
class RequestHeaderProto;
class RequestHeaderProtoDefaultTypeInternal;
extern RequestHeaderProtoDefaultTypeInternal _RequestHeaderProto_default_instance_;
class ResponseHeaderProto;
class ResponseHeaderProtoDefaultTypeInternal;
extern ResponseHeaderProtoDefaultTypeInternal _ResponseHeaderProto_default_instance_;
class TimingProto;
class TimingProtoDefaultTypeInternal;
extern TimingProtoDefaultTypeInternal _TimingProto_default_instance_;
class WorkerMemoryInfoProto;
class WorkerMemoryInfoProtoDefaultTypeInternal;
extern WorkerMemoryInfoProtoDefaultTypeInternal _WorkerMemoryInfoProto_default_instance_;
}  // namespace clockwork
PROTOBUF_NAMESPACE_OPEN
template<> ::clockwork::ClearCacheActionProto* Arena::CreateMaybeMessage<::clockwork::ClearCacheActionProto>(Arena*);
template<> ::clockwork::ClearCacheResultProto* Arena::CreateMaybeMessage<::clockwork::ClearCacheResultProto>(Arena*);
template<> ::clockwork::ClientModelInfoProto* Arena::CreateMaybeMessage<::clockwork::ClientModelInfoProto>(Arena*);
template<> ::clockwork::ErrorResultProto* Arena::CreateMaybeMessage<::clockwork::ErrorResultProto>(Arena*);
template<> ::clockwork::EvictReqProto* Arena::CreateMaybeMessage<::clockwork::EvictReqProto>(Arena*);
template<> ::clockwork::EvictRspProto* Arena::CreateMaybeMessage<::clockwork::EvictRspProto>(Arena*);
template<> ::clockwork::EvictWeightsActionProto* Arena::CreateMaybeMessage<::clockwork::EvictWeightsActionProto>(Arena*);
template<> ::clockwork::EvictWeightsResultProto* Arena::CreateMaybeMessage<::clockwork::EvictWeightsResultProto>(Arena*);
template<> ::clockwork::GPUInfoProto* Arena::CreateMaybeMessage<::clockwork::GPUInfoProto>(Arena*);
template<> ::clockwork::GetWorkerStateActionProto* Arena::CreateMaybeMessage<::clockwork::GetWorkerStateActionProto>(Arena*);
template<> ::clockwork::GetWorkerStateResultProto* Arena::CreateMaybeMessage<::clockwork::GetWorkerStateResultProto>(Arena*);
template<> ::clockwork::InferActionProto* Arena::CreateMaybeMessage<::clockwork::InferActionProto>(Arena*);
template<> ::clockwork::InferResultProto* Arena::CreateMaybeMessage<::clockwork::InferResultProto>(Arena*);
template<> ::clockwork::LSReqProto* Arena::CreateMaybeMessage<::clockwork::LSReqProto>(Arena*);
template<> ::clockwork::LSRspProto* Arena::CreateMaybeMessage<::clockwork::LSRspProto>(Arena*);
template<> ::clockwork::LoadModelFromDiskActionProto* Arena::CreateMaybeMessage<::clockwork::LoadModelFromDiskActionProto>(Arena*);
template<> ::clockwork::LoadModelFromDiskReqProto* Arena::CreateMaybeMessage<::clockwork::LoadModelFromDiskReqProto>(Arena*);
template<> ::clockwork::LoadModelFromDiskResultProto* Arena::CreateMaybeMessage<::clockwork::LoadModelFromDiskResultProto>(Arena*);
template<> ::clockwork::LoadModelFromDiskRspProto* Arena::CreateMaybeMessage<::clockwork::LoadModelFromDiskRspProto>(Arena*);
template<> ::clockwork::LoadWeightsActionProto* Arena::CreateMaybeMessage<::clockwork::LoadWeightsActionProto>(Arena*);
template<> ::clockwork::LoadWeightsResultProto* Arena::CreateMaybeMessage<::clockwork::LoadWeightsResultProto>(Arena*);
template<> ::clockwork::ModelInferenceReqProto* Arena::CreateMaybeMessage<::clockwork::ModelInferenceReqProto>(Arena*);
template<> ::clockwork::ModelInferenceRspProto* Arena::CreateMaybeMessage<::clockwork::ModelInferenceRspProto>(Arena*);
template<> ::clockwork::ModelInfoProto* Arena::CreateMaybeMessage<::clockwork::ModelInfoProto>(Arena*);
template<> ::clockwork::ModelUploadReqProto* Arena::CreateMaybeMessage<::clockwork::ModelUploadReqProto>(Arena*);
template<> ::clockwork::ModelUploadRspProto* Arena::CreateMaybeMessage<::clockwork::ModelUploadRspProto>(Arena*);
template<> ::clockwork::RequestHeaderProto* Arena::CreateMaybeMessage<::clockwork::RequestHeaderProto>(Arena*);
template<> ::clockwork::ResponseHeaderProto* Arena::CreateMaybeMessage<::clockwork::ResponseHeaderProto>(Arena*);
template<> ::clockwork::TimingProto* Arena::CreateMaybeMessage<::clockwork::TimingProto>(Arena*);
template<> ::clockwork::WorkerMemoryInfoProto* Arena::CreateMaybeMessage<::clockwork::WorkerMemoryInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clockwork {

enum RequestType : int {
  REQ_UPLOAD_MODEL = 1,
  REQ_INFERENCE = 2,
  REQ_LOAD_REMOTE_MODEL = 3,
  REQ_EVICT = 4,
  REQ_LS = 5,
  RSP_UPLOAD_MODEL = 101,
  RSP_INFERENCE = 102,
  RSP_LOAD_REMOTE_MODEL = 103,
  RSP_EVICT = 104,
  RSP_LS = 105
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = REQ_UPLOAD_MODEL;
constexpr RequestType RequestType_MAX = RSP_LS;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    const std::string& name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum ActionType : int {
  ACT_LOAD_MODEL_FROM_DISK = 1,
  ACT_LOAD_WEIGHTS = 2,
  ACT_INFER = 3,
  ACT_EVICT_WEIGHTS = 4,
  ACT_CLEAR_CACHE = 5,
  ACT_GET_WORKER_STATE = 6,
  RES_ERROR = 100,
  RES_LOAD_MODEL_FROM_DISK = 101,
  RES_LOAD_WEIGHTS = 102,
  RES_INFER = 103,
  RES_EVICT_WEIGHTS = 104,
  RES_CLEAR_CACHE = 105,
  RES_GET_WORKER_STATE = 106
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = ACT_LOAD_MODEL_FROM_DISK;
constexpr ActionType ActionType_MAX = RES_GET_WORKER_STATE;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    const std::string& name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class RequestHeaderProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.RequestHeaderProto) */ {
 public:
  inline RequestHeaderProto() : RequestHeaderProto(nullptr) {};
  virtual ~RequestHeaderProto();

  RequestHeaderProto(const RequestHeaderProto& from);
  RequestHeaderProto(RequestHeaderProto&& from) noexcept
    : RequestHeaderProto() {
    *this = ::std::move(from);
  }

  inline RequestHeaderProto& operator=(const RequestHeaderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeaderProto& operator=(RequestHeaderProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestHeaderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeaderProto* internal_default_instance() {
    return reinterpret_cast<const RequestHeaderProto*>(
               &_RequestHeaderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeaderProto& a, RequestHeaderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeaderProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeaderProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeaderProto* New() const final {
    return CreateMaybeMessage<RequestHeaderProto>(nullptr);
  }

  RequestHeaderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeaderProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestHeaderProto& from);
  void MergeFrom(const RequestHeaderProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeaderProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.RequestHeaderProto";
  }
  protected:
  explicit RequestHeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserRequestIdFieldNumber = 2,
  };
  // optional int32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 user_request_id = 2;
  bool has_user_request_id() const;
  private:
  bool _internal_has_user_request_id() const;
  public:
  void clear_user_request_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_request_id() const;
  void set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_request_id() const;
  void _internal_set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.RequestHeaderProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_request_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeaderProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ResponseHeaderProto) */ {
 public:
  inline ResponseHeaderProto() : ResponseHeaderProto(nullptr) {};
  virtual ~ResponseHeaderProto();

  ResponseHeaderProto(const ResponseHeaderProto& from);
  ResponseHeaderProto(ResponseHeaderProto&& from) noexcept
    : ResponseHeaderProto() {
    *this = ::std::move(from);
  }

  inline ResponseHeaderProto& operator=(const ResponseHeaderProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeaderProto& operator=(ResponseHeaderProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseHeaderProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeaderProto* internal_default_instance() {
    return reinterpret_cast<const ResponseHeaderProto*>(
               &_ResponseHeaderProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseHeaderProto& a, ResponseHeaderProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeaderProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseHeaderProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeaderProto* New() const final {
    return CreateMaybeMessage<ResponseHeaderProto>(nullptr);
  }

  ResponseHeaderProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeaderProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseHeaderProto& from);
  void MergeFrom(const ResponseHeaderProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeaderProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ResponseHeaderProto";
  }
  protected:
  explicit ResponseHeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kUserRequestIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional int32 user_request_id = 1;
  bool has_user_request_id() const;
  private:
  bool _internal_has_user_request_id() const;
  public:
  void clear_user_request_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_request_id() const;
  void set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_request_id() const;
  void _internal_set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ResponseHeaderProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ModelUploadReqProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ModelUploadReqProto) */ {
 public:
  inline ModelUploadReqProto() : ModelUploadReqProto(nullptr) {};
  virtual ~ModelUploadReqProto();

  ModelUploadReqProto(const ModelUploadReqProto& from);
  ModelUploadReqProto(ModelUploadReqProto&& from) noexcept
    : ModelUploadReqProto() {
    *this = ::std::move(from);
  }

  inline ModelUploadReqProto& operator=(const ModelUploadReqProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelUploadReqProto& operator=(ModelUploadReqProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelUploadReqProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelUploadReqProto* internal_default_instance() {
    return reinterpret_cast<const ModelUploadReqProto*>(
               &_ModelUploadReqProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelUploadReqProto& a, ModelUploadReqProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelUploadReqProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelUploadReqProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelUploadReqProto* New() const final {
    return CreateMaybeMessage<ModelUploadReqProto>(nullptr);
  }

  ModelUploadReqProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelUploadReqProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelUploadReqProto& from);
  void MergeFrom(const ModelUploadReqProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelUploadReqProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ModelUploadReqProto";
  }
  protected:
  explicit ModelUploadReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSoLenFieldNumber = 4,
    kClockworkLenFieldNumber = 5,
    kParamsLenFieldNumber = 6,
    kBatchsizeFieldNumber = 3,
  };
  // required .clockwork.RequestHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::RequestHeaderProto& header() const;
  ::clockwork::RequestHeaderProto* release_header();
  ::clockwork::RequestHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::RequestHeaderProto* header);
  private:
  const ::clockwork::RequestHeaderProto& _internal_header() const;
  ::clockwork::RequestHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::RequestHeaderProto* header);
  ::clockwork::RequestHeaderProto* unsafe_arena_release_header();

  // required uint64 so_len = 4;
  bool has_so_len() const;
  private:
  bool _internal_has_so_len() const;
  public:
  void clear_so_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 so_len() const;
  void set_so_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_so_len() const;
  void _internal_set_so_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 clockwork_len = 5;
  bool has_clockwork_len() const;
  private:
  bool _internal_has_clockwork_len() const;
  public:
  void clear_clockwork_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 clockwork_len() const;
  void set_clockwork_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clockwork_len() const;
  void _internal_set_clockwork_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 params_len = 6;
  bool has_params_len() const;
  private:
  bool _internal_has_params_len() const;
  public:
  void clear_params_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 params_len() const;
  void set_params_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_params_len() const;
  void _internal_set_params_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 batchsize = 3;
  bool has_batchsize() const;
  private:
  bool _internal_has_batchsize() const;
  public:
  void clear_batchsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 batchsize() const;
  void set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batchsize() const;
  void _internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ModelUploadReqProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::RequestHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::uint64 so_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clockwork_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 params_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batchsize_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ModelUploadRspProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ModelUploadRspProto) */ {
 public:
  inline ModelUploadRspProto() : ModelUploadRspProto(nullptr) {};
  virtual ~ModelUploadRspProto();

  ModelUploadRspProto(const ModelUploadRspProto& from);
  ModelUploadRspProto(ModelUploadRspProto&& from) noexcept
    : ModelUploadRspProto() {
    *this = ::std::move(from);
  }

  inline ModelUploadRspProto& operator=(const ModelUploadRspProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelUploadRspProto& operator=(ModelUploadRspProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelUploadRspProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelUploadRspProto* internal_default_instance() {
    return reinterpret_cast<const ModelUploadRspProto*>(
               &_ModelUploadRspProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelUploadRspProto& a, ModelUploadRspProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelUploadRspProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelUploadRspProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelUploadRspProto* New() const final {
    return CreateMaybeMessage<ModelUploadRspProto>(nullptr);
  }

  ModelUploadRspProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelUploadRspProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelUploadRspProto& from);
  void MergeFrom(const ModelUploadRspProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelUploadRspProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ModelUploadRspProto";
  }
  protected:
  explicit ModelUploadRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInputSizeFieldNumber = 3,
    kOutputSizeFieldNumber = 4,
    kModelIdFieldNumber = 2,
  };
  // required .clockwork.ResponseHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::ResponseHeaderProto& header() const;
  ::clockwork::ResponseHeaderProto* release_header();
  ::clockwork::ResponseHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::ResponseHeaderProto* header);
  private:
  const ::clockwork::ResponseHeaderProto& _internal_header() const;
  ::clockwork::ResponseHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::ResponseHeaderProto* header);
  ::clockwork::ResponseHeaderProto* unsafe_arena_release_header();

  // required uint64 input_size = 3;
  bool has_input_size() const;
  private:
  bool _internal_has_input_size() const;
  public:
  void clear_input_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size() const;
  void set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_size() const;
  void _internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 output_size = 4;
  bool has_output_size() const;
  private:
  bool _internal_has_output_size() const;
  public:
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ModelUploadRspProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::ResponseHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ModelInferenceReqProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ModelInferenceReqProto) */ {
 public:
  inline ModelInferenceReqProto() : ModelInferenceReqProto(nullptr) {};
  virtual ~ModelInferenceReqProto();

  ModelInferenceReqProto(const ModelInferenceReqProto& from);
  ModelInferenceReqProto(ModelInferenceReqProto&& from) noexcept
    : ModelInferenceReqProto() {
    *this = ::std::move(from);
  }

  inline ModelInferenceReqProto& operator=(const ModelInferenceReqProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInferenceReqProto& operator=(ModelInferenceReqProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelInferenceReqProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInferenceReqProto* internal_default_instance() {
    return reinterpret_cast<const ModelInferenceReqProto*>(
               &_ModelInferenceReqProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelInferenceReqProto& a, ModelInferenceReqProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInferenceReqProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelInferenceReqProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelInferenceReqProto* New() const final {
    return CreateMaybeMessage<ModelInferenceReqProto>(nullptr);
  }

  ModelInferenceReqProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelInferenceReqProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelInferenceReqProto& from);
  void MergeFrom(const ModelInferenceReqProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInferenceReqProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ModelInferenceReqProto";
  }
  protected:
  explicit ModelInferenceReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kBatchSizeFieldNumber = 3,
    kSloFactorFieldNumber = 4,
  };
  // required .clockwork.RequestHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::RequestHeaderProto& header() const;
  ::clockwork::RequestHeaderProto* release_header();
  ::clockwork::RequestHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::RequestHeaderProto* header);
  private:
  const ::clockwork::RequestHeaderProto& _internal_header() const;
  ::clockwork::RequestHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::RequestHeaderProto* header);
  ::clockwork::RequestHeaderProto* unsafe_arena_release_header();

  // required uint32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 batch_size = 3;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float slo_factor = 4;
  bool has_slo_factor() const;
  private:
  bool _internal_has_slo_factor() const;
  public:
  void clear_slo_factor();
  float slo_factor() const;
  void set_slo_factor(float value);
  private:
  float _internal_slo_factor() const;
  void _internal_set_slo_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ModelInferenceReqProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::RequestHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  float slo_factor_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ModelInferenceRspProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ModelInferenceRspProto) */ {
 public:
  inline ModelInferenceRspProto() : ModelInferenceRspProto(nullptr) {};
  virtual ~ModelInferenceRspProto();

  ModelInferenceRspProto(const ModelInferenceRspProto& from);
  ModelInferenceRspProto(ModelInferenceRspProto&& from) noexcept
    : ModelInferenceRspProto() {
    *this = ::std::move(from);
  }

  inline ModelInferenceRspProto& operator=(const ModelInferenceRspProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInferenceRspProto& operator=(ModelInferenceRspProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelInferenceRspProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInferenceRspProto* internal_default_instance() {
    return reinterpret_cast<const ModelInferenceRspProto*>(
               &_ModelInferenceRspProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModelInferenceRspProto& a, ModelInferenceRspProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInferenceRspProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelInferenceRspProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelInferenceRspProto* New() const final {
    return CreateMaybeMessage<ModelInferenceRspProto>(nullptr);
  }

  ModelInferenceRspProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelInferenceRspProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelInferenceRspProto& from);
  void MergeFrom(const ModelInferenceRspProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInferenceRspProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ModelInferenceRspProto";
  }
  protected:
  explicit ModelInferenceRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kBatchSizeFieldNumber = 3,
  };
  // required .clockwork.ResponseHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::ResponseHeaderProto& header() const;
  ::clockwork::ResponseHeaderProto* release_header();
  ::clockwork::ResponseHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::ResponseHeaderProto* header);
  private:
  const ::clockwork::ResponseHeaderProto& _internal_header() const;
  ::clockwork::ResponseHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::ResponseHeaderProto* header);
  ::clockwork::ResponseHeaderProto* unsafe_arena_release_header();

  // required uint32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 batch_size = 3;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ModelInferenceRspProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::ResponseHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class EvictReqProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.EvictReqProto) */ {
 public:
  inline EvictReqProto() : EvictReqProto(nullptr) {};
  virtual ~EvictReqProto();

  EvictReqProto(const EvictReqProto& from);
  EvictReqProto(EvictReqProto&& from) noexcept
    : EvictReqProto() {
    *this = ::std::move(from);
  }

  inline EvictReqProto& operator=(const EvictReqProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvictReqProto& operator=(EvictReqProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvictReqProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvictReqProto* internal_default_instance() {
    return reinterpret_cast<const EvictReqProto*>(
               &_EvictReqProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EvictReqProto& a, EvictReqProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EvictReqProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvictReqProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvictReqProto* New() const final {
    return CreateMaybeMessage<EvictReqProto>(nullptr);
  }

  EvictReqProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvictReqProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvictReqProto& from);
  void MergeFrom(const EvictReqProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvictReqProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.EvictReqProto";
  }
  protected:
  explicit EvictReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // required .clockwork.RequestHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::RequestHeaderProto& header() const;
  ::clockwork::RequestHeaderProto* release_header();
  ::clockwork::RequestHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::RequestHeaderProto* header);
  private:
  const ::clockwork::RequestHeaderProto& _internal_header() const;
  ::clockwork::RequestHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::RequestHeaderProto* header);
  ::clockwork::RequestHeaderProto* unsafe_arena_release_header();

  // required uint32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.EvictReqProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::RequestHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class EvictRspProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.EvictRspProto) */ {
 public:
  inline EvictRspProto() : EvictRspProto(nullptr) {};
  virtual ~EvictRspProto();

  EvictRspProto(const EvictRspProto& from);
  EvictRspProto(EvictRspProto&& from) noexcept
    : EvictRspProto() {
    *this = ::std::move(from);
  }

  inline EvictRspProto& operator=(const EvictRspProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvictRspProto& operator=(EvictRspProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvictRspProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvictRspProto* internal_default_instance() {
    return reinterpret_cast<const EvictRspProto*>(
               &_EvictRspProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EvictRspProto& a, EvictRspProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EvictRspProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvictRspProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvictRspProto* New() const final {
    return CreateMaybeMessage<EvictRspProto>(nullptr);
  }

  EvictRspProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvictRspProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvictRspProto& from);
  void MergeFrom(const EvictRspProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvictRspProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.EvictRspProto";
  }
  protected:
  explicit EvictRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // required .clockwork.ResponseHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::ResponseHeaderProto& header() const;
  ::clockwork::ResponseHeaderProto* release_header();
  ::clockwork::ResponseHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::ResponseHeaderProto* header);
  private:
  const ::clockwork::ResponseHeaderProto& _internal_header() const;
  ::clockwork::ResponseHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::ResponseHeaderProto* header);
  ::clockwork::ResponseHeaderProto* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:clockwork.EvictRspProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::ResponseHeaderProto* header_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LoadModelFromDiskReqProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LoadModelFromDiskReqProto) */ {
 public:
  inline LoadModelFromDiskReqProto() : LoadModelFromDiskReqProto(nullptr) {};
  virtual ~LoadModelFromDiskReqProto();

  LoadModelFromDiskReqProto(const LoadModelFromDiskReqProto& from);
  LoadModelFromDiskReqProto(LoadModelFromDiskReqProto&& from) noexcept
    : LoadModelFromDiskReqProto() {
    *this = ::std::move(from);
  }

  inline LoadModelFromDiskReqProto& operator=(const LoadModelFromDiskReqProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelFromDiskReqProto& operator=(LoadModelFromDiskReqProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadModelFromDiskReqProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadModelFromDiskReqProto* internal_default_instance() {
    return reinterpret_cast<const LoadModelFromDiskReqProto*>(
               &_LoadModelFromDiskReqProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoadModelFromDiskReqProto& a, LoadModelFromDiskReqProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelFromDiskReqProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelFromDiskReqProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadModelFromDiskReqProto* New() const final {
    return CreateMaybeMessage<LoadModelFromDiskReqProto>(nullptr);
  }

  LoadModelFromDiskReqProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadModelFromDiskReqProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadModelFromDiskReqProto& from);
  void MergeFrom(const LoadModelFromDiskReqProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelFromDiskReqProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LoadModelFromDiskReqProto";
  }
  protected:
  explicit LoadModelFromDiskReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemotePathFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kNoOfCopiesFieldNumber = 3,
  };
  // required string remote_path = 2;
  bool has_remote_path() const;
  private:
  bool _internal_has_remote_path() const;
  public:
  void clear_remote_path();
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remote_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remote_path(
      std::string* remote_path);
  private:
  const std::string& _internal_remote_path() const;
  void _internal_set_remote_path(const std::string& value);
  std::string* _internal_mutable_remote_path();
  public:

  // required .clockwork.RequestHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::RequestHeaderProto& header() const;
  ::clockwork::RequestHeaderProto* release_header();
  ::clockwork::RequestHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::RequestHeaderProto* header);
  private:
  const ::clockwork::RequestHeaderProto& _internal_header() const;
  ::clockwork::RequestHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::RequestHeaderProto* header);
  ::clockwork::RequestHeaderProto* unsafe_arena_release_header();

  // required int32 no_of_copies = 3;
  bool has_no_of_copies() const;
  private:
  bool _internal_has_no_of_copies() const;
  public:
  void clear_no_of_copies();
  ::PROTOBUF_NAMESPACE_ID::int32 no_of_copies() const;
  void set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_no_of_copies() const;
  void _internal_set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.LoadModelFromDiskReqProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::clockwork::RequestHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_of_copies_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LoadModelFromDiskRspProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LoadModelFromDiskRspProto) */ {
 public:
  inline LoadModelFromDiskRspProto() : LoadModelFromDiskRspProto(nullptr) {};
  virtual ~LoadModelFromDiskRspProto();

  LoadModelFromDiskRspProto(const LoadModelFromDiskRspProto& from);
  LoadModelFromDiskRspProto(LoadModelFromDiskRspProto&& from) noexcept
    : LoadModelFromDiskRspProto() {
    *this = ::std::move(from);
  }

  inline LoadModelFromDiskRspProto& operator=(const LoadModelFromDiskRspProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelFromDiskRspProto& operator=(LoadModelFromDiskRspProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadModelFromDiskRspProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadModelFromDiskRspProto* internal_default_instance() {
    return reinterpret_cast<const LoadModelFromDiskRspProto*>(
               &_LoadModelFromDiskRspProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LoadModelFromDiskRspProto& a, LoadModelFromDiskRspProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelFromDiskRspProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelFromDiskRspProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadModelFromDiskRspProto* New() const final {
    return CreateMaybeMessage<LoadModelFromDiskRspProto>(nullptr);
  }

  LoadModelFromDiskRspProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadModelFromDiskRspProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadModelFromDiskRspProto& from);
  void MergeFrom(const LoadModelFromDiskRspProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelFromDiskRspProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LoadModelFromDiskRspProto";
  }
  protected:
  explicit LoadModelFromDiskRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInputSizeFieldNumber = 3,
    kModelIdFieldNumber = 2,
    kCopiesCreatedFieldNumber = 5,
    kOutputSizeFieldNumber = 4,
  };
  // required .clockwork.ResponseHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::ResponseHeaderProto& header() const;
  ::clockwork::ResponseHeaderProto* release_header();
  ::clockwork::ResponseHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::ResponseHeaderProto* header);
  private:
  const ::clockwork::ResponseHeaderProto& _internal_header() const;
  ::clockwork::ResponseHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::ResponseHeaderProto* header);
  ::clockwork::ResponseHeaderProto* unsafe_arena_release_header();

  // required uint64 input_size = 3;
  bool has_input_size() const;
  private:
  bool _internal_has_input_size() const;
  public:
  void clear_input_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size() const;
  void set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_size() const;
  void _internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 copies_created = 5;
  bool has_copies_created() const;
  private:
  bool _internal_has_copies_created() const;
  public:
  void clear_copies_created();
  ::PROTOBUF_NAMESPACE_ID::int32 copies_created() const;
  void set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_copies_created() const;
  void _internal_set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 output_size = 4;
  bool has_output_size() const;
  private:
  bool _internal_has_output_size() const;
  public:
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.LoadModelFromDiskRspProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::ResponseHeaderProto* header_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 copies_created_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LSReqProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LSReqProto) */ {
 public:
  inline LSReqProto() : LSReqProto(nullptr) {};
  virtual ~LSReqProto();

  LSReqProto(const LSReqProto& from);
  LSReqProto(LSReqProto&& from) noexcept
    : LSReqProto() {
    *this = ::std::move(from);
  }

  inline LSReqProto& operator=(const LSReqProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LSReqProto& operator=(LSReqProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LSReqProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LSReqProto* internal_default_instance() {
    return reinterpret_cast<const LSReqProto*>(
               &_LSReqProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LSReqProto& a, LSReqProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LSReqProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LSReqProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LSReqProto* New() const final {
    return CreateMaybeMessage<LSReqProto>(nullptr);
  }

  LSReqProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LSReqProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LSReqProto& from);
  void MergeFrom(const LSReqProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSReqProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LSReqProto";
  }
  protected:
  explicit LSReqProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // required .clockwork.RequestHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::RequestHeaderProto& header() const;
  ::clockwork::RequestHeaderProto* release_header();
  ::clockwork::RequestHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::RequestHeaderProto* header);
  private:
  const ::clockwork::RequestHeaderProto& _internal_header() const;
  ::clockwork::RequestHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::RequestHeaderProto* header);
  ::clockwork::RequestHeaderProto* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:clockwork.LSReqProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::RequestHeaderProto* header_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ClientModelInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ClientModelInfoProto) */ {
 public:
  inline ClientModelInfoProto() : ClientModelInfoProto(nullptr) {};
  virtual ~ClientModelInfoProto();

  ClientModelInfoProto(const ClientModelInfoProto& from);
  ClientModelInfoProto(ClientModelInfoProto&& from) noexcept
    : ClientModelInfoProto() {
    *this = ::std::move(from);
  }

  inline ClientModelInfoProto& operator=(const ClientModelInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientModelInfoProto& operator=(ClientModelInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientModelInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientModelInfoProto* internal_default_instance() {
    return reinterpret_cast<const ClientModelInfoProto*>(
               &_ClientModelInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClientModelInfoProto& a, ClientModelInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientModelInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientModelInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientModelInfoProto* New() const final {
    return CreateMaybeMessage<ClientModelInfoProto>(nullptr);
  }

  ClientModelInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientModelInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientModelInfoProto& from);
  void MergeFrom(const ClientModelInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientModelInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ClientModelInfoProto";
  }
  protected:
  explicit ClientModelInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemotePathFieldNumber = 2,
    kInputSizeFieldNumber = 3,
    kOutputSizeFieldNumber = 4,
    kModelIdFieldNumber = 1,
  };
  // required string remote_path = 2;
  bool has_remote_path() const;
  private:
  bool _internal_has_remote_path() const;
  public:
  void clear_remote_path();
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remote_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remote_path(
      std::string* remote_path);
  private:
  const std::string& _internal_remote_path() const;
  void _internal_set_remote_path(const std::string& value);
  std::string* _internal_mutable_remote_path();
  public:

  // required uint64 input_size = 3;
  bool has_input_size() const;
  private:
  bool _internal_has_input_size() const;
  public:
  void clear_input_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size() const;
  void set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_size() const;
  void _internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 output_size = 4;
  bool has_output_size() const;
  private:
  bool _internal_has_output_size() const;
  public:
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 model_id = 1;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ClientModelInfoProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 model_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LSRspProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LSRspProto) */ {
 public:
  inline LSRspProto() : LSRspProto(nullptr) {};
  virtual ~LSRspProto();

  LSRspProto(const LSRspProto& from);
  LSRspProto(LSRspProto&& from) noexcept
    : LSRspProto() {
    *this = ::std::move(from);
  }

  inline LSRspProto& operator=(const LSRspProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LSRspProto& operator=(LSRspProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LSRspProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LSRspProto* internal_default_instance() {
    return reinterpret_cast<const LSRspProto*>(
               &_LSRspProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LSRspProto& a, LSRspProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LSRspProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LSRspProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LSRspProto* New() const final {
    return CreateMaybeMessage<LSRspProto>(nullptr);
  }

  LSRspProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LSRspProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LSRspProto& from);
  void MergeFrom(const LSRspProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSRspProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LSRspProto";
  }
  protected:
  explicit LSRspProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .clockwork.ClientModelInfoProto models = 2;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clockwork::ClientModelInfoProto* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ClientModelInfoProto >*
      mutable_models();
  private:
  const ::clockwork::ClientModelInfoProto& _internal_models(int index) const;
  ::clockwork::ClientModelInfoProto* _internal_add_models();
  public:
  const ::clockwork::ClientModelInfoProto& models(int index) const;
  ::clockwork::ClientModelInfoProto* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ClientModelInfoProto >&
      models() const;

  // required .clockwork.ResponseHeaderProto header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::clockwork::ResponseHeaderProto& header() const;
  ::clockwork::ResponseHeaderProto* release_header();
  ::clockwork::ResponseHeaderProto* mutable_header();
  void set_allocated_header(::clockwork::ResponseHeaderProto* header);
  private:
  const ::clockwork::ResponseHeaderProto& _internal_header() const;
  ::clockwork::ResponseHeaderProto* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::clockwork::ResponseHeaderProto* header);
  ::clockwork::ResponseHeaderProto* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:clockwork.LSRspProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ClientModelInfoProto > models_;
  ::clockwork::ResponseHeaderProto* header_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ErrorResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ErrorResultProto) */ {
 public:
  inline ErrorResultProto() : ErrorResultProto(nullptr) {};
  virtual ~ErrorResultProto();

  ErrorResultProto(const ErrorResultProto& from);
  ErrorResultProto(ErrorResultProto&& from) noexcept
    : ErrorResultProto() {
    *this = ::std::move(from);
  }

  inline ErrorResultProto& operator=(const ErrorResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResultProto& operator=(ErrorResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorResultProto* internal_default_instance() {
    return reinterpret_cast<const ErrorResultProto*>(
               &_ErrorResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ErrorResultProto& a, ErrorResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorResultProto* New() const final {
    return CreateMaybeMessage<ErrorResultProto>(nullptr);
  }

  ErrorResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorResultProto& from);
  void MergeFrom(const ErrorResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ErrorResultProto";
  }
  protected:
  explicit ErrorResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kActionIdFieldNumber = 1,
    kActionTypeFieldNumber = 2,
    kActionReceivedFieldNumber = 5,
    kResultSentFieldNumber = 6,
    kStatusFieldNumber = 3,
  };
  // required string message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 action_type = 2;
  bool has_action_type() const;
  private:
  bool _internal_has_action_type() const;
  public:
  void clear_action_type();
  ::PROTOBUF_NAMESPACE_ID::int32 action_type() const;
  void set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_type() const;
  void _internal_set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed64 action_received = 5;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 result_sent = 6;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ErrorResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class TimingProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.TimingProto) */ {
 public:
  inline TimingProto() : TimingProto(nullptr) {};
  virtual ~TimingProto();

  TimingProto(const TimingProto& from);
  TimingProto(TimingProto&& from) noexcept
    : TimingProto() {
    *this = ::std::move(from);
  }

  inline TimingProto& operator=(const TimingProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimingProto& operator=(TimingProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimingProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimingProto* internal_default_instance() {
    return reinterpret_cast<const TimingProto*>(
               &_TimingProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TimingProto& a, TimingProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TimingProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimingProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimingProto* New() const final {
    return CreateMaybeMessage<TimingProto>(nullptr);
  }

  TimingProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimingProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimingProto& from);
  void MergeFrom(const TimingProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimingProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.TimingProto";
  }
  protected:
  explicit TimingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // required fixed64 begin = 1;
  bool has_begin() const;
  private:
  bool _internal_has_begin() const;
  public:
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.TimingProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LoadModelFromDiskActionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LoadModelFromDiskActionProto) */ {
 public:
  inline LoadModelFromDiskActionProto() : LoadModelFromDiskActionProto(nullptr) {};
  virtual ~LoadModelFromDiskActionProto();

  LoadModelFromDiskActionProto(const LoadModelFromDiskActionProto& from);
  LoadModelFromDiskActionProto(LoadModelFromDiskActionProto&& from) noexcept
    : LoadModelFromDiskActionProto() {
    *this = ::std::move(from);
  }

  inline LoadModelFromDiskActionProto& operator=(const LoadModelFromDiskActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelFromDiskActionProto& operator=(LoadModelFromDiskActionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadModelFromDiskActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadModelFromDiskActionProto* internal_default_instance() {
    return reinterpret_cast<const LoadModelFromDiskActionProto*>(
               &_LoadModelFromDiskActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LoadModelFromDiskActionProto& a, LoadModelFromDiskActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelFromDiskActionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelFromDiskActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadModelFromDiskActionProto* New() const final {
    return CreateMaybeMessage<LoadModelFromDiskActionProto>(nullptr);
  }

  LoadModelFromDiskActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadModelFromDiskActionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadModelFromDiskActionProto& from);
  void MergeFrom(const LoadModelFromDiskActionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelFromDiskActionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LoadModelFromDiskActionProto";
  }
  protected:
  explicit LoadModelFromDiskActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelPathFieldNumber = 3,
    kActionIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kEarliestFieldNumber = 4,
    kLatestFieldNumber = 5,
    kNoOfCopiesFieldNumber = 6,
    kMaxBatchSizeFieldNumber = 7,
    kMaxExecDurationFieldNumber = 8,
  };
  // required string model_path = 3;
  bool has_model_path() const;
  private:
  bool _internal_has_model_path() const;
  public:
  void clear_model_path();
  const std::string& model_path() const;
  void set_model_path(const std::string& value);
  void set_model_path(std::string&& value);
  void set_model_path(const char* value);
  void set_model_path(const char* value, size_t size);
  std::string* mutable_model_path();
  std::string* release_model_path();
  void set_allocated_model_path(std::string* model_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_path(
      std::string* model_path);
  private:
  const std::string& _internal_model_path() const;
  void _internal_set_model_path(const std::string& value);
  std::string* _internal_mutable_model_path();
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed64 earliest = 4;
  bool has_earliest() const;
  private:
  bool _internal_has_earliest() const;
  public:
  void clear_earliest();
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest() const;
  void set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_earliest() const;
  void _internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 latest = 5;
  bool has_latest() const;
  private:
  bool _internal_has_latest() const;
  public:
  void clear_latest();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest() const;
  void set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest() const;
  void _internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 no_of_copies = 6;
  bool has_no_of_copies() const;
  private:
  bool _internal_has_no_of_copies() const;
  public:
  void clear_no_of_copies();
  ::PROTOBUF_NAMESPACE_ID::int32 no_of_copies() const;
  void set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_no_of_copies() const;
  void _internal_set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 max_batch_size = 7;
  bool has_max_batch_size() const;
  private:
  bool _internal_has_max_batch_size() const;
  public:
  void clear_max_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_batch_size() const;
  void set_max_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_batch_size() const;
  void _internal_set_max_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 max_exec_duration = 8;
  bool has_max_exec_duration() const;
  private:
  bool _internal_has_max_exec_duration() const;
  public:
  void clear_max_exec_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_exec_duration() const;
  void set_max_exec_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_exec_duration() const;
  void _internal_set_max_exec_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.LoadModelFromDiskActionProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_of_copies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_exec_duration_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LoadModelFromDiskResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LoadModelFromDiskResultProto) */ {
 public:
  inline LoadModelFromDiskResultProto() : LoadModelFromDiskResultProto(nullptr) {};
  virtual ~LoadModelFromDiskResultProto();

  LoadModelFromDiskResultProto(const LoadModelFromDiskResultProto& from);
  LoadModelFromDiskResultProto(LoadModelFromDiskResultProto&& from) noexcept
    : LoadModelFromDiskResultProto() {
    *this = ::std::move(from);
  }

  inline LoadModelFromDiskResultProto& operator=(const LoadModelFromDiskResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadModelFromDiskResultProto& operator=(LoadModelFromDiskResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadModelFromDiskResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadModelFromDiskResultProto* internal_default_instance() {
    return reinterpret_cast<const LoadModelFromDiskResultProto*>(
               &_LoadModelFromDiskResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LoadModelFromDiskResultProto& a, LoadModelFromDiskResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadModelFromDiskResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadModelFromDiskResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadModelFromDiskResultProto* New() const final {
    return CreateMaybeMessage<LoadModelFromDiskResultProto>(nullptr);
  }

  LoadModelFromDiskResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadModelFromDiskResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadModelFromDiskResultProto& from);
  void MergeFrom(const LoadModelFromDiskResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadModelFromDiskResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LoadModelFromDiskResultProto";
  }
  protected:
  explicit LoadModelFromDiskResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedBatchSizesFieldNumber = 5,
    kBatchSizeExecTimesNanosFieldNumber = 9,
    kTimingFieldNumber = 2,
    kInputSizeFieldNumber = 3,
    kOutputSizeFieldNumber = 4,
    kActionIdFieldNumber = 1,
    kNumWeightsPagesFieldNumber = 7,
    kWeightsSizeInCacheFieldNumber = 6,
    kWeightsLoadTimeNanosFieldNumber = 8,
    kActionReceivedFieldNumber = 11,
    kResultSentFieldNumber = 12,
    kCopiesCreatedFieldNumber = 10,
  };
  // repeated uint32 supported_batch_sizes = 5;
  int supported_batch_sizes_size() const;
  private:
  int _internal_supported_batch_sizes_size() const;
  public:
  void clear_supported_batch_sizes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_supported_batch_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_supported_batch_sizes() const;
  void _internal_add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_supported_batch_sizes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 supported_batch_sizes(int index) const;
  void set_supported_batch_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      supported_batch_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_supported_batch_sizes();

  // repeated uint64 batch_size_exec_times_nanos = 9;
  int batch_size_exec_times_nanos_size() const;
  private:
  int _internal_batch_size_exec_times_nanos_size() const;
  public:
  void clear_batch_size_exec_times_nanos();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batch_size_exec_times_nanos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_batch_size_exec_times_nanos() const;
  void _internal_add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_batch_size_exec_times_nanos();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_size_exec_times_nanos(int index) const;
  void set_batch_size_exec_times_nanos(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      batch_size_exec_times_nanos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_batch_size_exec_times_nanos();

  // required .clockwork.TimingProto timing = 2;
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::clockwork::TimingProto& timing() const;
  ::clockwork::TimingProto* release_timing();
  ::clockwork::TimingProto* mutable_timing();
  void set_allocated_timing(::clockwork::TimingProto* timing);
  private:
  const ::clockwork::TimingProto& _internal_timing() const;
  ::clockwork::TimingProto* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::clockwork::TimingProto* timing);
  ::clockwork::TimingProto* unsafe_arena_release_timing();

  // required uint64 input_size = 3;
  bool has_input_size() const;
  private:
  bool _internal_has_input_size() const;
  public:
  void clear_input_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size() const;
  void set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_size() const;
  void _internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 output_size = 4;
  bool has_output_size() const;
  private:
  bool _internal_has_output_size() const;
  public:
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 num_weights_pages = 7;
  bool has_num_weights_pages() const;
  private:
  bool _internal_has_num_weights_pages() const;
  public:
  void clear_num_weights_pages();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_weights_pages() const;
  void set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_weights_pages() const;
  void _internal_set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 weights_size_in_cache = 6;
  bool has_weights_size_in_cache() const;
  private:
  bool _internal_has_weights_size_in_cache() const;
  public:
  void clear_weights_size_in_cache();
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_size_in_cache() const;
  void set_weights_size_in_cache(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights_size_in_cache() const;
  void _internal_set_weights_size_in_cache(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 weights_load_time_nanos = 8;
  bool has_weights_load_time_nanos() const;
  private:
  bool _internal_has_weights_load_time_nanos() const;
  public:
  void clear_weights_load_time_nanos();
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_load_time_nanos() const;
  void set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights_load_time_nanos() const;
  void _internal_set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 action_received = 11;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 result_sent = 12;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 copies_created = 10;
  bool has_copies_created() const;
  private:
  bool _internal_has_copies_created() const;
  public:
  void clear_copies_created();
  ::PROTOBUF_NAMESPACE_ID::int32 copies_created() const;
  void set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_copies_created() const;
  void _internal_set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.LoadModelFromDiskResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > supported_batch_sizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > batch_size_exec_times_nanos_;
  ::clockwork::TimingProto* timing_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_weights_pages_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_size_in_cache_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_load_time_nanos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 copies_created_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LoadWeightsActionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LoadWeightsActionProto) */ {
 public:
  inline LoadWeightsActionProto() : LoadWeightsActionProto(nullptr) {};
  virtual ~LoadWeightsActionProto();

  LoadWeightsActionProto(const LoadWeightsActionProto& from);
  LoadWeightsActionProto(LoadWeightsActionProto&& from) noexcept
    : LoadWeightsActionProto() {
    *this = ::std::move(from);
  }

  inline LoadWeightsActionProto& operator=(const LoadWeightsActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadWeightsActionProto& operator=(LoadWeightsActionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadWeightsActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadWeightsActionProto* internal_default_instance() {
    return reinterpret_cast<const LoadWeightsActionProto*>(
               &_LoadWeightsActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LoadWeightsActionProto& a, LoadWeightsActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadWeightsActionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadWeightsActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadWeightsActionProto* New() const final {
    return CreateMaybeMessage<LoadWeightsActionProto>(nullptr);
  }

  LoadWeightsActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadWeightsActionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadWeightsActionProto& from);
  void MergeFrom(const LoadWeightsActionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadWeightsActionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LoadWeightsActionProto";
  }
  protected:
  explicit LoadWeightsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kEarliestFieldNumber = 4,
    kLatestFieldNumber = 5,
    kExpectedDurationFieldNumber = 6,
    kGpuIdFieldNumber = 3,
  };
  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed64 earliest = 4;
  bool has_earliest() const;
  private:
  bool _internal_has_earliest() const;
  public:
  void clear_earliest();
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest() const;
  void set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_earliest() const;
  void _internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 latest = 5;
  bool has_latest() const;
  private:
  bool _internal_has_latest() const;
  public:
  void clear_latest();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest() const;
  void set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest() const;
  void _internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 expected_duration = 6;
  bool has_expected_duration() const;
  private:
  bool _internal_has_expected_duration() const;
  public:
  void clear_expected_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_duration() const;
  void set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expected_duration() const;
  void _internal_set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 gpu_id = 3;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.LoadWeightsActionProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class LoadWeightsResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.LoadWeightsResultProto) */ {
 public:
  inline LoadWeightsResultProto() : LoadWeightsResultProto(nullptr) {};
  virtual ~LoadWeightsResultProto();

  LoadWeightsResultProto(const LoadWeightsResultProto& from);
  LoadWeightsResultProto(LoadWeightsResultProto&& from) noexcept
    : LoadWeightsResultProto() {
    *this = ::std::move(from);
  }

  inline LoadWeightsResultProto& operator=(const LoadWeightsResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadWeightsResultProto& operator=(LoadWeightsResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadWeightsResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadWeightsResultProto* internal_default_instance() {
    return reinterpret_cast<const LoadWeightsResultProto*>(
               &_LoadWeightsResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(LoadWeightsResultProto& a, LoadWeightsResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadWeightsResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadWeightsResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadWeightsResultProto* New() const final {
    return CreateMaybeMessage<LoadWeightsResultProto>(nullptr);
  }

  LoadWeightsResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadWeightsResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadWeightsResultProto& from);
  void MergeFrom(const LoadWeightsResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadWeightsResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.LoadWeightsResultProto";
  }
  protected:
  explicit LoadWeightsResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimingFieldNumber = 2,
    kActionReceivedFieldNumber = 3,
    kResultSentFieldNumber = 4,
    kActionIdFieldNumber = 1,
  };
  // required .clockwork.TimingProto timing = 2;
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::clockwork::TimingProto& timing() const;
  ::clockwork::TimingProto* release_timing();
  ::clockwork::TimingProto* mutable_timing();
  void set_allocated_timing(::clockwork::TimingProto* timing);
  private:
  const ::clockwork::TimingProto& _internal_timing() const;
  ::clockwork::TimingProto* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::clockwork::TimingProto* timing);
  ::clockwork::TimingProto* unsafe_arena_release_timing();

  // required fixed64 action_received = 3;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 result_sent = 4;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.LoadWeightsResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::TimingProto* timing_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class EvictWeightsActionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.EvictWeightsActionProto) */ {
 public:
  inline EvictWeightsActionProto() : EvictWeightsActionProto(nullptr) {};
  virtual ~EvictWeightsActionProto();

  EvictWeightsActionProto(const EvictWeightsActionProto& from);
  EvictWeightsActionProto(EvictWeightsActionProto&& from) noexcept
    : EvictWeightsActionProto() {
    *this = ::std::move(from);
  }

  inline EvictWeightsActionProto& operator=(const EvictWeightsActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvictWeightsActionProto& operator=(EvictWeightsActionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvictWeightsActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvictWeightsActionProto* internal_default_instance() {
    return reinterpret_cast<const EvictWeightsActionProto*>(
               &_EvictWeightsActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EvictWeightsActionProto& a, EvictWeightsActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EvictWeightsActionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvictWeightsActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvictWeightsActionProto* New() const final {
    return CreateMaybeMessage<EvictWeightsActionProto>(nullptr);
  }

  EvictWeightsActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvictWeightsActionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvictWeightsActionProto& from);
  void MergeFrom(const EvictWeightsActionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvictWeightsActionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.EvictWeightsActionProto";
  }
  protected:
  explicit EvictWeightsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kEarliestFieldNumber = 4,
    kLatestFieldNumber = 5,
    kGpuIdFieldNumber = 3,
  };
  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed64 earliest = 4;
  bool has_earliest() const;
  private:
  bool _internal_has_earliest() const;
  public:
  void clear_earliest();
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest() const;
  void set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_earliest() const;
  void _internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 latest = 5;
  bool has_latest() const;
  private:
  bool _internal_has_latest() const;
  public:
  void clear_latest();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest() const;
  void set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest() const;
  void _internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 gpu_id = 3;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.EvictWeightsActionProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class EvictWeightsResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.EvictWeightsResultProto) */ {
 public:
  inline EvictWeightsResultProto() : EvictWeightsResultProto(nullptr) {};
  virtual ~EvictWeightsResultProto();

  EvictWeightsResultProto(const EvictWeightsResultProto& from);
  EvictWeightsResultProto(EvictWeightsResultProto&& from) noexcept
    : EvictWeightsResultProto() {
    *this = ::std::move(from);
  }

  inline EvictWeightsResultProto& operator=(const EvictWeightsResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvictWeightsResultProto& operator=(EvictWeightsResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvictWeightsResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvictWeightsResultProto* internal_default_instance() {
    return reinterpret_cast<const EvictWeightsResultProto*>(
               &_EvictWeightsResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(EvictWeightsResultProto& a, EvictWeightsResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EvictWeightsResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvictWeightsResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvictWeightsResultProto* New() const final {
    return CreateMaybeMessage<EvictWeightsResultProto>(nullptr);
  }

  EvictWeightsResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvictWeightsResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvictWeightsResultProto& from);
  void MergeFrom(const EvictWeightsResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvictWeightsResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.EvictWeightsResultProto";
  }
  protected:
  explicit EvictWeightsResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimingFieldNumber = 2,
    kActionReceivedFieldNumber = 3,
    kResultSentFieldNumber = 4,
    kActionIdFieldNumber = 1,
  };
  // required .clockwork.TimingProto timing = 2;
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::clockwork::TimingProto& timing() const;
  ::clockwork::TimingProto* release_timing();
  ::clockwork::TimingProto* mutable_timing();
  void set_allocated_timing(::clockwork::TimingProto* timing);
  private:
  const ::clockwork::TimingProto& _internal_timing() const;
  ::clockwork::TimingProto* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::clockwork::TimingProto* timing);
  ::clockwork::TimingProto* unsafe_arena_release_timing();

  // required fixed64 action_received = 3;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 result_sent = 4;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.EvictWeightsResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::TimingProto* timing_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class InferActionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.InferActionProto) */ {
 public:
  inline InferActionProto() : InferActionProto(nullptr) {};
  virtual ~InferActionProto();

  InferActionProto(const InferActionProto& from);
  InferActionProto(InferActionProto&& from) noexcept
    : InferActionProto() {
    *this = ::std::move(from);
  }

  inline InferActionProto& operator=(const InferActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferActionProto& operator=(InferActionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InferActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferActionProto* internal_default_instance() {
    return reinterpret_cast<const InferActionProto*>(
               &_InferActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(InferActionProto& a, InferActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InferActionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InferActionProto* New() const final {
    return CreateMaybeMessage<InferActionProto>(nullptr);
  }

  InferActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferActionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InferActionProto& from);
  void MergeFrom(const InferActionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferActionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.InferActionProto";
  }
  protected:
  explicit InferActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputSizesFieldNumber = 8,
    kActionIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kEarliestFieldNumber = 4,
    kLatestFieldNumber = 5,
    kGpuIdFieldNumber = 3,
    kBatchSizeFieldNumber = 7,
    kExpectedDurationFieldNumber = 6,
  };
  // repeated uint32 input_sizes = 8;
  int input_sizes_size() const;
  private:
  int _internal_input_sizes_size() const;
  public:
  void clear_input_sizes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_input_sizes() const;
  void _internal_add_input_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_input_sizes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 input_sizes(int index) const;
  void set_input_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_input_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      input_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_input_sizes();

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 model_id = 2;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required fixed64 earliest = 4;
  bool has_earliest() const;
  private:
  bool _internal_has_earliest() const;
  public:
  void clear_earliest();
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest() const;
  void set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_earliest() const;
  void _internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 latest = 5;
  bool has_latest() const;
  private:
  bool _internal_has_latest() const;
  public:
  void clear_latest();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest() const;
  void set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest() const;
  void _internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 gpu_id = 3;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 batch_size = 7;
  bool has_batch_size() const;
  private:
  bool _internal_has_batch_size() const;
  public:
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 expected_duration = 6;
  bool has_expected_duration() const;
  private:
  bool _internal_has_expected_duration() const;
  public:
  void clear_expected_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_duration() const;
  void set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expected_duration() const;
  void _internal_set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.InferActionProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > input_sizes_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 earliest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_duration_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class InferResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.InferResultProto) */ {
 public:
  inline InferResultProto() : InferResultProto(nullptr) {};
  virtual ~InferResultProto();

  InferResultProto(const InferResultProto& from);
  InferResultProto(InferResultProto&& from) noexcept
    : InferResultProto() {
    *this = ::std::move(from);
  }

  inline InferResultProto& operator=(const InferResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferResultProto& operator=(InferResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InferResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InferResultProto* internal_default_instance() {
    return reinterpret_cast<const InferResultProto*>(
               &_InferResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(InferResultProto& a, InferResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InferResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InferResultProto* New() const final {
    return CreateMaybeMessage<InferResultProto>(nullptr);
  }

  InferResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InferResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InferResultProto& from);
  void MergeFrom(const InferResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.InferResultProto";
  }
  protected:
  explicit InferResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyInputTimingFieldNumber = 2,
    kExecTimingFieldNumber = 3,
    kCopyOutputTimingFieldNumber = 4,
    kActionIdFieldNumber = 1,
    kGpuIdFieldNumber = 5,
    kGpuClockBeforeFieldNumber = 6,
    kGpuClockFieldNumber = 7,
    kActionReceivedFieldNumber = 8,
    kResultSentFieldNumber = 9,
  };
  // required .clockwork.TimingProto copy_input_timing = 2;
  bool has_copy_input_timing() const;
  private:
  bool _internal_has_copy_input_timing() const;
  public:
  void clear_copy_input_timing();
  const ::clockwork::TimingProto& copy_input_timing() const;
  ::clockwork::TimingProto* release_copy_input_timing();
  ::clockwork::TimingProto* mutable_copy_input_timing();
  void set_allocated_copy_input_timing(::clockwork::TimingProto* copy_input_timing);
  private:
  const ::clockwork::TimingProto& _internal_copy_input_timing() const;
  ::clockwork::TimingProto* _internal_mutable_copy_input_timing();
  public:
  void unsafe_arena_set_allocated_copy_input_timing(
      ::clockwork::TimingProto* copy_input_timing);
  ::clockwork::TimingProto* unsafe_arena_release_copy_input_timing();

  // required .clockwork.TimingProto exec_timing = 3;
  bool has_exec_timing() const;
  private:
  bool _internal_has_exec_timing() const;
  public:
  void clear_exec_timing();
  const ::clockwork::TimingProto& exec_timing() const;
  ::clockwork::TimingProto* release_exec_timing();
  ::clockwork::TimingProto* mutable_exec_timing();
  void set_allocated_exec_timing(::clockwork::TimingProto* exec_timing);
  private:
  const ::clockwork::TimingProto& _internal_exec_timing() const;
  ::clockwork::TimingProto* _internal_mutable_exec_timing();
  public:
  void unsafe_arena_set_allocated_exec_timing(
      ::clockwork::TimingProto* exec_timing);
  ::clockwork::TimingProto* unsafe_arena_release_exec_timing();

  // required .clockwork.TimingProto copy_output_timing = 4;
  bool has_copy_output_timing() const;
  private:
  bool _internal_has_copy_output_timing() const;
  public:
  void clear_copy_output_timing();
  const ::clockwork::TimingProto& copy_output_timing() const;
  ::clockwork::TimingProto* release_copy_output_timing();
  ::clockwork::TimingProto* mutable_copy_output_timing();
  void set_allocated_copy_output_timing(::clockwork::TimingProto* copy_output_timing);
  private:
  const ::clockwork::TimingProto& _internal_copy_output_timing() const;
  ::clockwork::TimingProto* _internal_mutable_copy_output_timing();
  public:
  void unsafe_arena_set_allocated_copy_output_timing(
      ::clockwork::TimingProto* copy_output_timing);
  ::clockwork::TimingProto* unsafe_arena_release_copy_output_timing();

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 gpu_id = 5;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 gpu_clock_before = 6;
  bool has_gpu_clock_before() const;
  private:
  bool _internal_has_gpu_clock_before() const;
  public:
  void clear_gpu_clock_before();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_clock_before() const;
  void set_gpu_clock_before(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_clock_before() const;
  void _internal_set_gpu_clock_before(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 gpu_clock = 7;
  bool has_gpu_clock() const;
  private:
  bool _internal_has_gpu_clock() const;
  public:
  void clear_gpu_clock();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_clock() const;
  void set_gpu_clock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_clock() const;
  void _internal_set_gpu_clock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed64 action_received = 8;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 result_sent = 9;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.InferResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::TimingProto* copy_input_timing_;
  ::clockwork::TimingProto* exec_timing_;
  ::clockwork::TimingProto* copy_output_timing_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_clock_before_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_clock_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ClearCacheActionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ClearCacheActionProto) */ {
 public:
  inline ClearCacheActionProto() : ClearCacheActionProto(nullptr) {};
  virtual ~ClearCacheActionProto();

  ClearCacheActionProto(const ClearCacheActionProto& from);
  ClearCacheActionProto(ClearCacheActionProto&& from) noexcept
    : ClearCacheActionProto() {
    *this = ::std::move(from);
  }

  inline ClearCacheActionProto& operator=(const ClearCacheActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearCacheActionProto& operator=(ClearCacheActionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearCacheActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearCacheActionProto* internal_default_instance() {
    return reinterpret_cast<const ClearCacheActionProto*>(
               &_ClearCacheActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ClearCacheActionProto& a, ClearCacheActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearCacheActionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearCacheActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearCacheActionProto* New() const final {
    return CreateMaybeMessage<ClearCacheActionProto>(nullptr);
  }

  ClearCacheActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearCacheActionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearCacheActionProto& from);
  void MergeFrom(const ClearCacheActionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearCacheActionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ClearCacheActionProto";
  }
  protected:
  explicit ClearCacheActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
  };
  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ClearCacheActionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ClearCacheResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ClearCacheResultProto) */ {
 public:
  inline ClearCacheResultProto() : ClearCacheResultProto(nullptr) {};
  virtual ~ClearCacheResultProto();

  ClearCacheResultProto(const ClearCacheResultProto& from);
  ClearCacheResultProto(ClearCacheResultProto&& from) noexcept
    : ClearCacheResultProto() {
    *this = ::std::move(from);
  }

  inline ClearCacheResultProto& operator=(const ClearCacheResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearCacheResultProto& operator=(ClearCacheResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearCacheResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearCacheResultProto* internal_default_instance() {
    return reinterpret_cast<const ClearCacheResultProto*>(
               &_ClearCacheResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ClearCacheResultProto& a, ClearCacheResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearCacheResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearCacheResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearCacheResultProto* New() const final {
    return CreateMaybeMessage<ClearCacheResultProto>(nullptr);
  }

  ClearCacheResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearCacheResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearCacheResultProto& from);
  void MergeFrom(const ClearCacheResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearCacheResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ClearCacheResultProto";
  }
  protected:
  explicit ClearCacheResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionReceivedFieldNumber = 2,
    kResultSentFieldNumber = 3,
    kActionIdFieldNumber = 1,
  };
  // required uint64 action_received = 2;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 result_sent = 3;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ClearCacheResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerStateActionProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.GetWorkerStateActionProto) */ {
 public:
  inline GetWorkerStateActionProto() : GetWorkerStateActionProto(nullptr) {};
  virtual ~GetWorkerStateActionProto();

  GetWorkerStateActionProto(const GetWorkerStateActionProto& from);
  GetWorkerStateActionProto(GetWorkerStateActionProto&& from) noexcept
    : GetWorkerStateActionProto() {
    *this = ::std::move(from);
  }

  inline GetWorkerStateActionProto& operator=(const GetWorkerStateActionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerStateActionProto& operator=(GetWorkerStateActionProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerStateActionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkerStateActionProto* internal_default_instance() {
    return reinterpret_cast<const GetWorkerStateActionProto*>(
               &_GetWorkerStateActionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetWorkerStateActionProto& a, GetWorkerStateActionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerStateActionProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerStateActionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerStateActionProto* New() const final {
    return CreateMaybeMessage<GetWorkerStateActionProto>(nullptr);
  }

  GetWorkerStateActionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerStateActionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerStateActionProto& from);
  void MergeFrom(const GetWorkerStateActionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerStateActionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.GetWorkerStateActionProto";
  }
  protected:
  explicit GetWorkerStateActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
  };
  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.GetWorkerStateActionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class ModelInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.ModelInfoProto) */ {
 public:
  inline ModelInfoProto() : ModelInfoProto(nullptr) {};
  virtual ~ModelInfoProto();

  ModelInfoProto(const ModelInfoProto& from);
  ModelInfoProto(ModelInfoProto&& from) noexcept
    : ModelInfoProto() {
    *this = ::std::move(from);
  }

  inline ModelInfoProto& operator=(const ModelInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInfoProto& operator=(ModelInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInfoProto* internal_default_instance() {
    return reinterpret_cast<const ModelInfoProto*>(
               &_ModelInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ModelInfoProto& a, ModelInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelInfoProto* New() const final {
    return CreateMaybeMessage<ModelInfoProto>(nullptr);
  }

  ModelInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelInfoProto& from);
  void MergeFrom(const ModelInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.ModelInfoProto";
  }
  protected:
  explicit ModelInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedBatchSizesFieldNumber = 5,
    kBatchSizeExecTimesNanosFieldNumber = 9,
    kSourceFieldNumber = 2,
    kInputSizeFieldNumber = 3,
    kOutputSizeFieldNumber = 4,
    kIdFieldNumber = 1,
    kNumWeightsPagesFieldNumber = 7,
    kWeightsSizeFieldNumber = 6,
    kWeightsLoadTimeNanosFieldNumber = 8,
  };
  // repeated uint32 supported_batch_sizes = 5;
  int supported_batch_sizes_size() const;
  private:
  int _internal_supported_batch_sizes_size() const;
  public:
  void clear_supported_batch_sizes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_supported_batch_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_supported_batch_sizes() const;
  void _internal_add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_supported_batch_sizes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 supported_batch_sizes(int index) const;
  void set_supported_batch_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      supported_batch_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_supported_batch_sizes();

  // repeated uint64 batch_size_exec_times_nanos = 9;
  int batch_size_exec_times_nanos_size() const;
  private:
  int _internal_batch_size_exec_times_nanos_size() const;
  public:
  void clear_batch_size_exec_times_nanos();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batch_size_exec_times_nanos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_batch_size_exec_times_nanos() const;
  void _internal_add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_batch_size_exec_times_nanos();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 batch_size_exec_times_nanos(int index) const;
  void set_batch_size_exec_times_nanos(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      batch_size_exec_times_nanos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_batch_size_exec_times_nanos();

  // required string source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // required uint64 input_size = 3;
  bool has_input_size() const;
  private:
  bool _internal_has_input_size() const;
  public:
  void clear_input_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size() const;
  void set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_size() const;
  void _internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 output_size = 4;
  bool has_output_size() const;
  private:
  bool _internal_has_output_size() const;
  public:
  void clear_output_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size() const;
  void set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_size() const;
  void _internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 num_weights_pages = 7;
  bool has_num_weights_pages() const;
  private:
  bool _internal_has_num_weights_pages() const;
  public:
  void clear_num_weights_pages();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_weights_pages() const;
  void set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_weights_pages() const;
  void _internal_set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 weights_size = 6;
  bool has_weights_size() const;
  private:
  bool _internal_has_weights_size() const;
  public:
  void clear_weights_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_size() const;
  void set_weights_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights_size() const;
  void _internal_set_weights_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 weights_load_time_nanos = 8;
  bool has_weights_load_time_nanos() const;
  private:
  bool _internal_has_weights_load_time_nanos() const;
  public:
  void clear_weights_load_time_nanos();
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_load_time_nanos() const;
  void set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights_load_time_nanos() const;
  void _internal_set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.ModelInfoProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > supported_batch_sizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > batch_size_exec_times_nanos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_weights_pages_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_load_time_nanos_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class GPUInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.GPUInfoProto) */ {
 public:
  inline GPUInfoProto() : GPUInfoProto(nullptr) {};
  virtual ~GPUInfoProto();

  GPUInfoProto(const GPUInfoProto& from);
  GPUInfoProto(GPUInfoProto&& from) noexcept
    : GPUInfoProto() {
    *this = ::std::move(from);
  }

  inline GPUInfoProto& operator=(const GPUInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPUInfoProto& operator=(GPUInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPUInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPUInfoProto* internal_default_instance() {
    return reinterpret_cast<const GPUInfoProto*>(
               &_GPUInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GPUInfoProto& a, GPUInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GPUInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPUInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPUInfoProto* New() const final {
    return CreateMaybeMessage<GPUInfoProto>(nullptr);
  }

  GPUInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPUInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPUInfoProto& from);
  void MergeFrom(const GPUInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPUInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.GPUInfoProto";
  }
  protected:
  explicit GPUInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 4,
    kWeightsCacheSizeFieldNumber = 2,
    kIdFieldNumber = 1,
    kWeightsCacheTotalPagesFieldNumber = 3,
    kIoPoolSizeFieldNumber = 5,
    kWorkspacePoolSizeFieldNumber = 6,
  };
  // repeated uint32 models = 4;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_models(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_models() const;
  void _internal_add_models(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_models();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 models(int index) const;
  void set_models(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_models(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_models();

  // required uint64 weights_cache_size = 2;
  bool has_weights_cache_size() const;
  private:
  bool _internal_has_weights_cache_size() const;
  public:
  void clear_weights_cache_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_cache_size() const;
  void set_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights_cache_size() const;
  void _internal_set_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 weights_cache_total_pages = 3;
  bool has_weights_cache_total_pages() const;
  private:
  bool _internal_has_weights_cache_total_pages() const;
  public:
  void clear_weights_cache_total_pages();
  ::PROTOBUF_NAMESPACE_ID::int32 weights_cache_total_pages() const;
  void set_weights_cache_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weights_cache_total_pages() const;
  void _internal_set_weights_cache_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 io_pool_size = 5;
  bool has_io_pool_size() const;
  private:
  bool _internal_has_io_pool_size() const;
  public:
  void clear_io_pool_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 io_pool_size() const;
  void set_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_io_pool_size() const;
  void _internal_set_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 workspace_pool_size = 6;
  bool has_workspace_pool_size() const;
  private:
  bool _internal_has_workspace_pool_size() const;
  public:
  void clear_workspace_pool_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 workspace_pool_size() const;
  void set_workspace_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_workspace_pool_size() const;
  void _internal_set_workspace_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.GPUInfoProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > models_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weights_cache_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 weights_cache_total_pages_;
  ::PROTOBUF_NAMESPACE_ID::uint64 io_pool_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 workspace_pool_size_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class WorkerMemoryInfoProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.WorkerMemoryInfoProto) */ {
 public:
  inline WorkerMemoryInfoProto() : WorkerMemoryInfoProto(nullptr) {};
  virtual ~WorkerMemoryInfoProto();

  WorkerMemoryInfoProto(const WorkerMemoryInfoProto& from);
  WorkerMemoryInfoProto(WorkerMemoryInfoProto&& from) noexcept
    : WorkerMemoryInfoProto() {
    *this = ::std::move(from);
  }

  inline WorkerMemoryInfoProto& operator=(const WorkerMemoryInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerMemoryInfoProto& operator=(WorkerMemoryInfoProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerMemoryInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerMemoryInfoProto* internal_default_instance() {
    return reinterpret_cast<const WorkerMemoryInfoProto*>(
               &_WorkerMemoryInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WorkerMemoryInfoProto& a, WorkerMemoryInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerMemoryInfoProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerMemoryInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerMemoryInfoProto* New() const final {
    return CreateMaybeMessage<WorkerMemoryInfoProto>(nullptr);
  }

  WorkerMemoryInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerMemoryInfoProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerMemoryInfoProto& from);
  void MergeFrom(const WorkerMemoryInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerMemoryInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.WorkerMemoryInfoProto";
  }
  protected:
  explicit WorkerMemoryInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpusFieldNumber = 4,
    kModelsFieldNumber = 5,
    kPageSizeFieldNumber = 1,
    kHostWeightsCacheSizeFieldNumber = 2,
    kHostIoPoolSizeFieldNumber = 3,
  };
  // repeated .clockwork.GPUInfoProto gpus = 4;
  int gpus_size() const;
  private:
  int _internal_gpus_size() const;
  public:
  void clear_gpus();
  ::clockwork::GPUInfoProto* mutable_gpus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::GPUInfoProto >*
      mutable_gpus();
  private:
  const ::clockwork::GPUInfoProto& _internal_gpus(int index) const;
  ::clockwork::GPUInfoProto* _internal_add_gpus();
  public:
  const ::clockwork::GPUInfoProto& gpus(int index) const;
  ::clockwork::GPUInfoProto* add_gpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::GPUInfoProto >&
      gpus() const;

  // repeated .clockwork.ModelInfoProto models = 5;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::clockwork::ModelInfoProto* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ModelInfoProto >*
      mutable_models();
  private:
  const ::clockwork::ModelInfoProto& _internal_models(int index) const;
  ::clockwork::ModelInfoProto* _internal_add_models();
  public:
  const ::clockwork::ModelInfoProto& models(int index) const;
  ::clockwork::ModelInfoProto* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ModelInfoProto >&
      models() const;

  // required uint64 page_size = 1;
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 host_weights_cache_size = 2;
  bool has_host_weights_cache_size() const;
  private:
  bool _internal_has_host_weights_cache_size() const;
  public:
  void clear_host_weights_cache_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 host_weights_cache_size() const;
  void set_host_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_host_weights_cache_size() const;
  void _internal_set_host_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 host_io_pool_size = 3;
  bool has_host_io_pool_size() const;
  private:
  bool _internal_has_host_io_pool_size() const;
  public:
  void clear_host_io_pool_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 host_io_pool_size() const;
  void set_host_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_host_io_pool_size() const;
  void _internal_set_host_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.WorkerMemoryInfoProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::GPUInfoProto > gpus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ModelInfoProto > models_;
  ::PROTOBUF_NAMESPACE_ID::uint64 page_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 host_weights_cache_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 host_io_pool_size_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerStateResultProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clockwork.GetWorkerStateResultProto) */ {
 public:
  inline GetWorkerStateResultProto() : GetWorkerStateResultProto(nullptr) {};
  virtual ~GetWorkerStateResultProto();

  GetWorkerStateResultProto(const GetWorkerStateResultProto& from);
  GetWorkerStateResultProto(GetWorkerStateResultProto&& from) noexcept
    : GetWorkerStateResultProto() {
    *this = ::std::move(from);
  }

  inline GetWorkerStateResultProto& operator=(const GetWorkerStateResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerStateResultProto& operator=(GetWorkerStateResultProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerStateResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkerStateResultProto* internal_default_instance() {
    return reinterpret_cast<const GetWorkerStateResultProto*>(
               &_GetWorkerStateResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetWorkerStateResultProto& a, GetWorkerStateResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerStateResultProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerStateResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerStateResultProto* New() const final {
    return CreateMaybeMessage<GetWorkerStateResultProto>(nullptr);
  }

  GetWorkerStateResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerStateResultProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerStateResultProto& from);
  void MergeFrom(const GetWorkerStateResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerStateResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clockwork.GetWorkerStateResultProto";
  }
  protected:
  explicit GetWorkerStateResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clockwork_2eproto);
    return ::descriptor_table_clockwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerMemoryInfoFieldNumber = 2,
    kActionReceivedFieldNumber = 3,
    kResultSentFieldNumber = 4,
    kActionIdFieldNumber = 1,
  };
  // required .clockwork.WorkerMemoryInfoProto worker_memory_info = 2;
  bool has_worker_memory_info() const;
  private:
  bool _internal_has_worker_memory_info() const;
  public:
  void clear_worker_memory_info();
  const ::clockwork::WorkerMemoryInfoProto& worker_memory_info() const;
  ::clockwork::WorkerMemoryInfoProto* release_worker_memory_info();
  ::clockwork::WorkerMemoryInfoProto* mutable_worker_memory_info();
  void set_allocated_worker_memory_info(::clockwork::WorkerMemoryInfoProto* worker_memory_info);
  private:
  const ::clockwork::WorkerMemoryInfoProto& _internal_worker_memory_info() const;
  ::clockwork::WorkerMemoryInfoProto* _internal_mutable_worker_memory_info();
  public:
  void unsafe_arena_set_allocated_worker_memory_info(
      ::clockwork::WorkerMemoryInfoProto* worker_memory_info);
  ::clockwork::WorkerMemoryInfoProto* unsafe_arena_release_worker_memory_info();

  // required uint64 action_received = 3;
  bool has_action_received() const;
  private:
  bool _internal_has_action_received() const;
  public:
  void clear_action_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received() const;
  void set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_action_received() const;
  void _internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 result_sent = 4;
  bool has_result_sent() const;
  private:
  bool _internal_has_result_sent() const;
  public:
  void clear_result_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent() const;
  void set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_result_sent() const;
  void _internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::int32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clockwork.GetWorkerStateResultProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clockwork::WorkerMemoryInfoProto* worker_memory_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 action_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 result_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_id_;
  friend struct ::TableStruct_clockwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeaderProto

// optional int32 user_id = 1;
inline bool RequestHeaderProto::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestHeaderProto::has_user_id() const {
  return _internal_has_user_id();
}
inline void RequestHeaderProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestHeaderProto::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestHeaderProto::user_id() const {
  // @@protoc_insertion_point(field_get:clockwork.RequestHeaderProto.user_id)
  return _internal_user_id();
}
inline void RequestHeaderProto::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_ = value;
}
inline void RequestHeaderProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:clockwork.RequestHeaderProto.user_id)
}

// optional int32 user_request_id = 2;
inline bool RequestHeaderProto::_internal_has_user_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestHeaderProto::has_user_request_id() const {
  return _internal_has_user_request_id();
}
inline void RequestHeaderProto::clear_user_request_id() {
  user_request_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestHeaderProto::_internal_user_request_id() const {
  return user_request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestHeaderProto::user_request_id() const {
  // @@protoc_insertion_point(field_get:clockwork.RequestHeaderProto.user_request_id)
  return _internal_user_request_id();
}
inline void RequestHeaderProto::_internal_set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_request_id_ = value;
}
inline void RequestHeaderProto::set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_request_id(value);
  // @@protoc_insertion_point(field_set:clockwork.RequestHeaderProto.user_request_id)
}

// -------------------------------------------------------------------

// ResponseHeaderProto

// optional int32 user_request_id = 1;
inline bool ResponseHeaderProto::_internal_has_user_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseHeaderProto::has_user_request_id() const {
  return _internal_has_user_request_id();
}
inline void ResponseHeaderProto::clear_user_request_id() {
  user_request_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseHeaderProto::_internal_user_request_id() const {
  return user_request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseHeaderProto::user_request_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ResponseHeaderProto.user_request_id)
  return _internal_user_request_id();
}
inline void ResponseHeaderProto::_internal_set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_request_id_ = value;
}
inline void ResponseHeaderProto::set_user_request_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_request_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ResponseHeaderProto.user_request_id)
}

// optional int32 status = 2;
inline bool ResponseHeaderProto::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResponseHeaderProto::has_status() const {
  return _internal_has_status();
}
inline void ResponseHeaderProto::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseHeaderProto::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseHeaderProto::status() const {
  // @@protoc_insertion_point(field_get:clockwork.ResponseHeaderProto.status)
  return _internal_status();
}
inline void ResponseHeaderProto::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void ResponseHeaderProto::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:clockwork.ResponseHeaderProto.status)
}

// optional string message = 3;
inline bool ResponseHeaderProto::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseHeaderProto::has_message() const {
  return _internal_has_message();
}
inline void ResponseHeaderProto::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseHeaderProto::message() const {
  // @@protoc_insertion_point(field_get:clockwork.ResponseHeaderProto.message)
  return _internal_message();
}
inline void ResponseHeaderProto::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:clockwork.ResponseHeaderProto.message)
}
inline std::string* ResponseHeaderProto::mutable_message() {
  // @@protoc_insertion_point(field_mutable:clockwork.ResponseHeaderProto.message)
  return _internal_mutable_message();
}
inline const std::string& ResponseHeaderProto::_internal_message() const {
  return message_.Get();
}
inline void ResponseHeaderProto::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResponseHeaderProto::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clockwork.ResponseHeaderProto.message)
}
inline void ResponseHeaderProto::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clockwork.ResponseHeaderProto.message)
}
inline void ResponseHeaderProto::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clockwork.ResponseHeaderProto.message)
}
inline std::string* ResponseHeaderProto::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResponseHeaderProto::release_message() {
  // @@protoc_insertion_point(field_release:clockwork.ResponseHeaderProto.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseHeaderProto::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clockwork.ResponseHeaderProto.message)
}
inline std::string* ResponseHeaderProto::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clockwork.ResponseHeaderProto.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResponseHeaderProto::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ResponseHeaderProto.message)
}

// -------------------------------------------------------------------

// ModelUploadReqProto

// required .clockwork.RequestHeaderProto header = 1;
inline bool ModelUploadReqProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ModelUploadReqProto::has_header() const {
  return _internal_has_header();
}
inline void ModelUploadReqProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::RequestHeaderProto& ModelUploadReqProto::_internal_header() const {
  const ::clockwork::RequestHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::RequestHeaderProto*>(
      &::clockwork::_RequestHeaderProto_default_instance_);
}
inline const ::clockwork::RequestHeaderProto& ModelUploadReqProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadReqProto.header)
  return _internal_header();
}
inline void ModelUploadReqProto::unsafe_arena_set_allocated_header(
    ::clockwork::RequestHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ModelUploadReqProto.header)
}
inline ::clockwork::RequestHeaderProto* ModelUploadReqProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::RequestHeaderProto* ModelUploadReqProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.ModelUploadReqProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::RequestHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::RequestHeaderProto* ModelUploadReqProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::RequestHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::RequestHeaderProto* ModelUploadReqProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.ModelUploadReqProto.header)
  return _internal_mutable_header();
}
inline void ModelUploadReqProto::set_allocated_header(::clockwork::RequestHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.ModelUploadReqProto.header)
}

// required uint32 batchsize = 3;
inline bool ModelUploadReqProto::_internal_has_batchsize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelUploadReqProto::has_batchsize() const {
  return _internal_has_batchsize();
}
inline void ModelUploadReqProto::clear_batchsize() {
  batchsize_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelUploadReqProto::_internal_batchsize() const {
  return batchsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelUploadReqProto::batchsize() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadReqProto.batchsize)
  return _internal_batchsize();
}
inline void ModelUploadReqProto::_internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  batchsize_ = value;
}
inline void ModelUploadReqProto::set_batchsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadReqProto.batchsize)
}

// required uint64 so_len = 4;
inline bool ModelUploadReqProto::_internal_has_so_len() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelUploadReqProto::has_so_len() const {
  return _internal_has_so_len();
}
inline void ModelUploadReqProto::clear_so_len() {
  so_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadReqProto::_internal_so_len() const {
  return so_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadReqProto::so_len() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadReqProto.so_len)
  return _internal_so_len();
}
inline void ModelUploadReqProto::_internal_set_so_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  so_len_ = value;
}
inline void ModelUploadReqProto::set_so_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_so_len(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadReqProto.so_len)
}

// required uint64 clockwork_len = 5;
inline bool ModelUploadReqProto::_internal_has_clockwork_len() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelUploadReqProto::has_clockwork_len() const {
  return _internal_has_clockwork_len();
}
inline void ModelUploadReqProto::clear_clockwork_len() {
  clockwork_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadReqProto::_internal_clockwork_len() const {
  return clockwork_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadReqProto::clockwork_len() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadReqProto.clockwork_len)
  return _internal_clockwork_len();
}
inline void ModelUploadReqProto::_internal_set_clockwork_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  clockwork_len_ = value;
}
inline void ModelUploadReqProto::set_clockwork_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clockwork_len(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadReqProto.clockwork_len)
}

// required uint64 params_len = 6;
inline bool ModelUploadReqProto::_internal_has_params_len() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelUploadReqProto::has_params_len() const {
  return _internal_has_params_len();
}
inline void ModelUploadReqProto::clear_params_len() {
  params_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadReqProto::_internal_params_len() const {
  return params_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadReqProto::params_len() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadReqProto.params_len)
  return _internal_params_len();
}
inline void ModelUploadReqProto::_internal_set_params_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  params_len_ = value;
}
inline void ModelUploadReqProto::set_params_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_params_len(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadReqProto.params_len)
}

// -------------------------------------------------------------------

// ModelUploadRspProto

// required .clockwork.ResponseHeaderProto header = 1;
inline bool ModelUploadRspProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ModelUploadRspProto::has_header() const {
  return _internal_has_header();
}
inline void ModelUploadRspProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::ResponseHeaderProto& ModelUploadRspProto::_internal_header() const {
  const ::clockwork::ResponseHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::ResponseHeaderProto*>(
      &::clockwork::_ResponseHeaderProto_default_instance_);
}
inline const ::clockwork::ResponseHeaderProto& ModelUploadRspProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadRspProto.header)
  return _internal_header();
}
inline void ModelUploadRspProto::unsafe_arena_set_allocated_header(
    ::clockwork::ResponseHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ModelUploadRspProto.header)
}
inline ::clockwork::ResponseHeaderProto* ModelUploadRspProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::ResponseHeaderProto* ModelUploadRspProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.ModelUploadRspProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::ResponseHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::ResponseHeaderProto* ModelUploadRspProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::ResponseHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::ResponseHeaderProto* ModelUploadRspProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.ModelUploadRspProto.header)
  return _internal_mutable_header();
}
inline void ModelUploadRspProto::set_allocated_header(::clockwork::ResponseHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.ModelUploadRspProto.header)
}

// required uint32 model_id = 2;
inline bool ModelUploadRspProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelUploadRspProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void ModelUploadRspProto::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelUploadRspProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelUploadRspProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadRspProto.model_id)
  return _internal_model_id();
}
inline void ModelUploadRspProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  model_id_ = value;
}
inline void ModelUploadRspProto::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadRspProto.model_id)
}

// required uint64 input_size = 3;
inline bool ModelUploadRspProto::_internal_has_input_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelUploadRspProto::has_input_size() const {
  return _internal_has_input_size();
}
inline void ModelUploadRspProto::clear_input_size() {
  input_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadRspProto::_internal_input_size() const {
  return input_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadRspProto::input_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadRspProto.input_size)
  return _internal_input_size();
}
inline void ModelUploadRspProto::_internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  input_size_ = value;
}
inline void ModelUploadRspProto::set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadRspProto.input_size)
}

// required uint64 output_size = 4;
inline bool ModelUploadRspProto::_internal_has_output_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelUploadRspProto::has_output_size() const {
  return _internal_has_output_size();
}
inline void ModelUploadRspProto::clear_output_size() {
  output_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadRspProto::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelUploadRspProto::output_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelUploadRspProto.output_size)
  return _internal_output_size();
}
inline void ModelUploadRspProto::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  output_size_ = value;
}
inline void ModelUploadRspProto::set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelUploadRspProto.output_size)
}

// -------------------------------------------------------------------

// ModelInferenceReqProto

// required .clockwork.RequestHeaderProto header = 1;
inline bool ModelInferenceReqProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ModelInferenceReqProto::has_header() const {
  return _internal_has_header();
}
inline void ModelInferenceReqProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::RequestHeaderProto& ModelInferenceReqProto::_internal_header() const {
  const ::clockwork::RequestHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::RequestHeaderProto*>(
      &::clockwork::_RequestHeaderProto_default_instance_);
}
inline const ::clockwork::RequestHeaderProto& ModelInferenceReqProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceReqProto.header)
  return _internal_header();
}
inline void ModelInferenceReqProto::unsafe_arena_set_allocated_header(
    ::clockwork::RequestHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ModelInferenceReqProto.header)
}
inline ::clockwork::RequestHeaderProto* ModelInferenceReqProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::RequestHeaderProto* ModelInferenceReqProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.ModelInferenceReqProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::RequestHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::RequestHeaderProto* ModelInferenceReqProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::RequestHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::RequestHeaderProto* ModelInferenceReqProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.ModelInferenceReqProto.header)
  return _internal_mutable_header();
}
inline void ModelInferenceReqProto::set_allocated_header(::clockwork::RequestHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.ModelInferenceReqProto.header)
}

// required uint32 model_id = 2;
inline bool ModelInferenceReqProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelInferenceReqProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void ModelInferenceReqProto::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceReqProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceReqProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceReqProto.model_id)
  return _internal_model_id();
}
inline void ModelInferenceReqProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void ModelInferenceReqProto::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInferenceReqProto.model_id)
}

// required uint32 batch_size = 3;
inline bool ModelInferenceReqProto::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelInferenceReqProto::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void ModelInferenceReqProto::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceReqProto::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceReqProto::batch_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceReqProto.batch_size)
  return _internal_batch_size();
}
inline void ModelInferenceReqProto::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  batch_size_ = value;
}
inline void ModelInferenceReqProto::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInferenceReqProto.batch_size)
}

// required float slo_factor = 4;
inline bool ModelInferenceReqProto::_internal_has_slo_factor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelInferenceReqProto::has_slo_factor() const {
  return _internal_has_slo_factor();
}
inline void ModelInferenceReqProto::clear_slo_factor() {
  slo_factor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ModelInferenceReqProto::_internal_slo_factor() const {
  return slo_factor_;
}
inline float ModelInferenceReqProto::slo_factor() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceReqProto.slo_factor)
  return _internal_slo_factor();
}
inline void ModelInferenceReqProto::_internal_set_slo_factor(float value) {
  _has_bits_[0] |= 0x00000008u;
  slo_factor_ = value;
}
inline void ModelInferenceReqProto::set_slo_factor(float value) {
  _internal_set_slo_factor(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInferenceReqProto.slo_factor)
}

// -------------------------------------------------------------------

// ModelInferenceRspProto

// required .clockwork.ResponseHeaderProto header = 1;
inline bool ModelInferenceRspProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ModelInferenceRspProto::has_header() const {
  return _internal_has_header();
}
inline void ModelInferenceRspProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::ResponseHeaderProto& ModelInferenceRspProto::_internal_header() const {
  const ::clockwork::ResponseHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::ResponseHeaderProto*>(
      &::clockwork::_ResponseHeaderProto_default_instance_);
}
inline const ::clockwork::ResponseHeaderProto& ModelInferenceRspProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceRspProto.header)
  return _internal_header();
}
inline void ModelInferenceRspProto::unsafe_arena_set_allocated_header(
    ::clockwork::ResponseHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ModelInferenceRspProto.header)
}
inline ::clockwork::ResponseHeaderProto* ModelInferenceRspProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::ResponseHeaderProto* ModelInferenceRspProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.ModelInferenceRspProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::ResponseHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::ResponseHeaderProto* ModelInferenceRspProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::ResponseHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::ResponseHeaderProto* ModelInferenceRspProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.ModelInferenceRspProto.header)
  return _internal_mutable_header();
}
inline void ModelInferenceRspProto::set_allocated_header(::clockwork::ResponseHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.ModelInferenceRspProto.header)
}

// required uint32 model_id = 2;
inline bool ModelInferenceRspProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelInferenceRspProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void ModelInferenceRspProto::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceRspProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceRspProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceRspProto.model_id)
  return _internal_model_id();
}
inline void ModelInferenceRspProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void ModelInferenceRspProto::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInferenceRspProto.model_id)
}

// required uint32 batch_size = 3;
inline bool ModelInferenceRspProto::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelInferenceRspProto::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void ModelInferenceRspProto::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceRspProto::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInferenceRspProto::batch_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInferenceRspProto.batch_size)
  return _internal_batch_size();
}
inline void ModelInferenceRspProto::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  batch_size_ = value;
}
inline void ModelInferenceRspProto::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInferenceRspProto.batch_size)
}

// -------------------------------------------------------------------

// EvictReqProto

// required .clockwork.RequestHeaderProto header = 1;
inline bool EvictReqProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool EvictReqProto::has_header() const {
  return _internal_has_header();
}
inline void EvictReqProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::RequestHeaderProto& EvictReqProto::_internal_header() const {
  const ::clockwork::RequestHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::RequestHeaderProto*>(
      &::clockwork::_RequestHeaderProto_default_instance_);
}
inline const ::clockwork::RequestHeaderProto& EvictReqProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictReqProto.header)
  return _internal_header();
}
inline void EvictReqProto::unsafe_arena_set_allocated_header(
    ::clockwork::RequestHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.EvictReqProto.header)
}
inline ::clockwork::RequestHeaderProto* EvictReqProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::RequestHeaderProto* EvictReqProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.EvictReqProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::RequestHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::RequestHeaderProto* EvictReqProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::RequestHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::RequestHeaderProto* EvictReqProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.EvictReqProto.header)
  return _internal_mutable_header();
}
inline void EvictReqProto::set_allocated_header(::clockwork::RequestHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.EvictReqProto.header)
}

// required uint32 model_id = 2;
inline bool EvictReqProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EvictReqProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void EvictReqProto::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EvictReqProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EvictReqProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictReqProto.model_id)
  return _internal_model_id();
}
inline void EvictReqProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void EvictReqProto::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictReqProto.model_id)
}

// -------------------------------------------------------------------

// EvictRspProto

// required .clockwork.ResponseHeaderProto header = 1;
inline bool EvictRspProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool EvictRspProto::has_header() const {
  return _internal_has_header();
}
inline void EvictRspProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::ResponseHeaderProto& EvictRspProto::_internal_header() const {
  const ::clockwork::ResponseHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::ResponseHeaderProto*>(
      &::clockwork::_ResponseHeaderProto_default_instance_);
}
inline const ::clockwork::ResponseHeaderProto& EvictRspProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictRspProto.header)
  return _internal_header();
}
inline void EvictRspProto::unsafe_arena_set_allocated_header(
    ::clockwork::ResponseHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.EvictRspProto.header)
}
inline ::clockwork::ResponseHeaderProto* EvictRspProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::ResponseHeaderProto* EvictRspProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.EvictRspProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::ResponseHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::ResponseHeaderProto* EvictRspProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::ResponseHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::ResponseHeaderProto* EvictRspProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.EvictRspProto.header)
  return _internal_mutable_header();
}
inline void EvictRspProto::set_allocated_header(::clockwork::ResponseHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.EvictRspProto.header)
}

// -------------------------------------------------------------------

// LoadModelFromDiskReqProto

// required .clockwork.RequestHeaderProto header = 1;
inline bool LoadModelFromDiskReqProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LoadModelFromDiskReqProto::has_header() const {
  return _internal_has_header();
}
inline void LoadModelFromDiskReqProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::clockwork::RequestHeaderProto& LoadModelFromDiskReqProto::_internal_header() const {
  const ::clockwork::RequestHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::RequestHeaderProto*>(
      &::clockwork::_RequestHeaderProto_default_instance_);
}
inline const ::clockwork::RequestHeaderProto& LoadModelFromDiskReqProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskReqProto.header)
  return _internal_header();
}
inline void LoadModelFromDiskReqProto::unsafe_arena_set_allocated_header(
    ::clockwork::RequestHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LoadModelFromDiskReqProto.header)
}
inline ::clockwork::RequestHeaderProto* LoadModelFromDiskReqProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::RequestHeaderProto* LoadModelFromDiskReqProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.LoadModelFromDiskReqProto.header)
  _has_bits_[0] &= ~0x00000002u;
  ::clockwork::RequestHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::RequestHeaderProto* LoadModelFromDiskReqProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::RequestHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::RequestHeaderProto* LoadModelFromDiskReqProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.LoadModelFromDiskReqProto.header)
  return _internal_mutable_header();
}
inline void LoadModelFromDiskReqProto::set_allocated_header(::clockwork::RequestHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.LoadModelFromDiskReqProto.header)
}

// required string remote_path = 2;
inline bool LoadModelFromDiskReqProto::_internal_has_remote_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadModelFromDiskReqProto::has_remote_path() const {
  return _internal_has_remote_path();
}
inline void LoadModelFromDiskReqProto::clear_remote_path() {
  remote_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoadModelFromDiskReqProto::remote_path() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskReqProto.remote_path)
  return _internal_remote_path();
}
inline void LoadModelFromDiskReqProto::set_remote_path(const std::string& value) {
  _internal_set_remote_path(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskReqProto.remote_path)
}
inline std::string* LoadModelFromDiskReqProto::mutable_remote_path() {
  // @@protoc_insertion_point(field_mutable:clockwork.LoadModelFromDiskReqProto.remote_path)
  return _internal_mutable_remote_path();
}
inline const std::string& LoadModelFromDiskReqProto::_internal_remote_path() const {
  return remote_path_.Get();
}
inline void LoadModelFromDiskReqProto::_internal_set_remote_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadModelFromDiskReqProto::set_remote_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clockwork.LoadModelFromDiskReqProto.remote_path)
}
inline void LoadModelFromDiskReqProto::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clockwork.LoadModelFromDiskReqProto.remote_path)
}
inline void LoadModelFromDiskReqProto::set_remote_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clockwork.LoadModelFromDiskReqProto.remote_path)
}
inline std::string* LoadModelFromDiskReqProto::_internal_mutable_remote_path() {
  _has_bits_[0] |= 0x00000001u;
  return remote_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadModelFromDiskReqProto::release_remote_path() {
  // @@protoc_insertion_point(field_release:clockwork.LoadModelFromDiskReqProto.remote_path)
  if (!_internal_has_remote_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return remote_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadModelFromDiskReqProto::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clockwork.LoadModelFromDiskReqProto.remote_path)
}
inline std::string* LoadModelFromDiskReqProto::unsafe_arena_release_remote_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clockwork.LoadModelFromDiskReqProto.remote_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return remote_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadModelFromDiskReqProto::unsafe_arena_set_allocated_remote_path(
    std::string* remote_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remote_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remote_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LoadModelFromDiskReqProto.remote_path)
}

// required int32 no_of_copies = 3;
inline bool LoadModelFromDiskReqProto::_internal_has_no_of_copies() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadModelFromDiskReqProto::has_no_of_copies() const {
  return _internal_has_no_of_copies();
}
inline void LoadModelFromDiskReqProto::clear_no_of_copies() {
  no_of_copies_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskReqProto::_internal_no_of_copies() const {
  return no_of_copies_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskReqProto::no_of_copies() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskReqProto.no_of_copies)
  return _internal_no_of_copies();
}
inline void LoadModelFromDiskReqProto::_internal_set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  no_of_copies_ = value;
}
inline void LoadModelFromDiskReqProto::set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_no_of_copies(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskReqProto.no_of_copies)
}

// -------------------------------------------------------------------

// LoadModelFromDiskRspProto

// required .clockwork.ResponseHeaderProto header = 1;
inline bool LoadModelFromDiskRspProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LoadModelFromDiskRspProto::has_header() const {
  return _internal_has_header();
}
inline void LoadModelFromDiskRspProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::ResponseHeaderProto& LoadModelFromDiskRspProto::_internal_header() const {
  const ::clockwork::ResponseHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::ResponseHeaderProto*>(
      &::clockwork::_ResponseHeaderProto_default_instance_);
}
inline const ::clockwork::ResponseHeaderProto& LoadModelFromDiskRspProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskRspProto.header)
  return _internal_header();
}
inline void LoadModelFromDiskRspProto::unsafe_arena_set_allocated_header(
    ::clockwork::ResponseHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LoadModelFromDiskRspProto.header)
}
inline ::clockwork::ResponseHeaderProto* LoadModelFromDiskRspProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::ResponseHeaderProto* LoadModelFromDiskRspProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.LoadModelFromDiskRspProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::ResponseHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::ResponseHeaderProto* LoadModelFromDiskRspProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::ResponseHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::ResponseHeaderProto* LoadModelFromDiskRspProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.LoadModelFromDiskRspProto.header)
  return _internal_mutable_header();
}
inline void LoadModelFromDiskRspProto::set_allocated_header(::clockwork::ResponseHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.LoadModelFromDiskRspProto.header)
}

// required uint32 model_id = 2;
inline bool LoadModelFromDiskRspProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadModelFromDiskRspProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void LoadModelFromDiskRspProto::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskRspProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskRspProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskRspProto.model_id)
  return _internal_model_id();
}
inline void LoadModelFromDiskRspProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  model_id_ = value;
}
inline void LoadModelFromDiskRspProto::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskRspProto.model_id)
}

// required uint64 input_size = 3;
inline bool LoadModelFromDiskRspProto::_internal_has_input_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoadModelFromDiskRspProto::has_input_size() const {
  return _internal_has_input_size();
}
inline void LoadModelFromDiskRspProto::clear_input_size() {
  input_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskRspProto::_internal_input_size() const {
  return input_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskRspProto::input_size() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskRspProto.input_size)
  return _internal_input_size();
}
inline void LoadModelFromDiskRspProto::_internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  input_size_ = value;
}
inline void LoadModelFromDiskRspProto::set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_size(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskRspProto.input_size)
}

// required uint64 output_size = 4;
inline bool LoadModelFromDiskRspProto::_internal_has_output_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoadModelFromDiskRspProto::has_output_size() const {
  return _internal_has_output_size();
}
inline void LoadModelFromDiskRspProto::clear_output_size() {
  output_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskRspProto::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskRspProto::output_size() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskRspProto.output_size)
  return _internal_output_size();
}
inline void LoadModelFromDiskRspProto::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  output_size_ = value;
}
inline void LoadModelFromDiskRspProto::set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskRspProto.output_size)
}

// required int32 copies_created = 5;
inline bool LoadModelFromDiskRspProto::_internal_has_copies_created() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoadModelFromDiskRspProto::has_copies_created() const {
  return _internal_has_copies_created();
}
inline void LoadModelFromDiskRspProto::clear_copies_created() {
  copies_created_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskRspProto::_internal_copies_created() const {
  return copies_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskRspProto::copies_created() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskRspProto.copies_created)
  return _internal_copies_created();
}
inline void LoadModelFromDiskRspProto::_internal_set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  copies_created_ = value;
}
inline void LoadModelFromDiskRspProto::set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_copies_created(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskRspProto.copies_created)
}

// -------------------------------------------------------------------

// LSReqProto

// required .clockwork.RequestHeaderProto header = 1;
inline bool LSReqProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LSReqProto::has_header() const {
  return _internal_has_header();
}
inline void LSReqProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::RequestHeaderProto& LSReqProto::_internal_header() const {
  const ::clockwork::RequestHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::RequestHeaderProto*>(
      &::clockwork::_RequestHeaderProto_default_instance_);
}
inline const ::clockwork::RequestHeaderProto& LSReqProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.LSReqProto.header)
  return _internal_header();
}
inline void LSReqProto::unsafe_arena_set_allocated_header(
    ::clockwork::RequestHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LSReqProto.header)
}
inline ::clockwork::RequestHeaderProto* LSReqProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::RequestHeaderProto* LSReqProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.LSReqProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::RequestHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::RequestHeaderProto* LSReqProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::RequestHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::RequestHeaderProto* LSReqProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.LSReqProto.header)
  return _internal_mutable_header();
}
inline void LSReqProto::set_allocated_header(::clockwork::RequestHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.LSReqProto.header)
}

// -------------------------------------------------------------------

// ClientModelInfoProto

// required uint32 model_id = 1;
inline bool ClientModelInfoProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClientModelInfoProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void ClientModelInfoProto::clear_model_id() {
  model_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientModelInfoProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientModelInfoProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ClientModelInfoProto.model_id)
  return _internal_model_id();
}
inline void ClientModelInfoProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  model_id_ = value;
}
inline void ClientModelInfoProto::set_model_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ClientModelInfoProto.model_id)
}

// required string remote_path = 2;
inline bool ClientModelInfoProto::_internal_has_remote_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientModelInfoProto::has_remote_path() const {
  return _internal_has_remote_path();
}
inline void ClientModelInfoProto::clear_remote_path() {
  remote_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientModelInfoProto::remote_path() const {
  // @@protoc_insertion_point(field_get:clockwork.ClientModelInfoProto.remote_path)
  return _internal_remote_path();
}
inline void ClientModelInfoProto::set_remote_path(const std::string& value) {
  _internal_set_remote_path(value);
  // @@protoc_insertion_point(field_set:clockwork.ClientModelInfoProto.remote_path)
}
inline std::string* ClientModelInfoProto::mutable_remote_path() {
  // @@protoc_insertion_point(field_mutable:clockwork.ClientModelInfoProto.remote_path)
  return _internal_mutable_remote_path();
}
inline const std::string& ClientModelInfoProto::_internal_remote_path() const {
  return remote_path_.Get();
}
inline void ClientModelInfoProto::_internal_set_remote_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientModelInfoProto::set_remote_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clockwork.ClientModelInfoProto.remote_path)
}
inline void ClientModelInfoProto::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clockwork.ClientModelInfoProto.remote_path)
}
inline void ClientModelInfoProto::set_remote_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  remote_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clockwork.ClientModelInfoProto.remote_path)
}
inline std::string* ClientModelInfoProto::_internal_mutable_remote_path() {
  _has_bits_[0] |= 0x00000001u;
  return remote_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientModelInfoProto::release_remote_path() {
  // @@protoc_insertion_point(field_release:clockwork.ClientModelInfoProto.remote_path)
  if (!_internal_has_remote_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return remote_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientModelInfoProto::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clockwork.ClientModelInfoProto.remote_path)
}
inline std::string* ClientModelInfoProto::unsafe_arena_release_remote_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clockwork.ClientModelInfoProto.remote_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return remote_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientModelInfoProto::unsafe_arena_set_allocated_remote_path(
    std::string* remote_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remote_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remote_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ClientModelInfoProto.remote_path)
}

// required uint64 input_size = 3;
inline bool ClientModelInfoProto::_internal_has_input_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientModelInfoProto::has_input_size() const {
  return _internal_has_input_size();
}
inline void ClientModelInfoProto::clear_input_size() {
  input_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientModelInfoProto::_internal_input_size() const {
  return input_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientModelInfoProto::input_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ClientModelInfoProto.input_size)
  return _internal_input_size();
}
inline void ClientModelInfoProto::_internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  input_size_ = value;
}
inline void ClientModelInfoProto::set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ClientModelInfoProto.input_size)
}

// required uint64 output_size = 4;
inline bool ClientModelInfoProto::_internal_has_output_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientModelInfoProto::has_output_size() const {
  return _internal_has_output_size();
}
inline void ClientModelInfoProto::clear_output_size() {
  output_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientModelInfoProto::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientModelInfoProto::output_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ClientModelInfoProto.output_size)
  return _internal_output_size();
}
inline void ClientModelInfoProto::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  output_size_ = value;
}
inline void ClientModelInfoProto::set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ClientModelInfoProto.output_size)
}

// -------------------------------------------------------------------

// LSRspProto

// required .clockwork.ResponseHeaderProto header = 1;
inline bool LSRspProto::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LSRspProto::has_header() const {
  return _internal_has_header();
}
inline void LSRspProto::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::ResponseHeaderProto& LSRspProto::_internal_header() const {
  const ::clockwork::ResponseHeaderProto* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::ResponseHeaderProto*>(
      &::clockwork::_ResponseHeaderProto_default_instance_);
}
inline const ::clockwork::ResponseHeaderProto& LSRspProto::header() const {
  // @@protoc_insertion_point(field_get:clockwork.LSRspProto.header)
  return _internal_header();
}
inline void LSRspProto::unsafe_arena_set_allocated_header(
    ::clockwork::ResponseHeaderProto* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LSRspProto.header)
}
inline ::clockwork::ResponseHeaderProto* LSRspProto::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::ResponseHeaderProto* LSRspProto::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:clockwork.LSRspProto.header)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::ResponseHeaderProto* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::clockwork::ResponseHeaderProto* LSRspProto::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::ResponseHeaderProto>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::clockwork::ResponseHeaderProto* LSRspProto::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clockwork.LSRspProto.header)
  return _internal_mutable_header();
}
inline void LSRspProto::set_allocated_header(::clockwork::ResponseHeaderProto* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:clockwork.LSRspProto.header)
}

// repeated .clockwork.ClientModelInfoProto models = 2;
inline int LSRspProto::_internal_models_size() const {
  return models_.size();
}
inline int LSRspProto::models_size() const {
  return _internal_models_size();
}
inline void LSRspProto::clear_models() {
  models_.Clear();
}
inline ::clockwork::ClientModelInfoProto* LSRspProto::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clockwork.LSRspProto.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ClientModelInfoProto >*
LSRspProto::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.LSRspProto.models)
  return &models_;
}
inline const ::clockwork::ClientModelInfoProto& LSRspProto::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clockwork::ClientModelInfoProto& LSRspProto::models(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.LSRspProto.models)
  return _internal_models(index);
}
inline ::clockwork::ClientModelInfoProto* LSRspProto::_internal_add_models() {
  return models_.Add();
}
inline ::clockwork::ClientModelInfoProto* LSRspProto::add_models() {
  // @@protoc_insertion_point(field_add:clockwork.LSRspProto.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ClientModelInfoProto >&
LSRspProto::models() const {
  // @@protoc_insertion_point(field_list:clockwork.LSRspProto.models)
  return models_;
}

// -------------------------------------------------------------------

// ErrorResultProto

// required int32 action_id = 1;
inline bool ErrorResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ErrorResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void ErrorResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ErrorResultProto.action_id)
  return _internal_action_id();
}
inline void ErrorResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  action_id_ = value;
}
inline void ErrorResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ErrorResultProto.action_id)
}

// required int32 action_type = 2;
inline bool ErrorResultProto::_internal_has_action_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ErrorResultProto::has_action_type() const {
  return _internal_has_action_type();
}
inline void ErrorResultProto::clear_action_type() {
  action_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorResultProto::_internal_action_type() const {
  return action_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorResultProto::action_type() const {
  // @@protoc_insertion_point(field_get:clockwork.ErrorResultProto.action_type)
  return _internal_action_type();
}
inline void ErrorResultProto::_internal_set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  action_type_ = value;
}
inline void ErrorResultProto::set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:clockwork.ErrorResultProto.action_type)
}

// required int32 status = 3;
inline bool ErrorResultProto::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ErrorResultProto::has_status() const {
  return _internal_has_status();
}
inline void ErrorResultProto::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorResultProto::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorResultProto::status() const {
  // @@protoc_insertion_point(field_get:clockwork.ErrorResultProto.status)
  return _internal_status();
}
inline void ErrorResultProto::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void ErrorResultProto::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:clockwork.ErrorResultProto.status)
}

// required string message = 4;
inline bool ErrorResultProto::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorResultProto::has_message() const {
  return _internal_has_message();
}
inline void ErrorResultProto::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ErrorResultProto::message() const {
  // @@protoc_insertion_point(field_get:clockwork.ErrorResultProto.message)
  return _internal_message();
}
inline void ErrorResultProto::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:clockwork.ErrorResultProto.message)
}
inline std::string* ErrorResultProto::mutable_message() {
  // @@protoc_insertion_point(field_mutable:clockwork.ErrorResultProto.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorResultProto::_internal_message() const {
  return message_.Get();
}
inline void ErrorResultProto::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ErrorResultProto::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clockwork.ErrorResultProto.message)
}
inline void ErrorResultProto::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clockwork.ErrorResultProto.message)
}
inline void ErrorResultProto::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clockwork.ErrorResultProto.message)
}
inline std::string* ErrorResultProto::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ErrorResultProto::release_message() {
  // @@protoc_insertion_point(field_release:clockwork.ErrorResultProto.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorResultProto::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clockwork.ErrorResultProto.message)
}
inline std::string* ErrorResultProto::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clockwork.ErrorResultProto.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ErrorResultProto::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ErrorResultProto.message)
}

// required fixed64 action_received = 5;
inline bool ErrorResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ErrorResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void ErrorResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ErrorResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ErrorResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.ErrorResultProto.action_received)
  return _internal_action_received();
}
inline void ErrorResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  action_received_ = value;
}
inline void ErrorResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.ErrorResultProto.action_received)
}

// required fixed64 result_sent = 6;
inline bool ErrorResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ErrorResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void ErrorResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ErrorResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ErrorResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.ErrorResultProto.result_sent)
  return _internal_result_sent();
}
inline void ErrorResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  result_sent_ = value;
}
inline void ErrorResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.ErrorResultProto.result_sent)
}

// -------------------------------------------------------------------

// TimingProto

// required fixed64 begin = 1;
inline bool TimingProto::_internal_has_begin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimingProto::has_begin() const {
  return _internal_has_begin();
}
inline void TimingProto::clear_begin() {
  begin_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingProto::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingProto::begin() const {
  // @@protoc_insertion_point(field_get:clockwork.TimingProto.begin)
  return _internal_begin();
}
inline void TimingProto::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  begin_ = value;
}
inline void TimingProto::set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:clockwork.TimingProto.begin)
}

// required fixed64 end = 2;
inline bool TimingProto::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimingProto::has_end() const {
  return _internal_has_end();
}
inline void TimingProto::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingProto::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingProto::end() const {
  // @@protoc_insertion_point(field_get:clockwork.TimingProto.end)
  return _internal_end();
}
inline void TimingProto::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_ = value;
}
inline void TimingProto::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:clockwork.TimingProto.end)
}

// required fixed64 duration = 3;
inline bool TimingProto::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimingProto::has_duration() const {
  return _internal_has_duration();
}
inline void TimingProto::clear_duration() {
  duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingProto::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingProto::duration() const {
  // @@protoc_insertion_point(field_get:clockwork.TimingProto.duration)
  return _internal_duration();
}
inline void TimingProto::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ = value;
}
inline void TimingProto::set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:clockwork.TimingProto.duration)
}

// -------------------------------------------------------------------

// LoadModelFromDiskActionProto

// required int32 action_id = 1;
inline bool LoadModelFromDiskActionProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void LoadModelFromDiskActionProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskActionProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskActionProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.action_id)
  return _internal_action_id();
}
inline void LoadModelFromDiskActionProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  action_id_ = value;
}
inline void LoadModelFromDiskActionProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.action_id)
}

// required int32 model_id = 2;
inline bool LoadModelFromDiskActionProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void LoadModelFromDiskActionProto::clear_model_id() {
  model_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskActionProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskActionProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.model_id)
  return _internal_model_id();
}
inline void LoadModelFromDiskActionProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  model_id_ = value;
}
inline void LoadModelFromDiskActionProto::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.model_id)
}

// required string model_path = 3;
inline bool LoadModelFromDiskActionProto::_internal_has_model_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_model_path() const {
  return _internal_has_model_path();
}
inline void LoadModelFromDiskActionProto::clear_model_path() {
  model_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoadModelFromDiskActionProto::model_path() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.model_path)
  return _internal_model_path();
}
inline void LoadModelFromDiskActionProto::set_model_path(const std::string& value) {
  _internal_set_model_path(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.model_path)
}
inline std::string* LoadModelFromDiskActionProto::mutable_model_path() {
  // @@protoc_insertion_point(field_mutable:clockwork.LoadModelFromDiskActionProto.model_path)
  return _internal_mutable_model_path();
}
inline const std::string& LoadModelFromDiskActionProto::_internal_model_path() const {
  return model_path_.Get();
}
inline void LoadModelFromDiskActionProto::_internal_set_model_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadModelFromDiskActionProto::set_model_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clockwork.LoadModelFromDiskActionProto.model_path)
}
inline void LoadModelFromDiskActionProto::set_model_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clockwork.LoadModelFromDiskActionProto.model_path)
}
inline void LoadModelFromDiskActionProto::set_model_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clockwork.LoadModelFromDiskActionProto.model_path)
}
inline std::string* LoadModelFromDiskActionProto::_internal_mutable_model_path() {
  _has_bits_[0] |= 0x00000001u;
  return model_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadModelFromDiskActionProto::release_model_path() {
  // @@protoc_insertion_point(field_release:clockwork.LoadModelFromDiskActionProto.model_path)
  if (!_internal_has_model_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadModelFromDiskActionProto::set_allocated_model_path(std::string* model_path) {
  if (model_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clockwork.LoadModelFromDiskActionProto.model_path)
}
inline std::string* LoadModelFromDiskActionProto::unsafe_arena_release_model_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clockwork.LoadModelFromDiskActionProto.model_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return model_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoadModelFromDiskActionProto::unsafe_arena_set_allocated_model_path(
    std::string* model_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LoadModelFromDiskActionProto.model_path)
}

// required fixed64 earliest = 4;
inline bool LoadModelFromDiskActionProto::_internal_has_earliest() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_earliest() const {
  return _internal_has_earliest();
}
inline void LoadModelFromDiskActionProto::clear_earliest() {
  earliest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskActionProto::_internal_earliest() const {
  return earliest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskActionProto::earliest() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.earliest)
  return _internal_earliest();
}
inline void LoadModelFromDiskActionProto::_internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  earliest_ = value;
}
inline void LoadModelFromDiskActionProto::set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_earliest(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.earliest)
}

// required fixed64 latest = 5;
inline bool LoadModelFromDiskActionProto::_internal_has_latest() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_latest() const {
  return _internal_has_latest();
}
inline void LoadModelFromDiskActionProto::clear_latest() {
  latest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskActionProto::_internal_latest() const {
  return latest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskActionProto::latest() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.latest)
  return _internal_latest();
}
inline void LoadModelFromDiskActionProto::_internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  latest_ = value;
}
inline void LoadModelFromDiskActionProto::set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.latest)
}

// required int32 no_of_copies = 6;
inline bool LoadModelFromDiskActionProto::_internal_has_no_of_copies() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_no_of_copies() const {
  return _internal_has_no_of_copies();
}
inline void LoadModelFromDiskActionProto::clear_no_of_copies() {
  no_of_copies_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskActionProto::_internal_no_of_copies() const {
  return no_of_copies_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskActionProto::no_of_copies() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.no_of_copies)
  return _internal_no_of_copies();
}
inline void LoadModelFromDiskActionProto::_internal_set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  no_of_copies_ = value;
}
inline void LoadModelFromDiskActionProto::set_no_of_copies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_no_of_copies(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.no_of_copies)
}

// required uint32 max_batch_size = 7;
inline bool LoadModelFromDiskActionProto::_internal_has_max_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_max_batch_size() const {
  return _internal_has_max_batch_size();
}
inline void LoadModelFromDiskActionProto::clear_max_batch_size() {
  max_batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskActionProto::_internal_max_batch_size() const {
  return max_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskActionProto::max_batch_size() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.max_batch_size)
  return _internal_max_batch_size();
}
inline void LoadModelFromDiskActionProto::_internal_set_max_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_batch_size_ = value;
}
inline void LoadModelFromDiskActionProto::set_max_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_batch_size(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.max_batch_size)
}

// required uint64 max_exec_duration = 8;
inline bool LoadModelFromDiskActionProto::_internal_has_max_exec_duration() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LoadModelFromDiskActionProto::has_max_exec_duration() const {
  return _internal_has_max_exec_duration();
}
inline void LoadModelFromDiskActionProto::clear_max_exec_duration() {
  max_exec_duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskActionProto::_internal_max_exec_duration() const {
  return max_exec_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskActionProto::max_exec_duration() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskActionProto.max_exec_duration)
  return _internal_max_exec_duration();
}
inline void LoadModelFromDiskActionProto::_internal_set_max_exec_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  max_exec_duration_ = value;
}
inline void LoadModelFromDiskActionProto::set_max_exec_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_exec_duration(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskActionProto.max_exec_duration)
}

// -------------------------------------------------------------------

// LoadModelFromDiskResultProto

// required int32 action_id = 1;
inline bool LoadModelFromDiskResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void LoadModelFromDiskResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.action_id)
  return _internal_action_id();
}
inline void LoadModelFromDiskResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  action_id_ = value;
}
inline void LoadModelFromDiskResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.action_id)
}

// required .clockwork.TimingProto timing = 2;
inline bool LoadModelFromDiskResultProto::_internal_has_timing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || timing_ != nullptr);
  return value;
}
inline bool LoadModelFromDiskResultProto::has_timing() const {
  return _internal_has_timing();
}
inline void LoadModelFromDiskResultProto::clear_timing() {
  if (timing_ != nullptr) timing_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::TimingProto& LoadModelFromDiskResultProto::_internal_timing() const {
  const ::clockwork::TimingProto* p = timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::TimingProto*>(
      &::clockwork::_TimingProto_default_instance_);
}
inline const ::clockwork::TimingProto& LoadModelFromDiskResultProto::timing() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.timing)
  return _internal_timing();
}
inline void LoadModelFromDiskResultProto::unsafe_arena_set_allocated_timing(
    ::clockwork::TimingProto* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LoadModelFromDiskResultProto.timing)
}
inline ::clockwork::TimingProto* LoadModelFromDiskResultProto::release_timing() {
  auto temp = unsafe_arena_release_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::TimingProto* LoadModelFromDiskResultProto::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:clockwork.LoadModelFromDiskResultProto.timing)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::TimingProto* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::clockwork::TimingProto* LoadModelFromDiskResultProto::_internal_mutable_timing() {
  _has_bits_[0] |= 0x00000001u;
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::TimingProto>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::clockwork::TimingProto* LoadModelFromDiskResultProto::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:clockwork.LoadModelFromDiskResultProto.timing)
  return _internal_mutable_timing();
}
inline void LoadModelFromDiskResultProto::set_allocated_timing(::clockwork::TimingProto* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timing_;
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timing);
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:clockwork.LoadModelFromDiskResultProto.timing)
}

// required uint64 input_size = 3;
inline bool LoadModelFromDiskResultProto::_internal_has_input_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_input_size() const {
  return _internal_has_input_size();
}
inline void LoadModelFromDiskResultProto::clear_input_size() {
  input_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_input_size() const {
  return input_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::input_size() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.input_size)
  return _internal_input_size();
}
inline void LoadModelFromDiskResultProto::_internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  input_size_ = value;
}
inline void LoadModelFromDiskResultProto::set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_size(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.input_size)
}

// required uint64 output_size = 4;
inline bool LoadModelFromDiskResultProto::_internal_has_output_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_output_size() const {
  return _internal_has_output_size();
}
inline void LoadModelFromDiskResultProto::clear_output_size() {
  output_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::output_size() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.output_size)
  return _internal_output_size();
}
inline void LoadModelFromDiskResultProto::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  output_size_ = value;
}
inline void LoadModelFromDiskResultProto::set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.output_size)
}

// repeated uint32 supported_batch_sizes = 5;
inline int LoadModelFromDiskResultProto::_internal_supported_batch_sizes_size() const {
  return supported_batch_sizes_.size();
}
inline int LoadModelFromDiskResultProto::supported_batch_sizes_size() const {
  return _internal_supported_batch_sizes_size();
}
inline void LoadModelFromDiskResultProto::clear_supported_batch_sizes() {
  supported_batch_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskResultProto::_internal_supported_batch_sizes(int index) const {
  return supported_batch_sizes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskResultProto::supported_batch_sizes(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.supported_batch_sizes)
  return _internal_supported_batch_sizes(index);
}
inline void LoadModelFromDiskResultProto::set_supported_batch_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  supported_batch_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.supported_batch_sizes)
}
inline void LoadModelFromDiskResultProto::_internal_add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  supported_batch_sizes_.Add(value);
}
inline void LoadModelFromDiskResultProto::add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_supported_batch_sizes(value);
  // @@protoc_insertion_point(field_add:clockwork.LoadModelFromDiskResultProto.supported_batch_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LoadModelFromDiskResultProto::_internal_supported_batch_sizes() const {
  return supported_batch_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LoadModelFromDiskResultProto::supported_batch_sizes() const {
  // @@protoc_insertion_point(field_list:clockwork.LoadModelFromDiskResultProto.supported_batch_sizes)
  return _internal_supported_batch_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LoadModelFromDiskResultProto::_internal_mutable_supported_batch_sizes() {
  return &supported_batch_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LoadModelFromDiskResultProto::mutable_supported_batch_sizes() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.LoadModelFromDiskResultProto.supported_batch_sizes)
  return _internal_mutable_supported_batch_sizes();
}

// required uint64 weights_size_in_cache = 6;
inline bool LoadModelFromDiskResultProto::_internal_has_weights_size_in_cache() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_weights_size_in_cache() const {
  return _internal_has_weights_size_in_cache();
}
inline void LoadModelFromDiskResultProto::clear_weights_size_in_cache() {
  weights_size_in_cache_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_weights_size_in_cache() const {
  return weights_size_in_cache_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::weights_size_in_cache() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.weights_size_in_cache)
  return _internal_weights_size_in_cache();
}
inline void LoadModelFromDiskResultProto::_internal_set_weights_size_in_cache(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  weights_size_in_cache_ = value;
}
inline void LoadModelFromDiskResultProto::set_weights_size_in_cache(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weights_size_in_cache(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.weights_size_in_cache)
}

// required uint32 num_weights_pages = 7;
inline bool LoadModelFromDiskResultProto::_internal_has_num_weights_pages() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_num_weights_pages() const {
  return _internal_has_num_weights_pages();
}
inline void LoadModelFromDiskResultProto::clear_num_weights_pages() {
  num_weights_pages_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskResultProto::_internal_num_weights_pages() const {
  return num_weights_pages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadModelFromDiskResultProto::num_weights_pages() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.num_weights_pages)
  return _internal_num_weights_pages();
}
inline void LoadModelFromDiskResultProto::_internal_set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_weights_pages_ = value;
}
inline void LoadModelFromDiskResultProto::set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_weights_pages(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.num_weights_pages)
}

// required uint64 weights_load_time_nanos = 8;
inline bool LoadModelFromDiskResultProto::_internal_has_weights_load_time_nanos() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_weights_load_time_nanos() const {
  return _internal_has_weights_load_time_nanos();
}
inline void LoadModelFromDiskResultProto::clear_weights_load_time_nanos() {
  weights_load_time_nanos_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_weights_load_time_nanos() const {
  return weights_load_time_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::weights_load_time_nanos() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.weights_load_time_nanos)
  return _internal_weights_load_time_nanos();
}
inline void LoadModelFromDiskResultProto::_internal_set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  weights_load_time_nanos_ = value;
}
inline void LoadModelFromDiskResultProto::set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weights_load_time_nanos(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.weights_load_time_nanos)
}

// repeated uint64 batch_size_exec_times_nanos = 9;
inline int LoadModelFromDiskResultProto::_internal_batch_size_exec_times_nanos_size() const {
  return batch_size_exec_times_nanos_.size();
}
inline int LoadModelFromDiskResultProto::batch_size_exec_times_nanos_size() const {
  return _internal_batch_size_exec_times_nanos_size();
}
inline void LoadModelFromDiskResultProto::clear_batch_size_exec_times_nanos() {
  batch_size_exec_times_nanos_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_batch_size_exec_times_nanos(int index) const {
  return batch_size_exec_times_nanos_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::batch_size_exec_times_nanos(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.batch_size_exec_times_nanos)
  return _internal_batch_size_exec_times_nanos(index);
}
inline void LoadModelFromDiskResultProto::set_batch_size_exec_times_nanos(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  batch_size_exec_times_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.batch_size_exec_times_nanos)
}
inline void LoadModelFromDiskResultProto::_internal_add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  batch_size_exec_times_nanos_.Add(value);
}
inline void LoadModelFromDiskResultProto::add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_batch_size_exec_times_nanos(value);
  // @@protoc_insertion_point(field_add:clockwork.LoadModelFromDiskResultProto.batch_size_exec_times_nanos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LoadModelFromDiskResultProto::_internal_batch_size_exec_times_nanos() const {
  return batch_size_exec_times_nanos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LoadModelFromDiskResultProto::batch_size_exec_times_nanos() const {
  // @@protoc_insertion_point(field_list:clockwork.LoadModelFromDiskResultProto.batch_size_exec_times_nanos)
  return _internal_batch_size_exec_times_nanos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LoadModelFromDiskResultProto::_internal_mutable_batch_size_exec_times_nanos() {
  return &batch_size_exec_times_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LoadModelFromDiskResultProto::mutable_batch_size_exec_times_nanos() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.LoadModelFromDiskResultProto.batch_size_exec_times_nanos)
  return _internal_mutable_batch_size_exec_times_nanos();
}

// required int32 copies_created = 10;
inline bool LoadModelFromDiskResultProto::_internal_has_copies_created() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_copies_created() const {
  return _internal_has_copies_created();
}
inline void LoadModelFromDiskResultProto::clear_copies_created() {
  copies_created_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskResultProto::_internal_copies_created() const {
  return copies_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadModelFromDiskResultProto::copies_created() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.copies_created)
  return _internal_copies_created();
}
inline void LoadModelFromDiskResultProto::_internal_set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  copies_created_ = value;
}
inline void LoadModelFromDiskResultProto::set_copies_created(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_copies_created(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.copies_created)
}

// required fixed64 action_received = 11;
inline bool LoadModelFromDiskResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void LoadModelFromDiskResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.action_received)
  return _internal_action_received();
}
inline void LoadModelFromDiskResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  action_received_ = value;
}
inline void LoadModelFromDiskResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.action_received)
}

// required fixed64 result_sent = 12;
inline bool LoadModelFromDiskResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LoadModelFromDiskResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void LoadModelFromDiskResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadModelFromDiskResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadModelFromDiskResultProto.result_sent)
  return _internal_result_sent();
}
inline void LoadModelFromDiskResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  result_sent_ = value;
}
inline void LoadModelFromDiskResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadModelFromDiskResultProto.result_sent)
}

// -------------------------------------------------------------------

// LoadWeightsActionProto

// required int32 action_id = 1;
inline bool LoadWeightsActionProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoadWeightsActionProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void LoadWeightsActionProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadWeightsActionProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadWeightsActionProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsActionProto.action_id)
  return _internal_action_id();
}
inline void LoadWeightsActionProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void LoadWeightsActionProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsActionProto.action_id)
}

// required int32 model_id = 2;
inline bool LoadWeightsActionProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoadWeightsActionProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void LoadWeightsActionProto::clear_model_id() {
  model_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadWeightsActionProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadWeightsActionProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsActionProto.model_id)
  return _internal_model_id();
}
inline void LoadWeightsActionProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void LoadWeightsActionProto::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsActionProto.model_id)
}

// required uint32 gpu_id = 3;
inline bool LoadWeightsActionProto::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoadWeightsActionProto::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void LoadWeightsActionProto::clear_gpu_id() {
  gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadWeightsActionProto::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadWeightsActionProto::gpu_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsActionProto.gpu_id)
  return _internal_gpu_id();
}
inline void LoadWeightsActionProto::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  gpu_id_ = value;
}
inline void LoadWeightsActionProto::set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsActionProto.gpu_id)
}

// required fixed64 earliest = 4;
inline bool LoadWeightsActionProto::_internal_has_earliest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadWeightsActionProto::has_earliest() const {
  return _internal_has_earliest();
}
inline void LoadWeightsActionProto::clear_earliest() {
  earliest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsActionProto::_internal_earliest() const {
  return earliest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsActionProto::earliest() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsActionProto.earliest)
  return _internal_earliest();
}
inline void LoadWeightsActionProto::_internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  earliest_ = value;
}
inline void LoadWeightsActionProto::set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_earliest(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsActionProto.earliest)
}

// required fixed64 latest = 5;
inline bool LoadWeightsActionProto::_internal_has_latest() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoadWeightsActionProto::has_latest() const {
  return _internal_has_latest();
}
inline void LoadWeightsActionProto::clear_latest() {
  latest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsActionProto::_internal_latest() const {
  return latest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsActionProto::latest() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsActionProto.latest)
  return _internal_latest();
}
inline void LoadWeightsActionProto::_internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  latest_ = value;
}
inline void LoadWeightsActionProto::set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsActionProto.latest)
}

// required uint64 expected_duration = 6;
inline bool LoadWeightsActionProto::_internal_has_expected_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoadWeightsActionProto::has_expected_duration() const {
  return _internal_has_expected_duration();
}
inline void LoadWeightsActionProto::clear_expected_duration() {
  expected_duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsActionProto::_internal_expected_duration() const {
  return expected_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsActionProto::expected_duration() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsActionProto.expected_duration)
  return _internal_expected_duration();
}
inline void LoadWeightsActionProto::_internal_set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  expected_duration_ = value;
}
inline void LoadWeightsActionProto::set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expected_duration(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsActionProto.expected_duration)
}

// -------------------------------------------------------------------

// LoadWeightsResultProto

// required int32 action_id = 1;
inline bool LoadWeightsResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoadWeightsResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void LoadWeightsResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadWeightsResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadWeightsResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsResultProto.action_id)
  return _internal_action_id();
}
inline void LoadWeightsResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  action_id_ = value;
}
inline void LoadWeightsResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsResultProto.action_id)
}

// required .clockwork.TimingProto timing = 2;
inline bool LoadWeightsResultProto::_internal_has_timing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || timing_ != nullptr);
  return value;
}
inline bool LoadWeightsResultProto::has_timing() const {
  return _internal_has_timing();
}
inline void LoadWeightsResultProto::clear_timing() {
  if (timing_ != nullptr) timing_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::TimingProto& LoadWeightsResultProto::_internal_timing() const {
  const ::clockwork::TimingProto* p = timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::TimingProto*>(
      &::clockwork::_TimingProto_default_instance_);
}
inline const ::clockwork::TimingProto& LoadWeightsResultProto::timing() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsResultProto.timing)
  return _internal_timing();
}
inline void LoadWeightsResultProto::unsafe_arena_set_allocated_timing(
    ::clockwork::TimingProto* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.LoadWeightsResultProto.timing)
}
inline ::clockwork::TimingProto* LoadWeightsResultProto::release_timing() {
  auto temp = unsafe_arena_release_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::TimingProto* LoadWeightsResultProto::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:clockwork.LoadWeightsResultProto.timing)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::TimingProto* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::clockwork::TimingProto* LoadWeightsResultProto::_internal_mutable_timing() {
  _has_bits_[0] |= 0x00000001u;
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::TimingProto>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::clockwork::TimingProto* LoadWeightsResultProto::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:clockwork.LoadWeightsResultProto.timing)
  return _internal_mutable_timing();
}
inline void LoadWeightsResultProto::set_allocated_timing(::clockwork::TimingProto* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timing_;
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timing);
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:clockwork.LoadWeightsResultProto.timing)
}

// required fixed64 action_received = 3;
inline bool LoadWeightsResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoadWeightsResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void LoadWeightsResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsResultProto.action_received)
  return _internal_action_received();
}
inline void LoadWeightsResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  action_received_ = value;
}
inline void LoadWeightsResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsResultProto.action_received)
}

// required fixed64 result_sent = 4;
inline bool LoadWeightsResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoadWeightsResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void LoadWeightsResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadWeightsResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.LoadWeightsResultProto.result_sent)
  return _internal_result_sent();
}
inline void LoadWeightsResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  result_sent_ = value;
}
inline void LoadWeightsResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.LoadWeightsResultProto.result_sent)
}

// -------------------------------------------------------------------

// EvictWeightsActionProto

// required int32 action_id = 1;
inline bool EvictWeightsActionProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EvictWeightsActionProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void EvictWeightsActionProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvictWeightsActionProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvictWeightsActionProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsActionProto.action_id)
  return _internal_action_id();
}
inline void EvictWeightsActionProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void EvictWeightsActionProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsActionProto.action_id)
}

// required int32 model_id = 2;
inline bool EvictWeightsActionProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EvictWeightsActionProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void EvictWeightsActionProto::clear_model_id() {
  model_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvictWeightsActionProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvictWeightsActionProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsActionProto.model_id)
  return _internal_model_id();
}
inline void EvictWeightsActionProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void EvictWeightsActionProto::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsActionProto.model_id)
}

// required uint32 gpu_id = 3;
inline bool EvictWeightsActionProto::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EvictWeightsActionProto::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void EvictWeightsActionProto::clear_gpu_id() {
  gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EvictWeightsActionProto::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EvictWeightsActionProto::gpu_id() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsActionProto.gpu_id)
  return _internal_gpu_id();
}
inline void EvictWeightsActionProto::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gpu_id_ = value;
}
inline void EvictWeightsActionProto::set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsActionProto.gpu_id)
}

// required fixed64 earliest = 4;
inline bool EvictWeightsActionProto::_internal_has_earliest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EvictWeightsActionProto::has_earliest() const {
  return _internal_has_earliest();
}
inline void EvictWeightsActionProto::clear_earliest() {
  earliest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsActionProto::_internal_earliest() const {
  return earliest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsActionProto::earliest() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsActionProto.earliest)
  return _internal_earliest();
}
inline void EvictWeightsActionProto::_internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  earliest_ = value;
}
inline void EvictWeightsActionProto::set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_earliest(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsActionProto.earliest)
}

// required fixed64 latest = 5;
inline bool EvictWeightsActionProto::_internal_has_latest() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EvictWeightsActionProto::has_latest() const {
  return _internal_has_latest();
}
inline void EvictWeightsActionProto::clear_latest() {
  latest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsActionProto::_internal_latest() const {
  return latest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsActionProto::latest() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsActionProto.latest)
  return _internal_latest();
}
inline void EvictWeightsActionProto::_internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  latest_ = value;
}
inline void EvictWeightsActionProto::set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsActionProto.latest)
}

// -------------------------------------------------------------------

// EvictWeightsResultProto

// required int32 action_id = 1;
inline bool EvictWeightsResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EvictWeightsResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void EvictWeightsResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvictWeightsResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EvictWeightsResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsResultProto.action_id)
  return _internal_action_id();
}
inline void EvictWeightsResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  action_id_ = value;
}
inline void EvictWeightsResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsResultProto.action_id)
}

// required .clockwork.TimingProto timing = 2;
inline bool EvictWeightsResultProto::_internal_has_timing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || timing_ != nullptr);
  return value;
}
inline bool EvictWeightsResultProto::has_timing() const {
  return _internal_has_timing();
}
inline void EvictWeightsResultProto::clear_timing() {
  if (timing_ != nullptr) timing_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::TimingProto& EvictWeightsResultProto::_internal_timing() const {
  const ::clockwork::TimingProto* p = timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::TimingProto*>(
      &::clockwork::_TimingProto_default_instance_);
}
inline const ::clockwork::TimingProto& EvictWeightsResultProto::timing() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsResultProto.timing)
  return _internal_timing();
}
inline void EvictWeightsResultProto::unsafe_arena_set_allocated_timing(
    ::clockwork::TimingProto* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.EvictWeightsResultProto.timing)
}
inline ::clockwork::TimingProto* EvictWeightsResultProto::release_timing() {
  auto temp = unsafe_arena_release_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::TimingProto* EvictWeightsResultProto::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:clockwork.EvictWeightsResultProto.timing)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::TimingProto* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::clockwork::TimingProto* EvictWeightsResultProto::_internal_mutable_timing() {
  _has_bits_[0] |= 0x00000001u;
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::TimingProto>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::clockwork::TimingProto* EvictWeightsResultProto::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:clockwork.EvictWeightsResultProto.timing)
  return _internal_mutable_timing();
}
inline void EvictWeightsResultProto::set_allocated_timing(::clockwork::TimingProto* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timing_;
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timing);
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:clockwork.EvictWeightsResultProto.timing)
}

// required fixed64 action_received = 3;
inline bool EvictWeightsResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EvictWeightsResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void EvictWeightsResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsResultProto.action_received)
  return _internal_action_received();
}
inline void EvictWeightsResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  action_received_ = value;
}
inline void EvictWeightsResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsResultProto.action_received)
}

// required fixed64 result_sent = 4;
inline bool EvictWeightsResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EvictWeightsResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void EvictWeightsResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EvictWeightsResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.EvictWeightsResultProto.result_sent)
  return _internal_result_sent();
}
inline void EvictWeightsResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  result_sent_ = value;
}
inline void EvictWeightsResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.EvictWeightsResultProto.result_sent)
}

// -------------------------------------------------------------------

// InferActionProto

// required int32 action_id = 1;
inline bool InferActionProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InferActionProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void InferActionProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferActionProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferActionProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.action_id)
  return _internal_action_id();
}
inline void InferActionProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void InferActionProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.action_id)
}

// required int32 model_id = 2;
inline bool InferActionProto::_internal_has_model_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InferActionProto::has_model_id() const {
  return _internal_has_model_id();
}
inline void InferActionProto::clear_model_id() {
  model_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferActionProto::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferActionProto::model_id() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.model_id)
  return _internal_model_id();
}
inline void InferActionProto::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  model_id_ = value;
}
inline void InferActionProto::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.model_id)
}

// required uint32 gpu_id = 3;
inline bool InferActionProto::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InferActionProto::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void InferActionProto::clear_gpu_id() {
  gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferActionProto::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferActionProto::gpu_id() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.gpu_id)
  return _internal_gpu_id();
}
inline void InferActionProto::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gpu_id_ = value;
}
inline void InferActionProto::set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.gpu_id)
}

// required fixed64 earliest = 4;
inline bool InferActionProto::_internal_has_earliest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InferActionProto::has_earliest() const {
  return _internal_has_earliest();
}
inline void InferActionProto::clear_earliest() {
  earliest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferActionProto::_internal_earliest() const {
  return earliest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferActionProto::earliest() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.earliest)
  return _internal_earliest();
}
inline void InferActionProto::_internal_set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  earliest_ = value;
}
inline void InferActionProto::set_earliest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_earliest(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.earliest)
}

// required fixed64 latest = 5;
inline bool InferActionProto::_internal_has_latest() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InferActionProto::has_latest() const {
  return _internal_has_latest();
}
inline void InferActionProto::clear_latest() {
  latest_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferActionProto::_internal_latest() const {
  return latest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferActionProto::latest() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.latest)
  return _internal_latest();
}
inline void InferActionProto::_internal_set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  latest_ = value;
}
inline void InferActionProto::set_latest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.latest)
}

// required uint64 expected_duration = 6;
inline bool InferActionProto::_internal_has_expected_duration() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InferActionProto::has_expected_duration() const {
  return _internal_has_expected_duration();
}
inline void InferActionProto::clear_expected_duration() {
  expected_duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferActionProto::_internal_expected_duration() const {
  return expected_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferActionProto::expected_duration() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.expected_duration)
  return _internal_expected_duration();
}
inline void InferActionProto::_internal_set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  expected_duration_ = value;
}
inline void InferActionProto::set_expected_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expected_duration(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.expected_duration)
}

// required uint32 batch_size = 7;
inline bool InferActionProto::_internal_has_batch_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InferActionProto::has_batch_size() const {
  return _internal_has_batch_size();
}
inline void InferActionProto::clear_batch_size() {
  batch_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferActionProto::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferActionProto::batch_size() const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.batch_size)
  return _internal_batch_size();
}
inline void InferActionProto::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  batch_size_ = value;
}
inline void InferActionProto::set_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.batch_size)
}

// repeated uint32 input_sizes = 8;
inline int InferActionProto::_internal_input_sizes_size() const {
  return input_sizes_.size();
}
inline int InferActionProto::input_sizes_size() const {
  return _internal_input_sizes_size();
}
inline void InferActionProto::clear_input_sizes() {
  input_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferActionProto::_internal_input_sizes(int index) const {
  return input_sizes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferActionProto::input_sizes(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.InferActionProto.input_sizes)
  return _internal_input_sizes(index);
}
inline void InferActionProto::set_input_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  input_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:clockwork.InferActionProto.input_sizes)
}
inline void InferActionProto::_internal_add_input_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  input_sizes_.Add(value);
}
inline void InferActionProto::add_input_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_input_sizes(value);
  // @@protoc_insertion_point(field_add:clockwork.InferActionProto.input_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InferActionProto::_internal_input_sizes() const {
  return input_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InferActionProto::input_sizes() const {
  // @@protoc_insertion_point(field_list:clockwork.InferActionProto.input_sizes)
  return _internal_input_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InferActionProto::_internal_mutable_input_sizes() {
  return &input_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InferActionProto::mutable_input_sizes() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.InferActionProto.input_sizes)
  return _internal_mutable_input_sizes();
}

// -------------------------------------------------------------------

// InferResultProto

// required int32 action_id = 1;
inline bool InferResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InferResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void InferResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InferResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.action_id)
  return _internal_action_id();
}
inline void InferResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  action_id_ = value;
}
inline void InferResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.InferResultProto.action_id)
}

// required .clockwork.TimingProto copy_input_timing = 2;
inline bool InferResultProto::_internal_has_copy_input_timing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || copy_input_timing_ != nullptr);
  return value;
}
inline bool InferResultProto::has_copy_input_timing() const {
  return _internal_has_copy_input_timing();
}
inline void InferResultProto::clear_copy_input_timing() {
  if (copy_input_timing_ != nullptr) copy_input_timing_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::TimingProto& InferResultProto::_internal_copy_input_timing() const {
  const ::clockwork::TimingProto* p = copy_input_timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::TimingProto*>(
      &::clockwork::_TimingProto_default_instance_);
}
inline const ::clockwork::TimingProto& InferResultProto::copy_input_timing() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.copy_input_timing)
  return _internal_copy_input_timing();
}
inline void InferResultProto::unsafe_arena_set_allocated_copy_input_timing(
    ::clockwork::TimingProto* copy_input_timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copy_input_timing_);
  }
  copy_input_timing_ = copy_input_timing;
  if (copy_input_timing) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.InferResultProto.copy_input_timing)
}
inline ::clockwork::TimingProto* InferResultProto::release_copy_input_timing() {
  auto temp = unsafe_arena_release_copy_input_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::TimingProto* InferResultProto::unsafe_arena_release_copy_input_timing() {
  // @@protoc_insertion_point(field_release:clockwork.InferResultProto.copy_input_timing)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::TimingProto* temp = copy_input_timing_;
  copy_input_timing_ = nullptr;
  return temp;
}
inline ::clockwork::TimingProto* InferResultProto::_internal_mutable_copy_input_timing() {
  _has_bits_[0] |= 0x00000001u;
  if (copy_input_timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::TimingProto>(GetArena());
    copy_input_timing_ = p;
  }
  return copy_input_timing_;
}
inline ::clockwork::TimingProto* InferResultProto::mutable_copy_input_timing() {
  // @@protoc_insertion_point(field_mutable:clockwork.InferResultProto.copy_input_timing)
  return _internal_mutable_copy_input_timing();
}
inline void InferResultProto::set_allocated_copy_input_timing(::clockwork::TimingProto* copy_input_timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete copy_input_timing_;
  }
  if (copy_input_timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(copy_input_timing);
    if (message_arena != submessage_arena) {
      copy_input_timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copy_input_timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  copy_input_timing_ = copy_input_timing;
  // @@protoc_insertion_point(field_set_allocated:clockwork.InferResultProto.copy_input_timing)
}

// required .clockwork.TimingProto exec_timing = 3;
inline bool InferResultProto::_internal_has_exec_timing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || exec_timing_ != nullptr);
  return value;
}
inline bool InferResultProto::has_exec_timing() const {
  return _internal_has_exec_timing();
}
inline void InferResultProto::clear_exec_timing() {
  if (exec_timing_ != nullptr) exec_timing_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::clockwork::TimingProto& InferResultProto::_internal_exec_timing() const {
  const ::clockwork::TimingProto* p = exec_timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::TimingProto*>(
      &::clockwork::_TimingProto_default_instance_);
}
inline const ::clockwork::TimingProto& InferResultProto::exec_timing() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.exec_timing)
  return _internal_exec_timing();
}
inline void InferResultProto::unsafe_arena_set_allocated_exec_timing(
    ::clockwork::TimingProto* exec_timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exec_timing_);
  }
  exec_timing_ = exec_timing;
  if (exec_timing) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.InferResultProto.exec_timing)
}
inline ::clockwork::TimingProto* InferResultProto::release_exec_timing() {
  auto temp = unsafe_arena_release_exec_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::TimingProto* InferResultProto::unsafe_arena_release_exec_timing() {
  // @@protoc_insertion_point(field_release:clockwork.InferResultProto.exec_timing)
  _has_bits_[0] &= ~0x00000002u;
  ::clockwork::TimingProto* temp = exec_timing_;
  exec_timing_ = nullptr;
  return temp;
}
inline ::clockwork::TimingProto* InferResultProto::_internal_mutable_exec_timing() {
  _has_bits_[0] |= 0x00000002u;
  if (exec_timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::TimingProto>(GetArena());
    exec_timing_ = p;
  }
  return exec_timing_;
}
inline ::clockwork::TimingProto* InferResultProto::mutable_exec_timing() {
  // @@protoc_insertion_point(field_mutable:clockwork.InferResultProto.exec_timing)
  return _internal_mutable_exec_timing();
}
inline void InferResultProto::set_allocated_exec_timing(::clockwork::TimingProto* exec_timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete exec_timing_;
  }
  if (exec_timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exec_timing);
    if (message_arena != submessage_arena) {
      exec_timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exec_timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  exec_timing_ = exec_timing;
  // @@protoc_insertion_point(field_set_allocated:clockwork.InferResultProto.exec_timing)
}

// required .clockwork.TimingProto copy_output_timing = 4;
inline bool InferResultProto::_internal_has_copy_output_timing() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || copy_output_timing_ != nullptr);
  return value;
}
inline bool InferResultProto::has_copy_output_timing() const {
  return _internal_has_copy_output_timing();
}
inline void InferResultProto::clear_copy_output_timing() {
  if (copy_output_timing_ != nullptr) copy_output_timing_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::clockwork::TimingProto& InferResultProto::_internal_copy_output_timing() const {
  const ::clockwork::TimingProto* p = copy_output_timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::TimingProto*>(
      &::clockwork::_TimingProto_default_instance_);
}
inline const ::clockwork::TimingProto& InferResultProto::copy_output_timing() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.copy_output_timing)
  return _internal_copy_output_timing();
}
inline void InferResultProto::unsafe_arena_set_allocated_copy_output_timing(
    ::clockwork::TimingProto* copy_output_timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(copy_output_timing_);
  }
  copy_output_timing_ = copy_output_timing;
  if (copy_output_timing) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.InferResultProto.copy_output_timing)
}
inline ::clockwork::TimingProto* InferResultProto::release_copy_output_timing() {
  auto temp = unsafe_arena_release_copy_output_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::TimingProto* InferResultProto::unsafe_arena_release_copy_output_timing() {
  // @@protoc_insertion_point(field_release:clockwork.InferResultProto.copy_output_timing)
  _has_bits_[0] &= ~0x00000004u;
  ::clockwork::TimingProto* temp = copy_output_timing_;
  copy_output_timing_ = nullptr;
  return temp;
}
inline ::clockwork::TimingProto* InferResultProto::_internal_mutable_copy_output_timing() {
  _has_bits_[0] |= 0x00000004u;
  if (copy_output_timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::TimingProto>(GetArena());
    copy_output_timing_ = p;
  }
  return copy_output_timing_;
}
inline ::clockwork::TimingProto* InferResultProto::mutable_copy_output_timing() {
  // @@protoc_insertion_point(field_mutable:clockwork.InferResultProto.copy_output_timing)
  return _internal_mutable_copy_output_timing();
}
inline void InferResultProto::set_allocated_copy_output_timing(::clockwork::TimingProto* copy_output_timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete copy_output_timing_;
  }
  if (copy_output_timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(copy_output_timing);
    if (message_arena != submessage_arena) {
      copy_output_timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copy_output_timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  copy_output_timing_ = copy_output_timing;
  // @@protoc_insertion_point(field_set_allocated:clockwork.InferResultProto.copy_output_timing)
}

// required uint32 gpu_id = 5;
inline bool InferResultProto::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InferResultProto::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void InferResultProto::clear_gpu_id() {
  gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferResultProto::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferResultProto::gpu_id() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.gpu_id)
  return _internal_gpu_id();
}
inline void InferResultProto::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gpu_id_ = value;
}
inline void InferResultProto::set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:clockwork.InferResultProto.gpu_id)
}

// required uint32 gpu_clock_before = 6;
inline bool InferResultProto::_internal_has_gpu_clock_before() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InferResultProto::has_gpu_clock_before() const {
  return _internal_has_gpu_clock_before();
}
inline void InferResultProto::clear_gpu_clock_before() {
  gpu_clock_before_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferResultProto::_internal_gpu_clock_before() const {
  return gpu_clock_before_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferResultProto::gpu_clock_before() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.gpu_clock_before)
  return _internal_gpu_clock_before();
}
inline void InferResultProto::_internal_set_gpu_clock_before(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  gpu_clock_before_ = value;
}
inline void InferResultProto::set_gpu_clock_before(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_clock_before(value);
  // @@protoc_insertion_point(field_set:clockwork.InferResultProto.gpu_clock_before)
}

// required uint32 gpu_clock = 7;
inline bool InferResultProto::_internal_has_gpu_clock() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InferResultProto::has_gpu_clock() const {
  return _internal_has_gpu_clock();
}
inline void InferResultProto::clear_gpu_clock() {
  gpu_clock_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferResultProto::_internal_gpu_clock() const {
  return gpu_clock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InferResultProto::gpu_clock() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.gpu_clock)
  return _internal_gpu_clock();
}
inline void InferResultProto::_internal_set_gpu_clock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  gpu_clock_ = value;
}
inline void InferResultProto::set_gpu_clock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_clock(value);
  // @@protoc_insertion_point(field_set:clockwork.InferResultProto.gpu_clock)
}

// required fixed64 action_received = 8;
inline bool InferResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool InferResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void InferResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.action_received)
  return _internal_action_received();
}
inline void InferResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  action_received_ = value;
}
inline void InferResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.InferResultProto.action_received)
}

// required fixed64 result_sent = 9;
inline bool InferResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool InferResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void InferResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InferResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.InferResultProto.result_sent)
  return _internal_result_sent();
}
inline void InferResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  result_sent_ = value;
}
inline void InferResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.InferResultProto.result_sent)
}

// -------------------------------------------------------------------

// ClearCacheActionProto

// required int32 action_id = 1;
inline bool ClearCacheActionProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClearCacheActionProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void ClearCacheActionProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearCacheActionProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearCacheActionProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ClearCacheActionProto.action_id)
  return _internal_action_id();
}
inline void ClearCacheActionProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void ClearCacheActionProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ClearCacheActionProto.action_id)
}

// -------------------------------------------------------------------

// ClearCacheResultProto

// required int32 action_id = 1;
inline bool ClearCacheResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClearCacheResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void ClearCacheResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearCacheResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearCacheResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.ClearCacheResultProto.action_id)
  return _internal_action_id();
}
inline void ClearCacheResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  action_id_ = value;
}
inline void ClearCacheResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ClearCacheResultProto.action_id)
}

// required uint64 action_received = 2;
inline bool ClearCacheResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClearCacheResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void ClearCacheResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClearCacheResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClearCacheResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.ClearCacheResultProto.action_received)
  return _internal_action_received();
}
inline void ClearCacheResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  action_received_ = value;
}
inline void ClearCacheResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.ClearCacheResultProto.action_received)
}

// required uint64 result_sent = 3;
inline bool ClearCacheResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClearCacheResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void ClearCacheResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClearCacheResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClearCacheResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.ClearCacheResultProto.result_sent)
  return _internal_result_sent();
}
inline void ClearCacheResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  result_sent_ = value;
}
inline void ClearCacheResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.ClearCacheResultProto.result_sent)
}

// -------------------------------------------------------------------

// GetWorkerStateActionProto

// required int32 action_id = 1;
inline bool GetWorkerStateActionProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetWorkerStateActionProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void GetWorkerStateActionProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorkerStateActionProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorkerStateActionProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.GetWorkerStateActionProto.action_id)
  return _internal_action_id();
}
inline void GetWorkerStateActionProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void GetWorkerStateActionProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.GetWorkerStateActionProto.action_id)
}

// -------------------------------------------------------------------

// ModelInfoProto

// required int32 id = 1;
inline bool ModelInfoProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelInfoProto::has_id() const {
  return _internal_has_id();
}
inline void ModelInfoProto::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelInfoProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelInfoProto::id() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.id)
  return _internal_id();
}
inline void ModelInfoProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void ModelInfoProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.id)
}

// required string source = 2;
inline bool ModelInfoProto::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelInfoProto::has_source() const {
  return _internal_has_source();
}
inline void ModelInfoProto::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelInfoProto::source() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.source)
  return _internal_source();
}
inline void ModelInfoProto::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.source)
}
inline std::string* ModelInfoProto::mutable_source() {
  // @@protoc_insertion_point(field_mutable:clockwork.ModelInfoProto.source)
  return _internal_mutable_source();
}
inline const std::string& ModelInfoProto::_internal_source() const {
  return source_.Get();
}
inline void ModelInfoProto::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelInfoProto::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clockwork.ModelInfoProto.source)
}
inline void ModelInfoProto::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:clockwork.ModelInfoProto.source)
}
inline void ModelInfoProto::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clockwork.ModelInfoProto.source)
}
inline std::string* ModelInfoProto::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelInfoProto::release_source() {
  // @@protoc_insertion_point(field_release:clockwork.ModelInfoProto.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelInfoProto::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clockwork.ModelInfoProto.source)
}
inline std::string* ModelInfoProto::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clockwork.ModelInfoProto.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelInfoProto::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.ModelInfoProto.source)
}

// required uint64 input_size = 3;
inline bool ModelInfoProto::_internal_has_input_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelInfoProto::has_input_size() const {
  return _internal_has_input_size();
}
inline void ModelInfoProto::clear_input_size() {
  input_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::_internal_input_size() const {
  return input_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::input_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.input_size)
  return _internal_input_size();
}
inline void ModelInfoProto::_internal_set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  input_size_ = value;
}
inline void ModelInfoProto::set_input_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.input_size)
}

// required uint64 output_size = 4;
inline bool ModelInfoProto::_internal_has_output_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelInfoProto::has_output_size() const {
  return _internal_has_output_size();
}
inline void ModelInfoProto::clear_output_size() {
  output_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::_internal_output_size() const {
  return output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::output_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.output_size)
  return _internal_output_size();
}
inline void ModelInfoProto::_internal_set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  output_size_ = value;
}
inline void ModelInfoProto::set_output_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.output_size)
}

// repeated uint32 supported_batch_sizes = 5;
inline int ModelInfoProto::_internal_supported_batch_sizes_size() const {
  return supported_batch_sizes_.size();
}
inline int ModelInfoProto::supported_batch_sizes_size() const {
  return _internal_supported_batch_sizes_size();
}
inline void ModelInfoProto::clear_supported_batch_sizes() {
  supported_batch_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInfoProto::_internal_supported_batch_sizes(int index) const {
  return supported_batch_sizes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInfoProto::supported_batch_sizes(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.supported_batch_sizes)
  return _internal_supported_batch_sizes(index);
}
inline void ModelInfoProto::set_supported_batch_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  supported_batch_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.supported_batch_sizes)
}
inline void ModelInfoProto::_internal_add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  supported_batch_sizes_.Add(value);
}
inline void ModelInfoProto::add_supported_batch_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_supported_batch_sizes(value);
  // @@protoc_insertion_point(field_add:clockwork.ModelInfoProto.supported_batch_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ModelInfoProto::_internal_supported_batch_sizes() const {
  return supported_batch_sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ModelInfoProto::supported_batch_sizes() const {
  // @@protoc_insertion_point(field_list:clockwork.ModelInfoProto.supported_batch_sizes)
  return _internal_supported_batch_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ModelInfoProto::_internal_mutable_supported_batch_sizes() {
  return &supported_batch_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ModelInfoProto::mutable_supported_batch_sizes() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.ModelInfoProto.supported_batch_sizes)
  return _internal_mutable_supported_batch_sizes();
}

// required uint64 weights_size = 6;
inline bool ModelInfoProto::_internal_has_weights_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelInfoProto::has_weights_size() const {
  return _internal_has_weights_size();
}
inline void ModelInfoProto::clear_weights_size() {
  weights_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::_internal_weights_size() const {
  return weights_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::weights_size() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.weights_size)
  return _internal_weights_size();
}
inline void ModelInfoProto::_internal_set_weights_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  weights_size_ = value;
}
inline void ModelInfoProto::set_weights_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weights_size(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.weights_size)
}

// required uint32 num_weights_pages = 7;
inline bool ModelInfoProto::_internal_has_num_weights_pages() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelInfoProto::has_num_weights_pages() const {
  return _internal_has_num_weights_pages();
}
inline void ModelInfoProto::clear_num_weights_pages() {
  num_weights_pages_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInfoProto::_internal_num_weights_pages() const {
  return num_weights_pages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelInfoProto::num_weights_pages() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.num_weights_pages)
  return _internal_num_weights_pages();
}
inline void ModelInfoProto::_internal_set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_weights_pages_ = value;
}
inline void ModelInfoProto::set_num_weights_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_weights_pages(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.num_weights_pages)
}

// required uint64 weights_load_time_nanos = 8;
inline bool ModelInfoProto::_internal_has_weights_load_time_nanos() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelInfoProto::has_weights_load_time_nanos() const {
  return _internal_has_weights_load_time_nanos();
}
inline void ModelInfoProto::clear_weights_load_time_nanos() {
  weights_load_time_nanos_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::_internal_weights_load_time_nanos() const {
  return weights_load_time_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::weights_load_time_nanos() const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.weights_load_time_nanos)
  return _internal_weights_load_time_nanos();
}
inline void ModelInfoProto::_internal_set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  weights_load_time_nanos_ = value;
}
inline void ModelInfoProto::set_weights_load_time_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weights_load_time_nanos(value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.weights_load_time_nanos)
}

// repeated uint64 batch_size_exec_times_nanos = 9;
inline int ModelInfoProto::_internal_batch_size_exec_times_nanos_size() const {
  return batch_size_exec_times_nanos_.size();
}
inline int ModelInfoProto::batch_size_exec_times_nanos_size() const {
  return _internal_batch_size_exec_times_nanos_size();
}
inline void ModelInfoProto::clear_batch_size_exec_times_nanos() {
  batch_size_exec_times_nanos_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::_internal_batch_size_exec_times_nanos(int index) const {
  return batch_size_exec_times_nanos_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelInfoProto::batch_size_exec_times_nanos(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.ModelInfoProto.batch_size_exec_times_nanos)
  return _internal_batch_size_exec_times_nanos(index);
}
inline void ModelInfoProto::set_batch_size_exec_times_nanos(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  batch_size_exec_times_nanos_.Set(index, value);
  // @@protoc_insertion_point(field_set:clockwork.ModelInfoProto.batch_size_exec_times_nanos)
}
inline void ModelInfoProto::_internal_add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  batch_size_exec_times_nanos_.Add(value);
}
inline void ModelInfoProto::add_batch_size_exec_times_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_batch_size_exec_times_nanos(value);
  // @@protoc_insertion_point(field_add:clockwork.ModelInfoProto.batch_size_exec_times_nanos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ModelInfoProto::_internal_batch_size_exec_times_nanos() const {
  return batch_size_exec_times_nanos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ModelInfoProto::batch_size_exec_times_nanos() const {
  // @@protoc_insertion_point(field_list:clockwork.ModelInfoProto.batch_size_exec_times_nanos)
  return _internal_batch_size_exec_times_nanos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ModelInfoProto::_internal_mutable_batch_size_exec_times_nanos() {
  return &batch_size_exec_times_nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ModelInfoProto::mutable_batch_size_exec_times_nanos() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.ModelInfoProto.batch_size_exec_times_nanos)
  return _internal_mutable_batch_size_exec_times_nanos();
}

// -------------------------------------------------------------------

// GPUInfoProto

// required int32 id = 1;
inline bool GPUInfoProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GPUInfoProto::has_id() const {
  return _internal_has_id();
}
inline void GPUInfoProto::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPUInfoProto::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPUInfoProto::id() const {
  // @@protoc_insertion_point(field_get:clockwork.GPUInfoProto.id)
  return _internal_id();
}
inline void GPUInfoProto::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void GPUInfoProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clockwork.GPUInfoProto.id)
}

// required uint64 weights_cache_size = 2;
inline bool GPUInfoProto::_internal_has_weights_cache_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GPUInfoProto::has_weights_cache_size() const {
  return _internal_has_weights_cache_size();
}
inline void GPUInfoProto::clear_weights_cache_size() {
  weights_cache_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPUInfoProto::_internal_weights_cache_size() const {
  return weights_cache_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPUInfoProto::weights_cache_size() const {
  // @@protoc_insertion_point(field_get:clockwork.GPUInfoProto.weights_cache_size)
  return _internal_weights_cache_size();
}
inline void GPUInfoProto::_internal_set_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  weights_cache_size_ = value;
}
inline void GPUInfoProto::set_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weights_cache_size(value);
  // @@protoc_insertion_point(field_set:clockwork.GPUInfoProto.weights_cache_size)
}

// required int32 weights_cache_total_pages = 3;
inline bool GPUInfoProto::_internal_has_weights_cache_total_pages() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GPUInfoProto::has_weights_cache_total_pages() const {
  return _internal_has_weights_cache_total_pages();
}
inline void GPUInfoProto::clear_weights_cache_total_pages() {
  weights_cache_total_pages_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPUInfoProto::_internal_weights_cache_total_pages() const {
  return weights_cache_total_pages_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPUInfoProto::weights_cache_total_pages() const {
  // @@protoc_insertion_point(field_get:clockwork.GPUInfoProto.weights_cache_total_pages)
  return _internal_weights_cache_total_pages();
}
inline void GPUInfoProto::_internal_set_weights_cache_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  weights_cache_total_pages_ = value;
}
inline void GPUInfoProto::set_weights_cache_total_pages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weights_cache_total_pages(value);
  // @@protoc_insertion_point(field_set:clockwork.GPUInfoProto.weights_cache_total_pages)
}

// repeated uint32 models = 4;
inline int GPUInfoProto::_internal_models_size() const {
  return models_.size();
}
inline int GPUInfoProto::models_size() const {
  return _internal_models_size();
}
inline void GPUInfoProto::clear_models() {
  models_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPUInfoProto::_internal_models(int index) const {
  return models_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPUInfoProto::models(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.GPUInfoProto.models)
  return _internal_models(index);
}
inline void GPUInfoProto::set_models(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  models_.Set(index, value);
  // @@protoc_insertion_point(field_set:clockwork.GPUInfoProto.models)
}
inline void GPUInfoProto::_internal_add_models(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  models_.Add(value);
}
inline void GPUInfoProto::add_models(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_models(value);
  // @@protoc_insertion_point(field_add:clockwork.GPUInfoProto.models)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GPUInfoProto::_internal_models() const {
  return models_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GPUInfoProto::models() const {
  // @@protoc_insertion_point(field_list:clockwork.GPUInfoProto.models)
  return _internal_models();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GPUInfoProto::_internal_mutable_models() {
  return &models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GPUInfoProto::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.GPUInfoProto.models)
  return _internal_mutable_models();
}

// required uint64 io_pool_size = 5;
inline bool GPUInfoProto::_internal_has_io_pool_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GPUInfoProto::has_io_pool_size() const {
  return _internal_has_io_pool_size();
}
inline void GPUInfoProto::clear_io_pool_size() {
  io_pool_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPUInfoProto::_internal_io_pool_size() const {
  return io_pool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPUInfoProto::io_pool_size() const {
  // @@protoc_insertion_point(field_get:clockwork.GPUInfoProto.io_pool_size)
  return _internal_io_pool_size();
}
inline void GPUInfoProto::_internal_set_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  io_pool_size_ = value;
}
inline void GPUInfoProto::set_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_io_pool_size(value);
  // @@protoc_insertion_point(field_set:clockwork.GPUInfoProto.io_pool_size)
}

// required uint64 workspace_pool_size = 6;
inline bool GPUInfoProto::_internal_has_workspace_pool_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GPUInfoProto::has_workspace_pool_size() const {
  return _internal_has_workspace_pool_size();
}
inline void GPUInfoProto::clear_workspace_pool_size() {
  workspace_pool_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPUInfoProto::_internal_workspace_pool_size() const {
  return workspace_pool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPUInfoProto::workspace_pool_size() const {
  // @@protoc_insertion_point(field_get:clockwork.GPUInfoProto.workspace_pool_size)
  return _internal_workspace_pool_size();
}
inline void GPUInfoProto::_internal_set_workspace_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  workspace_pool_size_ = value;
}
inline void GPUInfoProto::set_workspace_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_workspace_pool_size(value);
  // @@protoc_insertion_point(field_set:clockwork.GPUInfoProto.workspace_pool_size)
}

// -------------------------------------------------------------------

// WorkerMemoryInfoProto

// required uint64 page_size = 1;
inline bool WorkerMemoryInfoProto::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkerMemoryInfoProto::has_page_size() const {
  return _internal_has_page_size();
}
inline void WorkerMemoryInfoProto::clear_page_size() {
  page_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerMemoryInfoProto::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerMemoryInfoProto::page_size() const {
  // @@protoc_insertion_point(field_get:clockwork.WorkerMemoryInfoProto.page_size)
  return _internal_page_size();
}
inline void WorkerMemoryInfoProto::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  page_size_ = value;
}
inline void WorkerMemoryInfoProto::set_page_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:clockwork.WorkerMemoryInfoProto.page_size)
}

// required uint64 host_weights_cache_size = 2;
inline bool WorkerMemoryInfoProto::_internal_has_host_weights_cache_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkerMemoryInfoProto::has_host_weights_cache_size() const {
  return _internal_has_host_weights_cache_size();
}
inline void WorkerMemoryInfoProto::clear_host_weights_cache_size() {
  host_weights_cache_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerMemoryInfoProto::_internal_host_weights_cache_size() const {
  return host_weights_cache_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerMemoryInfoProto::host_weights_cache_size() const {
  // @@protoc_insertion_point(field_get:clockwork.WorkerMemoryInfoProto.host_weights_cache_size)
  return _internal_host_weights_cache_size();
}
inline void WorkerMemoryInfoProto::_internal_set_host_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  host_weights_cache_size_ = value;
}
inline void WorkerMemoryInfoProto::set_host_weights_cache_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_host_weights_cache_size(value);
  // @@protoc_insertion_point(field_set:clockwork.WorkerMemoryInfoProto.host_weights_cache_size)
}

// required uint64 host_io_pool_size = 3;
inline bool WorkerMemoryInfoProto::_internal_has_host_io_pool_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkerMemoryInfoProto::has_host_io_pool_size() const {
  return _internal_has_host_io_pool_size();
}
inline void WorkerMemoryInfoProto::clear_host_io_pool_size() {
  host_io_pool_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerMemoryInfoProto::_internal_host_io_pool_size() const {
  return host_io_pool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorkerMemoryInfoProto::host_io_pool_size() const {
  // @@protoc_insertion_point(field_get:clockwork.WorkerMemoryInfoProto.host_io_pool_size)
  return _internal_host_io_pool_size();
}
inline void WorkerMemoryInfoProto::_internal_set_host_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  host_io_pool_size_ = value;
}
inline void WorkerMemoryInfoProto::set_host_io_pool_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_host_io_pool_size(value);
  // @@protoc_insertion_point(field_set:clockwork.WorkerMemoryInfoProto.host_io_pool_size)
}

// repeated .clockwork.GPUInfoProto gpus = 4;
inline int WorkerMemoryInfoProto::_internal_gpus_size() const {
  return gpus_.size();
}
inline int WorkerMemoryInfoProto::gpus_size() const {
  return _internal_gpus_size();
}
inline void WorkerMemoryInfoProto::clear_gpus() {
  gpus_.Clear();
}
inline ::clockwork::GPUInfoProto* WorkerMemoryInfoProto::mutable_gpus(int index) {
  // @@protoc_insertion_point(field_mutable:clockwork.WorkerMemoryInfoProto.gpus)
  return gpus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::GPUInfoProto >*
WorkerMemoryInfoProto::mutable_gpus() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.WorkerMemoryInfoProto.gpus)
  return &gpus_;
}
inline const ::clockwork::GPUInfoProto& WorkerMemoryInfoProto::_internal_gpus(int index) const {
  return gpus_.Get(index);
}
inline const ::clockwork::GPUInfoProto& WorkerMemoryInfoProto::gpus(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.WorkerMemoryInfoProto.gpus)
  return _internal_gpus(index);
}
inline ::clockwork::GPUInfoProto* WorkerMemoryInfoProto::_internal_add_gpus() {
  return gpus_.Add();
}
inline ::clockwork::GPUInfoProto* WorkerMemoryInfoProto::add_gpus() {
  // @@protoc_insertion_point(field_add:clockwork.WorkerMemoryInfoProto.gpus)
  return _internal_add_gpus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::GPUInfoProto >&
WorkerMemoryInfoProto::gpus() const {
  // @@protoc_insertion_point(field_list:clockwork.WorkerMemoryInfoProto.gpus)
  return gpus_;
}

// repeated .clockwork.ModelInfoProto models = 5;
inline int WorkerMemoryInfoProto::_internal_models_size() const {
  return models_.size();
}
inline int WorkerMemoryInfoProto::models_size() const {
  return _internal_models_size();
}
inline void WorkerMemoryInfoProto::clear_models() {
  models_.Clear();
}
inline ::clockwork::ModelInfoProto* WorkerMemoryInfoProto::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:clockwork.WorkerMemoryInfoProto.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ModelInfoProto >*
WorkerMemoryInfoProto::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:clockwork.WorkerMemoryInfoProto.models)
  return &models_;
}
inline const ::clockwork::ModelInfoProto& WorkerMemoryInfoProto::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::clockwork::ModelInfoProto& WorkerMemoryInfoProto::models(int index) const {
  // @@protoc_insertion_point(field_get:clockwork.WorkerMemoryInfoProto.models)
  return _internal_models(index);
}
inline ::clockwork::ModelInfoProto* WorkerMemoryInfoProto::_internal_add_models() {
  return models_.Add();
}
inline ::clockwork::ModelInfoProto* WorkerMemoryInfoProto::add_models() {
  // @@protoc_insertion_point(field_add:clockwork.WorkerMemoryInfoProto.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clockwork::ModelInfoProto >&
WorkerMemoryInfoProto::models() const {
  // @@protoc_insertion_point(field_list:clockwork.WorkerMemoryInfoProto.models)
  return models_;
}

// -------------------------------------------------------------------

// GetWorkerStateResultProto

// required int32 action_id = 1;
inline bool GetWorkerStateResultProto::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetWorkerStateResultProto::has_action_id() const {
  return _internal_has_action_id();
}
inline void GetWorkerStateResultProto::clear_action_id() {
  action_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorkerStateResultProto::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorkerStateResultProto::action_id() const {
  // @@protoc_insertion_point(field_get:clockwork.GetWorkerStateResultProto.action_id)
  return _internal_action_id();
}
inline void GetWorkerStateResultProto::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  action_id_ = value;
}
inline void GetWorkerStateResultProto::set_action_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:clockwork.GetWorkerStateResultProto.action_id)
}

// required .clockwork.WorkerMemoryInfoProto worker_memory_info = 2;
inline bool GetWorkerStateResultProto::_internal_has_worker_memory_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || worker_memory_info_ != nullptr);
  return value;
}
inline bool GetWorkerStateResultProto::has_worker_memory_info() const {
  return _internal_has_worker_memory_info();
}
inline void GetWorkerStateResultProto::clear_worker_memory_info() {
  if (worker_memory_info_ != nullptr) worker_memory_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clockwork::WorkerMemoryInfoProto& GetWorkerStateResultProto::_internal_worker_memory_info() const {
  const ::clockwork::WorkerMemoryInfoProto* p = worker_memory_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::clockwork::WorkerMemoryInfoProto*>(
      &::clockwork::_WorkerMemoryInfoProto_default_instance_);
}
inline const ::clockwork::WorkerMemoryInfoProto& GetWorkerStateResultProto::worker_memory_info() const {
  // @@protoc_insertion_point(field_get:clockwork.GetWorkerStateResultProto.worker_memory_info)
  return _internal_worker_memory_info();
}
inline void GetWorkerStateResultProto::unsafe_arena_set_allocated_worker_memory_info(
    ::clockwork::WorkerMemoryInfoProto* worker_memory_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_memory_info_);
  }
  worker_memory_info_ = worker_memory_info;
  if (worker_memory_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clockwork.GetWorkerStateResultProto.worker_memory_info)
}
inline ::clockwork::WorkerMemoryInfoProto* GetWorkerStateResultProto::release_worker_memory_info() {
  auto temp = unsafe_arena_release_worker_memory_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clockwork::WorkerMemoryInfoProto* GetWorkerStateResultProto::unsafe_arena_release_worker_memory_info() {
  // @@protoc_insertion_point(field_release:clockwork.GetWorkerStateResultProto.worker_memory_info)
  _has_bits_[0] &= ~0x00000001u;
  ::clockwork::WorkerMemoryInfoProto* temp = worker_memory_info_;
  worker_memory_info_ = nullptr;
  return temp;
}
inline ::clockwork::WorkerMemoryInfoProto* GetWorkerStateResultProto::_internal_mutable_worker_memory_info() {
  _has_bits_[0] |= 0x00000001u;
  if (worker_memory_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clockwork::WorkerMemoryInfoProto>(GetArena());
    worker_memory_info_ = p;
  }
  return worker_memory_info_;
}
inline ::clockwork::WorkerMemoryInfoProto* GetWorkerStateResultProto::mutable_worker_memory_info() {
  // @@protoc_insertion_point(field_mutable:clockwork.GetWorkerStateResultProto.worker_memory_info)
  return _internal_mutable_worker_memory_info();
}
inline void GetWorkerStateResultProto::set_allocated_worker_memory_info(::clockwork::WorkerMemoryInfoProto* worker_memory_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete worker_memory_info_;
  }
  if (worker_memory_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(worker_memory_info);
    if (message_arena != submessage_arena) {
      worker_memory_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker_memory_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  worker_memory_info_ = worker_memory_info;
  // @@protoc_insertion_point(field_set_allocated:clockwork.GetWorkerStateResultProto.worker_memory_info)
}

// required uint64 action_received = 3;
inline bool GetWorkerStateResultProto::_internal_has_action_received() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetWorkerStateResultProto::has_action_received() const {
  return _internal_has_action_received();
}
inline void GetWorkerStateResultProto::clear_action_received() {
  action_received_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetWorkerStateResultProto::_internal_action_received() const {
  return action_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetWorkerStateResultProto::action_received() const {
  // @@protoc_insertion_point(field_get:clockwork.GetWorkerStateResultProto.action_received)
  return _internal_action_received();
}
inline void GetWorkerStateResultProto::_internal_set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  action_received_ = value;
}
inline void GetWorkerStateResultProto::set_action_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_action_received(value);
  // @@protoc_insertion_point(field_set:clockwork.GetWorkerStateResultProto.action_received)
}

// required uint64 result_sent = 4;
inline bool GetWorkerStateResultProto::_internal_has_result_sent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetWorkerStateResultProto::has_result_sent() const {
  return _internal_has_result_sent();
}
inline void GetWorkerStateResultProto::clear_result_sent() {
  result_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetWorkerStateResultProto::_internal_result_sent() const {
  return result_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetWorkerStateResultProto::result_sent() const {
  // @@protoc_insertion_point(field_get:clockwork.GetWorkerStateResultProto.result_sent)
  return _internal_result_sent();
}
inline void GetWorkerStateResultProto::_internal_set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  result_sent_ = value;
}
inline void GetWorkerStateResultProto::set_result_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_result_sent(value);
  // @@protoc_insertion_point(field_set:clockwork.GetWorkerStateResultProto.result_sent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clockwork

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::clockwork::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clockwork::RequestType>() {
  return ::clockwork::RequestType_descriptor();
}
template <> struct is_proto_enum< ::clockwork::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clockwork::ActionType>() {
  return ::clockwork::ActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clockwork_2eproto
